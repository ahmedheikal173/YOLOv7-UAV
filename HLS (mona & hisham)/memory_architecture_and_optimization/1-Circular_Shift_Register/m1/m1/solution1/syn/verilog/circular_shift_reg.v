// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="circular_shift_reg_circular_shift_reg,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.959000,HLS_SYN_LAT=13,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=86,HLS_SYN_LUT=242,HLS_VERSION=2021_2}" *)

module circular_shift_reg (
        ap_local_block,
        ap_clk,
        ap_rst_n,
        dout_Addr_A,
        dout_EN_A,
        dout_WEN_A,
        dout_Din_A,
        dout_Dout_A,
        dout_Clk_A,
        dout_Rst_A,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

output   ap_local_block;
input   ap_clk;
input   ap_rst_n;
output  [31:0] dout_Addr_A;
output   dout_EN_A;
output  [0:0] dout_WEN_A;
output  [7:0] dout_Din_A;
input  [7:0] dout_Dout_A;
output   dout_Clk_A;
output   dout_Rst_A;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

wire   [0:0] ap_local_deadlock;
(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [7:0] din;
reg   [4:0] regs_wptr_V;
reg   [3:0] regs_mem_V_address0;
reg    regs_mem_V_ce0;
reg    regs_mem_V_we0;
wire   [7:0] regs_mem_V_q0;
wire   [4:0] add_ln70_fu_119_p2;
reg   [4:0] add_ln70_reg_129;
wire    ap_CS_fsm_state2;
wire    grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_start;
wire    grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_done;
wire    grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_idle;
wire    grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_ready;
wire   [31:0] grp_circular_shift_reg_Pipeline_WRITE_fu_76_dout_Addr_A;
wire    grp_circular_shift_reg_Pipeline_WRITE_fu_76_dout_EN_A;
wire   [0:0] grp_circular_shift_reg_Pipeline_WRITE_fu_76_dout_WEN_A;
wire   [7:0] grp_circular_shift_reg_Pipeline_WRITE_fu_76_dout_Din_A;
wire   [3:0] grp_circular_shift_reg_Pipeline_WRITE_fu_76_regs_mem_V_address0;
wire    grp_circular_shift_reg_Pipeline_WRITE_fu_76_regs_mem_V_ce0;
reg    grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_start_reg;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln587_fu_89_p1;
wire   [4:0] select_ln38_fu_105_p3;
reg    ap_block_state1;
wire   [4:0] add_ln885_fu_94_p2;
wire   [0:0] icmp_ln1064_fu_99_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 regs_wptr_V = 5'd0;
#0 grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_start_reg = 1'b0;
end

circular_shift_reg_regs_mem_V_RAM_T2P_BRAM_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
regs_mem_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(regs_mem_V_address0),
    .ce0(regs_mem_V_ce0),
    .we0(regs_mem_V_we0),
    .d0(din),
    .q0(regs_mem_V_q0)
);

circular_shift_reg_circular_shift_reg_Pipeline_WRITE grp_circular_shift_reg_Pipeline_WRITE_fu_76(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_start),
    .ap_done(grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_done),
    .ap_idle(grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_idle),
    .ap_ready(grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_ready),
    .add_ln70(add_ln70_reg_129),
    .dout_Addr_A(grp_circular_shift_reg_Pipeline_WRITE_fu_76_dout_Addr_A),
    .dout_EN_A(grp_circular_shift_reg_Pipeline_WRITE_fu_76_dout_EN_A),
    .dout_WEN_A(grp_circular_shift_reg_Pipeline_WRITE_fu_76_dout_WEN_A),
    .dout_Din_A(grp_circular_shift_reg_Pipeline_WRITE_fu_76_dout_Din_A),
    .dout_Dout_A(8'd0),
    .regs_mem_V_address0(grp_circular_shift_reg_Pipeline_WRITE_fu_76_regs_mem_V_address0),
    .regs_mem_V_ce0(grp_circular_shift_reg_Pipeline_WRITE_fu_76_regs_mem_V_ce0),
    .regs_mem_V_q0(regs_mem_V_q0)
);

circular_shift_reg_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .din(din),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle),
    .ap_local_deadlock(ap_local_deadlock)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_start_reg <= 1'b1;
        end else if ((grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_ready == 1'b1)) begin
            grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln70_reg_129 <= add_ln70_fu_119_p2;
        regs_wptr_V <= select_ln38_fu_105_p3;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        regs_mem_V_address0 = zext_ln587_fu_89_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        regs_mem_V_address0 = grp_circular_shift_reg_Pipeline_WRITE_fu_76_regs_mem_V_address0;
    end else begin
        regs_mem_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        regs_mem_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        regs_mem_V_ce0 = grp_circular_shift_reg_Pipeline_WRITE_fu_76_regs_mem_V_ce0;
    end else begin
        regs_mem_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        regs_mem_V_we0 = 1'b1;
    end else begin
        regs_mem_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln70_fu_119_p2 = ($signed(select_ln38_fu_105_p3) + $signed(5'd31));

assign add_ln885_fu_94_p2 = (regs_wptr_V + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'd0;

assign dout_Addr_A = grp_circular_shift_reg_Pipeline_WRITE_fu_76_dout_Addr_A;

assign dout_Clk_A = ap_clk;

assign dout_Din_A = grp_circular_shift_reg_Pipeline_WRITE_fu_76_dout_Din_A;

assign dout_EN_A = grp_circular_shift_reg_Pipeline_WRITE_fu_76_dout_EN_A;

assign dout_Rst_A = ap_rst_n_inv;

assign dout_WEN_A = grp_circular_shift_reg_Pipeline_WRITE_fu_76_dout_WEN_A;

assign grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_start = grp_circular_shift_reg_Pipeline_WRITE_fu_76_ap_start_reg;

assign icmp_ln1064_fu_99_p2 = ((add_ln885_fu_94_p2 == 5'd9) ? 1'b1 : 1'b0);

assign select_ln38_fu_105_p3 = ((icmp_ln1064_fu_99_p2[0:0] == 1'b1) ? 5'd0 : add_ln885_fu_94_p2);

assign zext_ln587_fu_89_p1 = regs_wptr_V;

endmodule //circular_shift_reg
