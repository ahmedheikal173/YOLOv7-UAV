// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shift_reg_shift_reg_Pipeline_SHIFT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        din,
        regs_V_address0,
        regs_V_ce0,
        regs_V_we0,
        regs_V_d0,
        regs_V_q0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] din;
output  [3:0] regs_V_address0;
output   regs_V_ce0;
output   regs_V_we0;
output  [7:0] regs_V_d0;
input  [7:0] regs_V_q0;

reg ap_idle;
reg[3:0] regs_V_address0;
reg regs_V_ce0;
reg regs_V_we0;
reg[7:0] regs_V_d0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] tmp_fu_90_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [4:0] i_2_reg_140;
reg   [0:0] tmp_reg_145;
wire   [63:0] i_cast1_fu_98_p1;
reg   [63:0] i_cast1_reg_149;
wire   [0:0] icmp_ln28_fu_106_p2;
reg   [0:0] icmp_ln28_reg_154;
wire   [63:0] zext_ln31_fu_118_p1;
reg   [4:0] i_fu_48;
wire   [4:0] add_ln27_fu_123_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_2;
wire   [3:0] empty_16_fu_102_p1;
wire   [3:0] add_ln31_fu_112_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

shift_reg_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        i_fu_48 <= 5'd8;
    end else if (((tmp_reg_145 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_48 <= add_ln27_fu_123_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        i_2_reg_140 <= ap_sig_allocacmp_i_2;
        tmp_reg_145 <= ap_sig_allocacmp_i_2[32'd4];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_90_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        i_cast1_reg_149[4 : 0] <= i_cast1_fu_98_p1[4 : 0];
        icmp_ln28_reg_154 <= icmp_ln28_fu_106_p2;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((tmp_fu_90_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_2 = 5'd8;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_48;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_154 == 1'd0) & (tmp_reg_145 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        regs_V_address0 = i_cast1_reg_149;
    end else if (((icmp_ln28_fu_106_p2 == 1'd1) & (tmp_fu_90_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        regs_V_address0 = 4'd0;
    end else if (((icmp_ln28_fu_106_p2 == 1'd0) & (tmp_fu_90_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        regs_V_address0 = zext_ln31_fu_118_p1;
    end else begin
        regs_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln28_fu_106_p2 == 1'd1) & (tmp_fu_90_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)) | ((icmp_ln28_reg_154 == 1'd0) & (tmp_reg_145 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln28_fu_106_p2 == 1'd0) & (tmp_fu_90_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        regs_V_ce0 = 1'b1;
    end else begin
        regs_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_154 == 1'd0) & (tmp_reg_145 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        regs_V_d0 = regs_V_q0;
    end else if (((icmp_ln28_fu_106_p2 == 1'd1) & (tmp_fu_90_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        regs_V_d0 = din;
    end else begin
        regs_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln28_fu_106_p2 == 1'd1) & (tmp_fu_90_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)) | ((icmp_ln28_reg_154 == 1'd0) & (tmp_reg_145 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        regs_V_we0 = 1'b1;
    end else begin
        regs_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((tmp_fu_90_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln27_fu_123_p2 = ($signed(i_2_reg_140) + $signed(5'd31));

assign add_ln31_fu_112_p2 = ($signed(empty_16_fu_102_p1) + $signed(4'd15));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_16_fu_102_p1 = ap_sig_allocacmp_i_2[3:0];

assign i_cast1_fu_98_p1 = ap_sig_allocacmp_i_2;

assign icmp_ln28_fu_106_p2 = ((ap_sig_allocacmp_i_2 == 5'd0) ? 1'b1 : 1'b0);

assign tmp_fu_90_p3 = ap_sig_allocacmp_i_2[32'd4];

assign zext_ln31_fu_118_p1 = add_ln31_fu_112_p2;

always @ (posedge ap_clk) begin
    i_cast1_reg_149[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //shift_reg_shift_reg_Pipeline_SHIFT
