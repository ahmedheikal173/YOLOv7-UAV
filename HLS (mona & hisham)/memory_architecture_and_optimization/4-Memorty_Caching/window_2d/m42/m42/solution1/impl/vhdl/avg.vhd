-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity avg is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_local_block : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    din_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    din_EN_A : OUT STD_LOGIC;
    din_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    din_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    din_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    din_Clk_A : OUT STD_LOGIC;
    din_Rst_A : OUT STD_LOGIC;
    din_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    din_EN_B : OUT STD_LOGIC;
    din_WEN_B : OUT STD_LOGIC_VECTOR (0 downto 0);
    din_Din_B : OUT STD_LOGIC_VECTOR (7 downto 0);
    din_Dout_B : IN STD_LOGIC_VECTOR (7 downto 0);
    din_Clk_B : OUT STD_LOGIC;
    din_Rst_B : OUT STD_LOGIC;
    dout_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    dout_EN_A : OUT STD_LOGIC;
    dout_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    dout_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    dout_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    dout_Clk_A : OUT STD_LOGIC;
    dout_Rst_A : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of avg is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "avg_avg,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.909250,HLS_SYN_LAT=1228802,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=143,HLS_SYN_LUT=544,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_27F : STD_LOGIC_VECTOR (9 downto 0) := "1001111111";
    constant ap_const_lv19_64000 : STD_LOGIC_VECTOR (18 downto 0) := "1100100000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_local_deadlock : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln22_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal zext_ln455_5_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln455_5_reg_521 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln455_5_fu_420_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln455_5_reg_531 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal tmp_13_reg_541 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_546 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln455_4_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln455_6_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_fu_86 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln24_fu_426_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_c_load : STD_LOGIC_VECTOR (9 downto 0);
    signal r_fu_90 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln22_1_fu_246_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_r_1 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_fu_94 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln22_fu_223_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (18 downto 0);
    signal din_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal din_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal dout_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln22_fu_165_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_169_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_181_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln7_fu_189_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv_next175_fu_175_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln9_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_262_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_254_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln455_fu_270_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln22_1_fu_280_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid1_fu_284_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_296_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln7_fu_304_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_195_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln22_2_fu_312_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_328_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_fu_320_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln455_1_fu_336_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal indvars_iv_next175_mid1_fu_290_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln9_1_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln9_fu_352_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_209_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln22_3_fu_360_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_376_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_fu_368_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln455_2_fu_384_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln22_fu_238_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln455_1_fu_340_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln455_3_fu_394_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln455_3_fu_398_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln455_fu_274_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln455_4_fu_409_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln455_2_fu_388_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_fu_451_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1245_1_fu_461_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1245_fu_458_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_fu_465_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1245_2_fu_471_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_1_fu_475_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_388 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component avg_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_local_deadlock : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component avg_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component avg_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle,
        ap_local_deadlock => ap_local_deadlock);

    flow_control_loop_pipe_U : component avg_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_exit_ready = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    c_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_388)) then
                if ((icmp_ln22_fu_217_p2 = ap_const_lv1_0)) then 
                    c_fu_86 <= add_ln24_fu_426_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_86 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_388)) then
                if ((icmp_ln22_fu_217_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_94 <= add_ln22_fu_223_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_94 <= ap_const_lv19_0;
                end if;
            end if; 
        end if;
    end process;

    r_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_388)) then
                if ((icmp_ln22_fu_217_p2 = ap_const_lv1_0)) then 
                    r_fu_90 <= select_ln22_1_fu_246_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    r_fu_90 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln22_fu_217_p2 = ap_const_lv1_0))) then
                add_ln455_5_reg_531 <= add_ln455_5_fu_420_p2;
                    zext_ln455_5_reg_521(18 downto 0) <= zext_ln455_5_fu_415_p1(18 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_13_reg_541 <= din_Dout_B;
                tmp_14_reg_546 <= din_Dout_A;
            end if;
        end if;
    end process;
    zext_ln455_5_reg_521(63 downto 19) <= "000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_done_reg, icmp_ln22_fu_217_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln22_fu_217_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln22_fu_223_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv19_1));
    add_ln24_fu_426_p2 <= std_logic_vector(unsigned(select_ln22_fu_238_p3) + unsigned(ap_const_lv10_1));
    add_ln455_1_fu_340_p2 <= std_logic_vector(unsigned(tmp_4_fu_320_p3) + unsigned(zext_ln455_1_fu_336_p1));
    add_ln455_2_fu_388_p2 <= std_logic_vector(unsigned(tmp_9_fu_368_p3) + unsigned(zext_ln455_2_fu_384_p1));
    add_ln455_3_fu_398_p2 <= std_logic_vector(unsigned(add_ln455_1_fu_340_p2) + unsigned(zext_ln455_3_fu_394_p1));
    add_ln455_4_fu_409_p2 <= std_logic_vector(unsigned(add_ln455_fu_274_p2) + unsigned(zext_ln455_3_fu_394_p1));
    add_ln455_5_fu_420_p2 <= std_logic_vector(unsigned(add_ln455_2_fu_388_p2) + unsigned(zext_ln455_3_fu_394_p1));
    add_ln455_fu_274_p2 <= std_logic_vector(unsigned(tmp_2_fu_254_p3) + unsigned(zext_ln455_fu_270_p1));
    add_ln7_fu_189_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_1) + unsigned(ap_const_lv10_3FF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_done_reg, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg, ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_388_assign_proc : process(ap_CS_fsm_state1, ap_done_reg, ap_start_int)
    begin
                ap_condition_388 <= (not(((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_done_reg, icmp_ln22_fu_217_p2, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln22_fu_217_p2 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_done_reg, ap_loop_exit_ready, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_exit_ready = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_lv1_0;
    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c_load_assign_proc : process(ap_CS_fsm_state1, c_fu_86, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_c_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_c_load <= c_fu_86;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten_fu_94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv19_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_94;
        end if; 
    end process;


    ap_sig_allocacmp_r_1_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, r_fu_90)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_r_1 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_r_1 <= r_fu_90;
        end if; 
    end process;

    din_Addr_A <= std_logic_vector(shift_left(unsigned(din_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));

    din_Addr_A_orig_assign_proc : process(ap_CS_fsm_state1, icmp_ln22_fu_217_p2, zext_ln455_5_fu_415_p1, ap_CS_fsm_state2, zext_ln455_6_fu_447_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            din_Addr_A_orig <= zext_ln455_6_fu_447_p1(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln22_fu_217_p2 = ap_const_lv1_0))) then 
            din_Addr_A_orig <= zext_ln455_5_fu_415_p1(32 - 1 downto 0);
        else 
            din_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    din_Addr_B <= std_logic_vector(shift_left(unsigned(din_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    din_Addr_B_orig <= zext_ln455_4_fu_404_p1(32 - 1 downto 0);
    din_Clk_A <= ap_clk;
    din_Clk_B <= ap_clk;
    din_Din_A <= ap_const_lv8_0;
    din_Din_B <= ap_const_lv8_0;

    din_EN_A_assign_proc : process(ap_CS_fsm_state1, ap_done_reg, icmp_ln22_fu_217_p2, ap_CS_fsm_state2, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln22_fu_217_p2 = ap_const_lv1_0)))) then 
            din_EN_A <= ap_const_logic_1;
        else 
            din_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    din_EN_B_assign_proc : process(ap_CS_fsm_state1, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            din_EN_B <= ap_const_logic_1;
        else 
            din_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    din_Rst_A <= ap_rst_n_inv;
    din_Rst_B <= ap_rst_n_inv;
    din_WEN_A <= ap_const_lv1_0;
    din_WEN_B <= ap_const_lv1_0;
    dout_Addr_A <= std_logic_vector(shift_left(unsigned(dout_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    dout_Addr_A_orig <= zext_ln455_5_reg_521(32 - 1 downto 0);
    dout_Clk_A <= ap_clk;
    dout_Din_A <= ret_V_1_fu_475_p2(9 downto 2);

    dout_EN_A_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_EN_A <= ap_const_logic_1;
        else 
            dout_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    dout_Rst_A <= ap_rst_n_inv;

    dout_WEN_A_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_WEN_A <= ap_const_lv1_1;
        else 
            dout_WEN_A <= ap_const_lv1_0;
        end if; 
    end process;

    empty_fu_169_p2 <= std_logic_vector(unsigned(zext_ln22_fu_165_p1) + unsigned(ap_const_lv11_7FF));
    icmp_ln22_fu_217_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv19_64000) else "0";
    icmp_ln24_fu_232_p2 <= "1" when (ap_sig_allocacmp_c_load = ap_const_lv10_280) else "0";
    icmp_ln9_1_fu_346_p2 <= "1" when (unsigned(indvars_iv_next175_mid1_fu_290_p2) > unsigned(ap_const_lv10_27F)) else "0";
    icmp_ln9_fu_203_p2 <= "1" when (unsigned(indvars_iv_next175_fu_175_p2) > unsigned(ap_const_lv10_27F)) else "0";
    indvars_iv_next175_fu_175_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_1) + unsigned(ap_const_lv10_1));
    indvars_iv_next175_mid1_fu_290_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_1) + unsigned(ap_const_lv10_2));
    p_mid1_fu_284_p2 <= std_logic_vector(unsigned(zext_ln22_1_fu_280_p1) + unsigned(ap_const_lv11_7FF));
    r_V_fu_451_p3 <= (tmp_14_reg_546 & ap_const_lv1_0);
    ret_V_1_fu_475_p2 <= std_logic_vector(unsigned(ret_V_fu_465_p2) + unsigned(zext_ln1245_2_fu_471_p1));
    ret_V_fu_465_p2 <= std_logic_vector(unsigned(zext_ln1245_1_fu_461_p1) + unsigned(zext_ln1245_fu_458_p1));
    select_ln22_1_fu_246_p3 <= 
        indvars_iv_next175_fu_175_p2 when (icmp_ln24_fu_232_p2(0) = '1') else 
        ap_sig_allocacmp_r_1;
    select_ln22_2_fu_312_p3 <= 
        select_ln7_fu_304_p3 when (icmp_ln24_fu_232_p2(0) = '1') else 
        tmp_fu_195_p3;
    select_ln22_3_fu_360_p3 <= 
        select_ln9_fu_352_p3 when (icmp_ln24_fu_232_p2(0) = '1') else 
        tmp_6_fu_209_p3;
    select_ln22_fu_238_p3 <= 
        ap_const_lv10_0 when (icmp_ln24_fu_232_p2(0) = '1') else 
        ap_sig_allocacmp_c_load;
    select_ln7_fu_304_p3 <= 
        ap_const_lv10_0 when (tmp_7_fu_296_p3(0) = '1') else 
        ap_sig_allocacmp_r_1;
    select_ln9_fu_352_p3 <= 
        ap_const_lv10_27F when (icmp_ln9_1_fu_346_p2(0) = '1') else 
        indvars_iv_next175_mid1_fu_290_p2;
    tmp_2_fu_254_p3 <= (select_ln22_1_fu_246_p3 & ap_const_lv9_0);
    tmp_3_fu_262_p3 <= (select_ln22_1_fu_246_p3 & ap_const_lv7_0);
    tmp_4_fu_320_p3 <= (select_ln22_2_fu_312_p3 & ap_const_lv9_0);
    tmp_5_fu_181_p3 <= empty_fu_169_p2(10 downto 10);
    tmp_6_fu_209_p3 <= 
        ap_const_lv10_27F when (icmp_ln9_fu_203_p2(0) = '1') else 
        indvars_iv_next175_fu_175_p2;
    tmp_7_fu_296_p3 <= p_mid1_fu_284_p2(10 downto 10);
    tmp_8_fu_328_p3 <= (select_ln22_2_fu_312_p3 & ap_const_lv7_0);
    tmp_9_fu_368_p3 <= (select_ln22_3_fu_360_p3 & ap_const_lv9_0);
    tmp_fu_195_p3 <= 
        ap_const_lv10_0 when (tmp_5_fu_181_p3(0) = '1') else 
        add_ln7_fu_189_p2;
    tmp_s_fu_376_p3 <= (select_ln22_3_fu_360_p3 & ap_const_lv7_0);
    zext_ln1245_1_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_451_p3),10));
    zext_ln1245_2_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(din_Dout_A),10));
    zext_ln1245_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_541),10));
    zext_ln22_1_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next175_fu_175_p2),11));
    zext_ln22_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_r_1),11));
    zext_ln455_1_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_328_p3),19));
    zext_ln455_2_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_376_p3),19));
    zext_ln455_3_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln22_fu_238_p3),19));
    zext_ln455_4_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln455_3_fu_398_p2),64));
    zext_ln455_5_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln455_4_fu_409_p2),64));
    zext_ln455_6_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln455_5_reg_531),64));
    zext_ln455_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_262_p3),19));
end behav;
