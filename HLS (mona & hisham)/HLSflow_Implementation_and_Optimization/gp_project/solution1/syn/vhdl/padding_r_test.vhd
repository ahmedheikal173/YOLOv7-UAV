-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity padding_r_test is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    im_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    im_ce0 : OUT STD_LOGIC;
    im_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    image_padded_0_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    image_padded_0_ce0 : OUT STD_LOGIC;
    image_padded_0_we0 : OUT STD_LOGIC;
    image_padded_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of padding_r_test is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv17_142 : STD_LOGIC_VECTOR (16 downto 0) := "00000000101000010";
    constant ap_const_lv9_142 : STD_LOGIC_VECTOR (8 downto 0) := "101000010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_140_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal next_mul_reg_276 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_2_fu_152_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_reg_284 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_fu_164_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_fu_191_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_300 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_8_fu_221_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_8_reg_305 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond1_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_231_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_reg_310 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_2_fu_243_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_2_reg_318 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_267_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_reg_328 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_reg_84 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond3_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_95 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_reg_107 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond4_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i2_reg_118 : STD_LOGIC_VECTOR (8 downto 0);
    signal j3_reg_129 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_11_cast_fu_180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_cast_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_cast_fu_170_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_174_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_fu_197_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_fu_209_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl1_cast_fu_217_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_cast_fu_205_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_s_fu_231_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_fu_249_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_fu_253_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_2_cast_fu_263_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_231_p00 : STD_LOGIC_VECTOR (16 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i2_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i2_reg_118 <= i_1_reg_300;
            elsif (((exitcond4_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i2_reg_118 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_84 <= i_2_reg_284;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_84 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j3_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_185_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j3_reg_129 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j3_reg_129 <= j_2_reg_318;
            end if; 
        end if;
    end process;

    j_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_107 <= ap_const_lv9_0;
            elsif (((exitcond3_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_107 <= j_1_fu_164_p2;
            end if; 
        end if;
    end process;

    phi_mul_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_95 <= next_mul_reg_276;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_95 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_1_reg_300 <= i_1_fu_191_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_284 <= i_2_fu_152_p2;
                next_mul_reg_276 <= next_mul_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_2_reg_318 <= j_2_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_4_reg_328 <= tmp_4_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_185_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_8_reg_305(17 downto 6) <= tmp_8_fu_221_p2(17 downto 6);
                    tmp_s_reg_310(16 downto 1) <= tmp_s_fu_231_p2(16 downto 1);
            end if;
        end if;
    end process;
    tmp_8_reg_305(5 downto 0) <= "000000";
    tmp_s_reg_310(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond1_fu_185_p2, ap_CS_fsm_state5, exitcond_fu_237_p2, exitcond3_fu_158_p2, exitcond4_fu_146_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond1_fu_185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, exitcond1_fu_185_p2)
    begin
        if ((((exitcond1_fu_185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, exitcond1_fu_185_p2)
    begin
        if (((exitcond1_fu_185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_185_p2 <= "1" when (i2_reg_118 = ap_const_lv9_140) else "0";
    exitcond3_fu_158_p2 <= "1" when (j_reg_107 = ap_const_lv9_142) else "0";
    exitcond4_fu_146_p2 <= "1" when (i_reg_84 = ap_const_lv9_142) else "0";
    exitcond_fu_237_p2 <= "1" when (j3_reg_129 = ap_const_lv9_140) else "0";
    i_1_fu_191_p2 <= std_logic_vector(unsigned(i2_reg_118) + unsigned(ap_const_lv9_1));
    i_2_fu_152_p2 <= std_logic_vector(unsigned(i_reg_84) + unsigned(ap_const_lv9_1));
    im_address0 <= tmp_12_cast_fu_258_p1(17 - 1 downto 0);

    im_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            im_ce0 <= ap_const_logic_1;
        else 
            im_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_padded_0_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, tmp_11_cast_fu_180_p1, tmp_13_cast_fu_272_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            image_padded_0_address0 <= tmp_13_cast_fu_272_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            image_padded_0_address0 <= tmp_11_cast_fu_180_p1(17 - 1 downto 0);
        else 
            image_padded_0_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image_padded_0_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            image_padded_0_ce0 <= ap_const_logic_1;
        else 
            image_padded_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_padded_0_d0_assign_proc : process(im_q0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            image_padded_0_d0 <= im_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            image_padded_0_d0 <= ap_const_lv32_0;
        else 
            image_padded_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image_padded_0_we0_assign_proc : process(ap_CS_fsm_state3, exitcond3_fu_158_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((exitcond3_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            image_padded_0_we0 <= ap_const_logic_1;
        else 
            image_padded_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_164_p2 <= std_logic_vector(unsigned(j_reg_107) + unsigned(ap_const_lv9_1));
    j_2_fu_243_p2 <= std_logic_vector(unsigned(j3_reg_129) + unsigned(ap_const_lv9_1));
    next_mul_fu_140_p2 <= std_logic_vector(unsigned(phi_mul_reg_95) + unsigned(ap_const_lv17_142));
    p_shl1_cast_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_209_p3),18));
    p_shl_cast_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_197_p3),18));
    tmp_11_cast_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_174_p2),64));
    tmp_12_cast_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_253_p2),64));
    tmp_13_cast_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_328),64));
    tmp_2_cast_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_fu_243_p2),17));
    tmp_2_fu_174_p2 <= std_logic_vector(unsigned(phi_mul_reg_95) + unsigned(tmp_9_cast_fu_170_p1));
    tmp_3_fu_253_p2 <= std_logic_vector(unsigned(tmp_8_reg_305) + unsigned(tmp_cast_fu_249_p1));
    tmp_4_fu_267_p2 <= std_logic_vector(unsigned(tmp_s_reg_310) + unsigned(tmp_2_cast_fu_263_p1));
    tmp_5_fu_197_p3 <= (i2_reg_118 & ap_const_lv8_0);
    tmp_6_fu_209_p3 <= (i2_reg_118 & ap_const_lv6_0);
    tmp_8_fu_221_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_217_p1) + unsigned(p_shl_cast_fu_205_p1));
    tmp_9_cast_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_107),17));
    tmp_cast_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_reg_129),18));
    tmp_s_fu_231_p0 <= tmp_s_fu_231_p00(9 - 1 downto 0);
    tmp_s_fu_231_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_191_p2),17));
    tmp_s_fu_231_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_231_p0) * unsigned(ap_const_lv17_142), 17));
end behav;
