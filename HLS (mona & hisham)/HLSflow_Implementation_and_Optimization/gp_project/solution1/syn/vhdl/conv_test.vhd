-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_test is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    image_r_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    image_r_ce0 : OUT STD_LOGIC;
    image_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_ce0 : OUT STD_LOGIC;
    weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_conv_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    output_conv_ce0 : OUT STD_LOGIC;
    output_conv_we0 : OUT STD_LOGIC;
    output_conv_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_conv_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_test is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_test,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-1lv-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.435000,HLS_SYN_LAT=3179219,HLS_SYN_TPT=none,HLS_SYN_MEM=186,HLS_SYN_DSP=3,HLS_SYN_FF=380,HLS_SYN_LUT=1099,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv17_142 : STD_LOGIC_VECTOR (16 downto 0) := "00000000101000010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_141 : STD_LOGIC_VECTOR (8 downto 0) := "101000001";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv18_142 : STD_LOGIC_VECTOR (17 downto 0) := "000000000101000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_234_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal next_mul_reg_470 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal indvarinc_fu_240_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvarinc_reg_475 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvarinc1_fu_246_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_3_fu_285_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_3_reg_494 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_9_fu_315_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_9_reg_499 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond4_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_327_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_3_reg_507 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal r_1_fu_343_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_1_reg_515 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_12_fu_359_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_12_reg_520 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond2_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_381_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_reg_525 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_conv_addr_reg_530 : STD_LOGIC_VECTOR (16 downto 0);
    signal s_1_fu_411_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal s_1_reg_538 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond1_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_3_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal image_padded_0_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal image_padded_0_ce0 : STD_LOGIC;
    signal image_padded_0_we0 : STD_LOGIC;
    signal image_padded_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_padded_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_padding_r_test_fu_227_ap_start : STD_LOGIC;
    signal grp_padding_r_test_fu_227_ap_done : STD_LOGIC;
    signal grp_padding_r_test_fu_227_ap_idle : STD_LOGIC;
    signal grp_padding_r_test_fu_227_ap_ready : STD_LOGIC;
    signal grp_padding_r_test_fu_227_im_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_padding_r_test_fu_227_im_ce0 : STD_LOGIC;
    signal grp_padding_r_test_fu_227_image_padded_0_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_padding_r_test_fu_227_image_padded_0_ce0 : STD_LOGIC;
    signal grp_padding_r_test_fu_227_image_padded_0_we0 : STD_LOGIC;
    signal grp_padding_r_test_fu_227_image_padded_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar_reg_122 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_134 : STD_LOGIC_VECTOR (16 downto 0);
    signal invdar9_reg_146 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_157 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond3_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_169 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal sum_reg_181 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_reg_193 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_216 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_padding_r_test_fu_227_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_16_cast_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_cast_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_cast_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_cast_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_cast_fu_252_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_fu_256_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_fu_291_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_fu_303_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl1_cast_fu_311_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_cast_fu_299_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_cast4_fu_333_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_349_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_fu_359_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_fu_369_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_cast_fu_377_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_cast_fu_365_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_cast_fu_387_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_11_fu_391_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal s_cast2_fu_401_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_fu_417_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_cast_fu_423_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_16_fu_427_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_12_cast_fu_437_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_fu_441_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_fu_451_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_451_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_fu_359_p00 : STD_LOGIC_VECTOR (17 downto 0);

    component padding_r_test IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        im_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        im_ce0 : OUT STD_LOGIC;
        im_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        image_padded_0_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        image_padded_0_ce0 : OUT STD_LOGIC;
        image_padded_0_we0 : OUT STD_LOGIC;
        image_padded_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_test_image_pbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    image_padded_0_U : component conv_test_image_pbkb
    generic map (
        DataWidth => 32,
        AddressRange => 103684,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => image_padded_0_address0,
        ce0 => image_padded_0_ce0,
        we0 => image_padded_0_we0,
        d0 => image_padded_0_d0,
        q0 => image_padded_0_q0);

    grp_padding_r_test_fu_227 : component padding_r_test
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_padding_r_test_fu_227_ap_start,
        ap_done => grp_padding_r_test_fu_227_ap_done,
        ap_idle => grp_padding_r_test_fu_227_ap_idle,
        ap_ready => grp_padding_r_test_fu_227_ap_ready,
        im_address0 => grp_padding_r_test_fu_227_im_address0,
        im_ce0 => grp_padding_r_test_fu_227_im_ce0,
        im_q0 => image_r_q0,
        image_padded_0_address0 => grp_padding_r_test_fu_227_image_padded_0_address0,
        image_padded_0_ce0 => grp_padding_r_test_fu_227_image_padded_0_ce0,
        image_padded_0_we0 => grp_padding_r_test_fu_227_image_padded_0_we0,
        image_padded_0_d0 => grp_padding_r_test_fu_227_image_padded_0_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_padding_r_test_fu_227_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_padding_r_test_fu_227_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_padding_r_test_fu_227_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_padding_r_test_fu_227_ap_ready = ap_const_logic_1)) then 
                    grp_padding_r_test_fu_227_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond3_fu_321_p2 = ap_const_lv1_1))) then 
                i_reg_157 <= i_3_reg_494;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_padding_r_test_fu_227_ap_done = ap_const_logic_1))) then 
                i_reg_157 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    invdar9_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                invdar9_reg_146 <= indvarinc1_fu_246_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                invdar9_reg_146 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    invdar_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_273_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_5_fu_267_p2 = ap_const_lv1_1))) then 
                invdar_reg_122 <= indvarinc_reg_475;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                invdar_reg_122 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_279_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_reg_169 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_reg_169 <= j_3_reg_507;
            end if; 
        end if;
    end process;

    phi_mul_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_273_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_5_fu_267_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_134 <= next_mul_reg_470;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_134 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    r_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                r_reg_193 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond1_fu_405_p2 = ap_const_lv1_1))) then 
                r_reg_193 <= r_1_reg_515;
            end if; 
        end if;
    end process;

    s_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                s_reg_216 <= s_1_reg_538;
            elsif (((exitcond2_fu_337_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                s_reg_216 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    sum_1_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_1_reg_204 <= sum_3_fu_457_p2;
            elsif (((exitcond2_fu_337_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                sum_1_reg_204 <= sum_reg_181;
            end if; 
        end if;
    end process;

    sum_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                sum_reg_181 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond1_fu_405_p2 = ap_const_lv1_1))) then 
                sum_reg_181 <= sum_1_reg_204;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_3_reg_494 <= i_3_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                indvarinc_reg_475 <= indvarinc_fu_240_p2;
                next_mul_reg_470 <= next_mul_fu_234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_3_reg_507 <= j_3_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_337_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                output_conv_addr_reg_530 <= tmp_20_cast_fu_396_p1(17 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                r_1_reg_515 <= r_1_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                s_1_reg_538 <= s_1_fu_411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_337_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    tmp_12_reg_520(17 downto 1) <= tmp_12_fu_359_p2(17 downto 1);
                tmp_15_reg_525 <= tmp_15_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_279_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_9_reg_499(17 downto 6) <= tmp_9_fu_315_p2(17 downto 6);
            end if;
        end if;
    end process;
    tmp_9_reg_499(5 downto 0) <= "000000";
    tmp_12_reg_520(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state6, exitcond4_fu_279_p2, ap_CS_fsm_state7, ap_CS_fsm_state8, exitcond2_fu_337_p2, ap_CS_fsm_state9, exitcond1_fu_405_p2, grp_padding_r_test_fu_227_ap_done, tmp_5_fu_267_p2, tmp_6_fu_273_p2, ap_CS_fsm_state5, exitcond3_fu_321_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_6_fu_273_p2 = ap_const_lv1_1) and (tmp_5_fu_267_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((tmp_6_fu_273_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_5_fu_267_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_padding_r_test_fu_227_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond4_fu_279_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond3_fu_321_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((exitcond2_fu_337_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond1_fu_405_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state6, exitcond4_fu_279_p2)
    begin
        if (((exitcond4_fu_279_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, exitcond4_fu_279_p2)
    begin
        if (((exitcond4_fu_279_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_405_p2 <= "1" when (s_reg_216 = ap_const_lv2_3) else "0";
    exitcond2_fu_337_p2 <= "1" when (r_reg_193 = ap_const_lv2_3) else "0";
    exitcond3_fu_321_p2 <= "1" when (j_reg_169 = ap_const_lv9_140) else "0";
    exitcond4_fu_279_p2 <= "1" when (i_reg_157 = ap_const_lv9_140) else "0";
    grp_padding_r_test_fu_227_ap_start <= grp_padding_r_test_fu_227_ap_start_reg;
    i_3_fu_285_p2 <= std_logic_vector(unsigned(i_reg_157) + unsigned(ap_const_lv9_1));

    image_padded_0_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, grp_padding_r_test_fu_227_image_padded_0_address0, ap_CS_fsm_state5, tmp_16_cast_fu_262_p1, tmp_24_cast_fu_432_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            image_padded_0_address0 <= tmp_24_cast_fu_432_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            image_padded_0_address0 <= tmp_16_cast_fu_262_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            image_padded_0_address0 <= grp_padding_r_test_fu_227_image_padded_0_address0;
        else 
            image_padded_0_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image_padded_0_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, grp_padding_r_test_fu_227_image_padded_0_ce0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            image_padded_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            image_padded_0_ce0 <= grp_padding_r_test_fu_227_image_padded_0_ce0;
        else 
            image_padded_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_padded_0_d0_assign_proc : process(ap_CS_fsm_state3, grp_padding_r_test_fu_227_image_padded_0_d0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            image_padded_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            image_padded_0_d0 <= grp_padding_r_test_fu_227_image_padded_0_d0;
        else 
            image_padded_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image_padded_0_we0_assign_proc : process(ap_CS_fsm_state3, grp_padding_r_test_fu_227_image_padded_0_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            image_padded_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            image_padded_0_we0 <= grp_padding_r_test_fu_227_image_padded_0_we0;
        else 
            image_padded_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    image_r_address0 <= grp_padding_r_test_fu_227_im_address0;
    image_r_ce0 <= grp_padding_r_test_fu_227_im_ce0;
    indvarinc1_fu_246_p2 <= std_logic_vector(unsigned(invdar9_reg_146) + unsigned(ap_const_lv9_1));
    indvarinc_fu_240_p2 <= std_logic_vector(unsigned(invdar_reg_122) + unsigned(ap_const_lv9_1));
    j_3_fu_327_p2 <= std_logic_vector(unsigned(j_reg_169) + unsigned(ap_const_lv9_1));
    next_mul_fu_234_p2 <= std_logic_vector(unsigned(phi_mul_reg_134) + unsigned(ap_const_lv17_142));

    output_conv_address0_assign_proc : process(ap_CS_fsm_state8, output_conv_addr_reg_530, ap_CS_fsm_state11, tmp_20_cast_fu_396_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_conv_address0 <= output_conv_addr_reg_530;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_conv_address0 <= tmp_20_cast_fu_396_p1(17 - 1 downto 0);
        else 
            output_conv_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_conv_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            output_conv_ce0 <= ap_const_logic_1;
        else 
            output_conv_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_conv_d0 <= std_logic_vector(unsigned(sum_reg_181) + unsigned(output_conv_q0));

    output_conv_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_conv_we0 <= ap_const_logic_1;
        else 
            output_conv_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_303_p3),18));
    p_shl2_cast_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_369_p3),5));
    p_shl_cast_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_291_p3),18));
    r_1_fu_343_p2 <= std_logic_vector(unsigned(r_reg_193) + unsigned(ap_const_lv2_1));
    r_cast4_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_reg_193),9));
    s_1_fu_411_p2 <= std_logic_vector(unsigned(s_reg_216) + unsigned(ap_const_lv2_1));
    s_cast2_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_reg_216),9));
    sum_3_fu_457_p2 <= std_logic_vector(unsigned(sum_1_reg_204) + unsigned(tmp_13_fu_451_p2));
    tmp_10_fu_417_p2 <= std_logic_vector(unsigned(s_cast2_fu_401_p1) + unsigned(j_reg_169));
    tmp_11_cast_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_417_p2),18));
    tmp_11_fu_391_p2 <= std_logic_vector(unsigned(tmp_9_reg_499) + unsigned(tmp_9_cast_fu_387_p1));
    tmp_12_cast_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_reg_216),5));
    tmp_12_fu_359_p0 <= tmp_12_fu_359_p00(9 - 1 downto 0);
    tmp_12_fu_359_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_349_p2),18));
    tmp_12_fu_359_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_359_p0) * unsigned(ap_const_lv18_142), 18));
    tmp_13_fu_451_p0 <= weights_q0;
    tmp_13_fu_451_p1 <= image_padded_0_q0;
    tmp_13_fu_451_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_13_fu_451_p0) * signed(tmp_13_fu_451_p1))), 32));
    tmp_14_fu_369_p3 <= (r_reg_193 & ap_const_lv2_0);
    tmp_15_fu_381_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_377_p1) - unsigned(tmp_8_cast_fu_365_p1));
    tmp_16_cast_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_256_p2),64));
    tmp_16_fu_427_p2 <= std_logic_vector(unsigned(tmp_12_reg_520) + unsigned(tmp_11_cast_fu_423_p1));
    tmp_17_fu_441_p2 <= std_logic_vector(unsigned(tmp_15_reg_525) + unsigned(tmp_12_cast_fu_437_p1));
    tmp_20_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_391_p2),64));
        tmp_24_cast_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_fu_427_p2),64));

        tmp_25_cast_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_441_p2),64));

    tmp_4_fu_349_p2 <= std_logic_vector(unsigned(r_cast4_fu_333_p1) + unsigned(i_reg_157));
    tmp_5_fu_267_p2 <= "1" when (invdar9_reg_146 = ap_const_lv9_141) else "0";
    tmp_6_fu_273_p2 <= "1" when (invdar_reg_122 = ap_const_lv9_141) else "0";
    tmp_7_fu_291_p3 <= (i_reg_157 & ap_const_lv8_0);
    tmp_8_cast_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_reg_193),5));
    tmp_8_fu_303_p3 <= (i_reg_157 & ap_const_lv6_0);
    tmp_9_cast_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_169),18));
    tmp_9_fu_315_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_311_p1) + unsigned(p_shl_cast_fu_299_p1));
    tmp_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar9_reg_146),17));
    tmp_s_fu_256_p2 <= std_logic_vector(unsigned(phi_mul_reg_134) + unsigned(tmp_cast_fu_252_p1));
    weights_address0 <= tmp_25_cast_fu_446_p1(4 - 1 downto 0);

    weights_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            weights_ce0 <= ap_const_logic_1;
        else 
            weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
