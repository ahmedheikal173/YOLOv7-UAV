// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding_r_test (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        im_address0,
        im_ce0,
        im_q0,
        image_padded_0_address0,
        image_padded_0_ce0,
        image_padded_0_we0,
        image_padded_0_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [16:0] im_address0;
output   im_ce0;
input  [31:0] im_q0;
output  [16:0] image_padded_0_address0;
output   image_padded_0_ce0;
output   image_padded_0_we0;
output  [31:0] image_padded_0_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg im_ce0;
reg[16:0] image_padded_0_address0;
reg image_padded_0_ce0;
reg image_padded_0_we0;
reg[31:0] image_padded_0_d0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [16:0] next_mul_fu_140_p2;
reg   [16:0] next_mul_reg_276;
wire    ap_CS_fsm_state2;
wire   [8:0] i_2_fu_152_p2;
reg   [8:0] i_2_reg_284;
wire   [8:0] j_1_fu_164_p2;
wire    ap_CS_fsm_state3;
wire   [8:0] i_1_fu_191_p2;
reg   [8:0] i_1_reg_300;
wire    ap_CS_fsm_state4;
wire   [17:0] tmp_8_fu_221_p2;
reg   [17:0] tmp_8_reg_305;
wire   [0:0] exitcond1_fu_185_p2;
wire   [16:0] tmp_s_fu_231_p2;
reg   [16:0] tmp_s_reg_310;
wire   [8:0] j_2_fu_243_p2;
reg   [8:0] j_2_reg_318;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_237_p2;
wire   [16:0] tmp_4_fu_267_p2;
reg   [16:0] tmp_4_reg_328;
reg   [8:0] i_reg_84;
wire   [0:0] exitcond3_fu_158_p2;
reg   [16:0] phi_mul_reg_95;
reg   [8:0] j_reg_107;
wire   [0:0] exitcond4_fu_146_p2;
reg   [8:0] i2_reg_118;
reg   [8:0] j3_reg_129;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_11_cast_fu_180_p1;
wire   [63:0] tmp_12_cast_fu_258_p1;
wire   [63:0] tmp_13_cast_fu_272_p1;
wire   [16:0] tmp_9_cast_fu_170_p1;
wire   [16:0] tmp_2_fu_174_p2;
wire   [16:0] tmp_5_fu_197_p3;
wire   [14:0] tmp_6_fu_209_p3;
wire   [17:0] p_shl1_cast_fu_217_p1;
wire   [17:0] p_shl_cast_fu_205_p1;
wire   [8:0] tmp_s_fu_231_p0;
wire   [17:0] tmp_cast_fu_249_p1;
wire   [17:0] tmp_3_fu_253_p2;
wire   [16:0] tmp_2_cast_fu_263_p1;
reg   [5:0] ap_NS_fsm;
wire   [16:0] tmp_s_fu_231_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i2_reg_118 <= i_1_reg_300;
    end else if (((exitcond4_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i2_reg_118 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_84 <= i_2_reg_284;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_84 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j3_reg_129 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j3_reg_129 <= j_2_reg_318;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_107 <= 9'd0;
    end else if (((exitcond3_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_107 <= j_1_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_95 <= next_mul_reg_276;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_95 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_300 <= i_1_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_284 <= i_2_fu_152_p2;
        next_mul_reg_276 <= next_mul_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_2_reg_318 <= j_2_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_4_reg_328 <= tmp_4_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_8_reg_305[17 : 6] <= tmp_8_fu_221_p2[17 : 6];
        tmp_s_reg_310[16 : 1] <= tmp_s_fu_231_p2[16 : 1];
    end
end

always @ (*) begin
    if ((((exitcond1_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        im_ce0 = 1'b1;
    end else begin
        im_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        image_padded_0_address0 = tmp_13_cast_fu_272_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        image_padded_0_address0 = tmp_11_cast_fu_180_p1;
    end else begin
        image_padded_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        image_padded_0_ce0 = 1'b1;
    end else begin
        image_padded_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        image_padded_0_d0 = im_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        image_padded_0_d0 = 32'd0;
    end else begin
        image_padded_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((exitcond3_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        image_padded_0_we0 = 1'b1;
    end else begin
        image_padded_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond1_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign exitcond1_fu_185_p2 = ((i2_reg_118 == 9'd320) ? 1'b1 : 1'b0);

assign exitcond3_fu_158_p2 = ((j_reg_107 == 9'd322) ? 1'b1 : 1'b0);

assign exitcond4_fu_146_p2 = ((i_reg_84 == 9'd322) ? 1'b1 : 1'b0);

assign exitcond_fu_237_p2 = ((j3_reg_129 == 9'd320) ? 1'b1 : 1'b0);

assign i_1_fu_191_p2 = (i2_reg_118 + 9'd1);

assign i_2_fu_152_p2 = (i_reg_84 + 9'd1);

assign im_address0 = tmp_12_cast_fu_258_p1;

assign j_1_fu_164_p2 = (j_reg_107 + 9'd1);

assign j_2_fu_243_p2 = (j3_reg_129 + 9'd1);

assign next_mul_fu_140_p2 = (phi_mul_reg_95 + 17'd322);

assign p_shl1_cast_fu_217_p1 = tmp_6_fu_209_p3;

assign p_shl_cast_fu_205_p1 = tmp_5_fu_197_p3;

assign tmp_11_cast_fu_180_p1 = tmp_2_fu_174_p2;

assign tmp_12_cast_fu_258_p1 = tmp_3_fu_253_p2;

assign tmp_13_cast_fu_272_p1 = tmp_4_reg_328;

assign tmp_2_cast_fu_263_p1 = j_2_fu_243_p2;

assign tmp_2_fu_174_p2 = (phi_mul_reg_95 + tmp_9_cast_fu_170_p1);

assign tmp_3_fu_253_p2 = (tmp_8_reg_305 + tmp_cast_fu_249_p1);

assign tmp_4_fu_267_p2 = (tmp_s_reg_310 + tmp_2_cast_fu_263_p1);

assign tmp_5_fu_197_p3 = {{i2_reg_118}, {8'd0}};

assign tmp_6_fu_209_p3 = {{i2_reg_118}, {6'd0}};

assign tmp_8_fu_221_p2 = (p_shl1_cast_fu_217_p1 + p_shl_cast_fu_205_p1);

assign tmp_9_cast_fu_170_p1 = j_reg_107;

assign tmp_cast_fu_249_p1 = j3_reg_129;

assign tmp_s_fu_231_p0 = tmp_s_fu_231_p00;

assign tmp_s_fu_231_p00 = i_1_fu_191_p2;

assign tmp_s_fu_231_p2 = (tmp_s_fu_231_p0 * $signed('h142));

always @ (posedge ap_clk) begin
    tmp_8_reg_305[5:0] <= 6'b000000;
    tmp_s_reg_310[0] <= 1'b0;
end

endmodule //padding_r_test
