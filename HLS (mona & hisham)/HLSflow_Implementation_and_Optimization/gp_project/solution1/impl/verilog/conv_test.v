// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_test,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-1lv-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.435000,HLS_SYN_LAT=3179219,HLS_SYN_TPT=none,HLS_SYN_MEM=186,HLS_SYN_DSP=3,HLS_SYN_FF=380,HLS_SYN_LUT=1099,HLS_VERSION=2018_3}" *)

module conv_test (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        image_r_address0,
        image_r_ce0,
        image_r_q0,
        weights_address0,
        weights_ce0,
        weights_q0,
        output_conv_address0,
        output_conv_ce0,
        output_conv_we0,
        output_conv_d0,
        output_conv_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [16:0] image_r_address0;
output   image_r_ce0;
input  [31:0] image_r_q0;
output  [3:0] weights_address0;
output   weights_ce0;
input  [31:0] weights_q0;
output  [16:0] output_conv_address0;
output   output_conv_ce0;
output   output_conv_we0;
output  [31:0] output_conv_d0;
input  [31:0] output_conv_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weights_ce0;
reg[16:0] output_conv_address0;
reg output_conv_ce0;
reg output_conv_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [16:0] next_mul_fu_234_p2;
reg   [16:0] next_mul_reg_470;
wire    ap_CS_fsm_state2;
wire   [8:0] indvarinc_fu_240_p2;
reg   [8:0] indvarinc_reg_475;
wire   [8:0] indvarinc1_fu_246_p2;
wire    ap_CS_fsm_state3;
wire   [8:0] i_3_fu_285_p2;
reg   [8:0] i_3_reg_494;
wire    ap_CS_fsm_state6;
wire   [17:0] tmp_9_fu_315_p2;
reg   [17:0] tmp_9_reg_499;
wire   [0:0] exitcond4_fu_279_p2;
wire   [8:0] j_3_fu_327_p2;
reg   [8:0] j_3_reg_507;
wire    ap_CS_fsm_state7;
wire   [1:0] r_1_fu_343_p2;
reg   [1:0] r_1_reg_515;
wire    ap_CS_fsm_state8;
wire   [17:0] tmp_12_fu_359_p2;
reg   [17:0] tmp_12_reg_520;
wire   [0:0] exitcond2_fu_337_p2;
wire   [4:0] tmp_15_fu_381_p2;
reg   [4:0] tmp_15_reg_525;
reg   [16:0] output_conv_addr_reg_530;
wire   [1:0] s_1_fu_411_p2;
reg   [1:0] s_1_reg_538;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond1_fu_405_p2;
wire   [31:0] sum_3_fu_457_p2;
wire    ap_CS_fsm_state10;
reg   [16:0] image_padded_0_address0;
reg    image_padded_0_ce0;
reg    image_padded_0_we0;
reg   [31:0] image_padded_0_d0;
wire   [31:0] image_padded_0_q0;
wire    grp_padding_r_test_fu_227_ap_start;
wire    grp_padding_r_test_fu_227_ap_done;
wire    grp_padding_r_test_fu_227_ap_idle;
wire    grp_padding_r_test_fu_227_ap_ready;
wire   [16:0] grp_padding_r_test_fu_227_im_address0;
wire    grp_padding_r_test_fu_227_im_ce0;
wire   [16:0] grp_padding_r_test_fu_227_image_padded_0_address0;
wire    grp_padding_r_test_fu_227_image_padded_0_ce0;
wire    grp_padding_r_test_fu_227_image_padded_0_we0;
wire   [31:0] grp_padding_r_test_fu_227_image_padded_0_d0;
reg   [8:0] invdar_reg_122;
wire   [0:0] tmp_5_fu_267_p2;
wire   [0:0] tmp_6_fu_273_p2;
reg   [16:0] phi_mul_reg_134;
reg   [8:0] invdar9_reg_146;
reg   [8:0] i_reg_157;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond3_fu_321_p2;
reg   [8:0] j_reg_169;
wire    ap_CS_fsm_state11;
reg   [31:0] sum_reg_181;
reg   [1:0] r_reg_193;
reg   [31:0] sum_1_reg_204;
reg   [1:0] s_reg_216;
reg    grp_padding_r_test_fu_227_ap_start_reg;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_16_cast_fu_262_p1;
wire   [63:0] tmp_20_cast_fu_396_p1;
wire  signed [63:0] tmp_24_cast_fu_432_p1;
wire  signed [63:0] tmp_25_cast_fu_446_p1;
wire   [16:0] tmp_cast_fu_252_p1;
wire   [16:0] tmp_s_fu_256_p2;
wire   [16:0] tmp_7_fu_291_p3;
wire   [14:0] tmp_8_fu_303_p3;
wire   [17:0] p_shl1_cast_fu_311_p1;
wire   [17:0] p_shl_cast_fu_299_p1;
wire   [8:0] r_cast4_fu_333_p1;
wire   [8:0] tmp_4_fu_349_p2;
wire   [8:0] tmp_12_fu_359_p0;
wire   [3:0] tmp_14_fu_369_p3;
wire   [4:0] p_shl2_cast_fu_377_p1;
wire   [4:0] tmp_8_cast_fu_365_p1;
wire   [17:0] tmp_9_cast_fu_387_p1;
wire   [17:0] tmp_11_fu_391_p2;
wire   [8:0] s_cast2_fu_401_p1;
wire   [8:0] tmp_10_fu_417_p2;
wire   [17:0] tmp_11_cast_fu_423_p1;
wire   [17:0] tmp_16_fu_427_p2;
wire   [4:0] tmp_12_cast_fu_437_p1;
wire   [4:0] tmp_17_fu_441_p2;
wire  signed [31:0] tmp_13_fu_451_p0;
wire  signed [31:0] tmp_13_fu_451_p1;
wire   [31:0] tmp_13_fu_451_p2;
reg   [10:0] ap_NS_fsm;
wire   [17:0] tmp_12_fu_359_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_padding_r_test_fu_227_ap_start_reg = 1'b0;
end

conv_test_image_pbkb #(
    .DataWidth( 32 ),
    .AddressRange( 103684 ),
    .AddressWidth( 17 ))
image_padded_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(image_padded_0_address0),
    .ce0(image_padded_0_ce0),
    .we0(image_padded_0_we0),
    .d0(image_padded_0_d0),
    .q0(image_padded_0_q0)
);

padding_r_test grp_padding_r_test_fu_227(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_padding_r_test_fu_227_ap_start),
    .ap_done(grp_padding_r_test_fu_227_ap_done),
    .ap_idle(grp_padding_r_test_fu_227_ap_idle),
    .ap_ready(grp_padding_r_test_fu_227_ap_ready),
    .im_address0(grp_padding_r_test_fu_227_im_address0),
    .im_ce0(grp_padding_r_test_fu_227_im_ce0),
    .im_q0(image_r_q0),
    .image_padded_0_address0(grp_padding_r_test_fu_227_image_padded_0_address0),
    .image_padded_0_ce0(grp_padding_r_test_fu_227_image_padded_0_ce0),
    .image_padded_0_we0(grp_padding_r_test_fu_227_image_padded_0_we0),
    .image_padded_0_d0(grp_padding_r_test_fu_227_image_padded_0_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_padding_r_test_fu_227_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_padding_r_test_fu_227_ap_start_reg <= 1'b1;
        end else if ((grp_padding_r_test_fu_227_ap_ready == 1'b1)) begin
            grp_padding_r_test_fu_227_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond3_fu_321_p2 == 1'd1))) begin
        i_reg_157 <= i_3_reg_494;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_padding_r_test_fu_227_ap_done == 1'b1))) begin
        i_reg_157 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        invdar9_reg_146 <= indvarinc1_fu_246_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        invdar9_reg_146 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_273_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (tmp_5_fu_267_p2 == 1'd1))) begin
        invdar_reg_122 <= indvarinc_reg_475;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        invdar_reg_122 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        j_reg_169 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_169 <= j_3_reg_507;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_273_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (tmp_5_fu_267_p2 == 1'd1))) begin
        phi_mul_reg_134 <= next_mul_reg_470;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_134 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_321_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        r_reg_193 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond1_fu_405_p2 == 1'd1))) begin
        r_reg_193 <= r_1_reg_515;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        s_reg_216 <= s_1_reg_538;
    end else if (((exitcond2_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        s_reg_216 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sum_1_reg_204 <= sum_3_fu_457_p2;
    end else if (((exitcond2_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        sum_1_reg_204 <= sum_reg_181;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_321_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        sum_reg_181 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond1_fu_405_p2 == 1'd1))) begin
        sum_reg_181 <= sum_1_reg_204;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_3_reg_494 <= i_3_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvarinc_reg_475 <= indvarinc_fu_240_p2;
        next_mul_reg_470 <= next_mul_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_3_reg_507 <= j_3_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        output_conv_addr_reg_530 <= tmp_20_cast_fu_396_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        r_1_reg_515 <= r_1_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        s_1_reg_538 <= s_1_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_12_reg_520[17 : 1] <= tmp_12_fu_359_p2[17 : 1];
        tmp_15_reg_525 <= tmp_15_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_9_reg_499[17 : 6] <= tmp_9_fu_315_p2[17 : 6];
    end
end

always @ (*) begin
    if (((exitcond4_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        image_padded_0_address0 = tmp_24_cast_fu_432_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        image_padded_0_address0 = tmp_16_cast_fu_262_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        image_padded_0_address0 = grp_padding_r_test_fu_227_image_padded_0_address0;
    end else begin
        image_padded_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9))) begin
        image_padded_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        image_padded_0_ce0 = grp_padding_r_test_fu_227_image_padded_0_ce0;
    end else begin
        image_padded_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        image_padded_0_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        image_padded_0_d0 = grp_padding_r_test_fu_227_image_padded_0_d0;
    end else begin
        image_padded_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        image_padded_0_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        image_padded_0_we0 = grp_padding_r_test_fu_227_image_padded_0_we0;
    end else begin
        image_padded_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_conv_address0 = output_conv_addr_reg_530;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_conv_address0 = tmp_20_cast_fu_396_p1;
    end else begin
        output_conv_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11))) begin
        output_conv_ce0 = 1'b1;
    end else begin
        output_conv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_conv_we0 = 1'b1;
    end else begin
        output_conv_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        weights_ce0 = 1'b1;
    end else begin
        weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_6_fu_273_p2 == 1'd1) & (tmp_5_fu_267_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((tmp_6_fu_273_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (tmp_5_fu_267_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_padding_r_test_fu_227_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond4_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond3_fu_321_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond2_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond1_fu_405_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_405_p2 = ((s_reg_216 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_337_p2 = ((r_reg_193 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond3_fu_321_p2 = ((j_reg_169 == 9'd320) ? 1'b1 : 1'b0);

assign exitcond4_fu_279_p2 = ((i_reg_157 == 9'd320) ? 1'b1 : 1'b0);

assign grp_padding_r_test_fu_227_ap_start = grp_padding_r_test_fu_227_ap_start_reg;

assign i_3_fu_285_p2 = (i_reg_157 + 9'd1);

assign image_r_address0 = grp_padding_r_test_fu_227_im_address0;

assign image_r_ce0 = grp_padding_r_test_fu_227_im_ce0;

assign indvarinc1_fu_246_p2 = (invdar9_reg_146 + 9'd1);

assign indvarinc_fu_240_p2 = (invdar_reg_122 + 9'd1);

assign j_3_fu_327_p2 = (j_reg_169 + 9'd1);

assign next_mul_fu_234_p2 = (phi_mul_reg_134 + 17'd322);

assign output_conv_d0 = (sum_reg_181 + output_conv_q0);

assign p_shl1_cast_fu_311_p1 = tmp_8_fu_303_p3;

assign p_shl2_cast_fu_377_p1 = tmp_14_fu_369_p3;

assign p_shl_cast_fu_299_p1 = tmp_7_fu_291_p3;

assign r_1_fu_343_p2 = (r_reg_193 + 2'd1);

assign r_cast4_fu_333_p1 = r_reg_193;

assign s_1_fu_411_p2 = (s_reg_216 + 2'd1);

assign s_cast2_fu_401_p1 = s_reg_216;

assign sum_3_fu_457_p2 = (sum_1_reg_204 + tmp_13_fu_451_p2);

assign tmp_10_fu_417_p2 = (s_cast2_fu_401_p1 + j_reg_169);

assign tmp_11_cast_fu_423_p1 = tmp_10_fu_417_p2;

assign tmp_11_fu_391_p2 = (tmp_9_reg_499 + tmp_9_cast_fu_387_p1);

assign tmp_12_cast_fu_437_p1 = s_reg_216;

assign tmp_12_fu_359_p0 = tmp_12_fu_359_p00;

assign tmp_12_fu_359_p00 = tmp_4_fu_349_p2;

assign tmp_12_fu_359_p2 = (tmp_12_fu_359_p0 * $signed('h142));

assign tmp_13_fu_451_p0 = weights_q0;

assign tmp_13_fu_451_p1 = image_padded_0_q0;

assign tmp_13_fu_451_p2 = ($signed(tmp_13_fu_451_p0) * $signed(tmp_13_fu_451_p1));

assign tmp_14_fu_369_p3 = {{r_reg_193}, {2'd0}};

assign tmp_15_fu_381_p2 = (p_shl2_cast_fu_377_p1 - tmp_8_cast_fu_365_p1);

assign tmp_16_cast_fu_262_p1 = tmp_s_fu_256_p2;

assign tmp_16_fu_427_p2 = (tmp_12_reg_520 + tmp_11_cast_fu_423_p1);

assign tmp_17_fu_441_p2 = (tmp_15_reg_525 + tmp_12_cast_fu_437_p1);

assign tmp_20_cast_fu_396_p1 = tmp_11_fu_391_p2;

assign tmp_24_cast_fu_432_p1 = $signed(tmp_16_fu_427_p2);

assign tmp_25_cast_fu_446_p1 = $signed(tmp_17_fu_441_p2);

assign tmp_4_fu_349_p2 = (r_cast4_fu_333_p1 + i_reg_157);

assign tmp_5_fu_267_p2 = ((invdar9_reg_146 == 9'd321) ? 1'b1 : 1'b0);

assign tmp_6_fu_273_p2 = ((invdar_reg_122 == 9'd321) ? 1'b1 : 1'b0);

assign tmp_7_fu_291_p3 = {{i_reg_157}, {8'd0}};

assign tmp_8_cast_fu_365_p1 = r_reg_193;

assign tmp_8_fu_303_p3 = {{i_reg_157}, {6'd0}};

assign tmp_9_cast_fu_387_p1 = j_reg_169;

assign tmp_9_fu_315_p2 = (p_shl1_cast_fu_311_p1 + p_shl_cast_fu_299_p1);

assign tmp_cast_fu_252_p1 = invdar9_reg_146;

assign tmp_s_fu_256_p2 = (phi_mul_reg_134 + tmp_cast_fu_252_p1);

assign weights_address0 = tmp_25_cast_fu_446_p1;

always @ (posedge ap_clk) begin
    tmp_9_reg_499[5:0] <= 6'b000000;
    tmp_12_reg_520[0] <= 1'b0;
end

endmodule //conv_test
