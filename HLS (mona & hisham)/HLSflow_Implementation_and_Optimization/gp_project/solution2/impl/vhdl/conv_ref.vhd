-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_ref is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    image_V_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    image_V_ce0 : OUT STD_LOGIC;
    image_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weights_V_ce0 : OUT STD_LOGIC;
    weights_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weights_V_ce1 : OUT STD_LOGIC;
    weights_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_conv_V_address0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    output_conv_V_ce0 : OUT STD_LOGIC;
    output_conv_V_we0 : OUT STD_LOGIC;
    output_conv_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_conv_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of conv_ref is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_ref,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.168063,HLS_SYN_LAT=239631400,HLS_SYN_TPT=none,HLS_SYN_MEM=604,HLS_SYN_DSP=11,HLS_SYN_FF=618,HLS_SYN_LUT=2096,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv19_282 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001010000010";
    constant ap_const_lv10_282 : STD_LOGIC_VECTOR (9 downto 0) := "1010000010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv25_1C20000 : STD_LOGIC_VECTOR (24 downto 0) := "1110000100000000000000000";
    constant ap_const_lv25_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv21_12C000 : STD_LOGIC_VECTOR (20 downto 0) := "100101100000000000000";
    constant ap_const_lv12_780 : STD_LOGIC_VECTOR (11 downto 0) := "011110000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_D8 : STD_LOGIC_VECTOR (9 downto 0) := "0011011000";
    constant ap_const_lv10_18 : STD_LOGIC_VECTOR (9 downto 0) := "0000011000";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv10_30 : STD_LOGIC_VECTOR (9 downto 0) := "0000110000";
    constant ap_const_lv10_48 : STD_LOGIC_VECTOR (9 downto 0) := "0001001000";
    constant ap_const_lv22_2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_const_lv10_60 : STD_LOGIC_VECTOR (9 downto 0) := "0001100000";
    constant ap_const_lv10_78 : STD_LOGIC_VECTOR (9 downto 0) := "0001111000";
    constant ap_const_lv10_90 : STD_LOGIC_VECTOR (9 downto 0) := "0010010000";
    constant ap_const_lv10_A8 : STD_LOGIC_VECTOR (9 downto 0) := "0010101000";
    constant ap_const_lv10_C0 : STD_LOGIC_VECTOR (9 downto 0) := "0011000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv20_282 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001010000010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal reg_536 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_1_fu_546_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_1_reg_1743 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_cast_fu_552_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_cast_reg_1748 : STD_LOGIC_VECTOR (21 downto 0);
    signal exitcond1_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_556_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal next_mul_reg_1753 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_2_fu_568_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_2_reg_1761 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_fu_580_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond2_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_2_fu_634_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_2_reg_1778 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_cast_fu_640_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_1_cast_reg_1783 : STD_LOGIC_VECTOR (21 downto 0);
    signal i_1_fu_650_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_1792 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_55_fu_1647_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_55_reg_1797 : STD_LOGIC_VECTOR (18 downto 0);
    signal exitcond5_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_684_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_58_reg_1802 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_2_fu_696_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_2_reg_1810 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_66_fu_733_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_66_reg_1815 : STD_LOGIC_VECTOR (21 downto 0);
    signal exitcond8_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_779_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_3_reg_1825 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_14_2_fu_785_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_2_reg_1830 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_flatten2_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_1835 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next2_fu_797_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal indvar_flatten_next2_reg_1839 : STD_LOGIC_VECTOR (24 downto 0);
    signal exitcond_flatten_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1844 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid2_v_fu_823_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_mid2_v_reg_1849 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_mid2_cast1_fu_831_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_mid2_cast1_reg_1854 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1865 : STD_LOGIC_VECTOR (0 downto 0);
    signal j9_mid_fu_881_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal j9_mid_reg_1872 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_mid2_fu_889_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_mid2_reg_1878 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_mid1_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_mid1_reg_1883 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_mid2_fu_971_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_mid2_reg_1889 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_conv_V_addr_reg_1895 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_14_fu_1653_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_14_reg_1900 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_28_fu_1048_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_28_reg_1907 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_46_fu_1082_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_reg_1928 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_1_fu_1090_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_1_reg_1933 : STD_LOGIC_VECTOR (1 downto 0);
    signal ifzero_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_1938 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_1166_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_16_reg_1942 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_20_fu_1188_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_20_fu_1188_p2 : signal is "no";
    signal tmp_20_reg_1957 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_24_fu_1193_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_24_fu_1193_p2 : signal is "no";
    signal tmp_24_reg_1963 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_21_fu_1248_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_21_reg_1984 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_48_reg_2005 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_fu_1393_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_reg_2030 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_50_reg_2035 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_reg_2040 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_1457_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_25_reg_2045 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_52_reg_2065 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_54_reg_2075 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_V_2_2_fu_1606_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_V_2_2_reg_2080 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal indvar_flatten_next_fu_1627_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal indvar_flatten_next1_fu_1640_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal image_padded_V_address0 : STD_LOGIC_VECTOR (20 downto 0);
    signal image_padded_V_ce0 : STD_LOGIC;
    signal image_padded_V_we0 : STD_LOGIC;
    signal image_padded_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_padded_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_padded_V_address1 : STD_LOGIC_VECTOR (20 downto 0);
    signal image_padded_V_ce1 : STD_LOGIC;
    signal image_padded_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_364 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond3_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_375 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond6_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_386 : STD_LOGIC_VECTOR (18 downto 0);
    signal j_reg_398 : STD_LOGIC_VECTOR (9 downto 0);
    signal m5_reg_409 : STD_LOGIC_VECTOR (1 downto 0);
    signal i6_reg_420 : STD_LOGIC_VECTOR (9 downto 0);
    signal j7_reg_431 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal indvar_flatten1_reg_442 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_reg_453 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten2_reg_464 : STD_LOGIC_VECTOR (20 downto 0);
    signal i8_reg_476 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_reg_487 : STD_LOGIC_VECTOR (11 downto 0);
    signal j9_reg_499 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_1_reg_510 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_reg_521 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_81_cast_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_90_cast_fu_770_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_86_cast_fu_775_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_cast_fu_1025_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_cast_fu_1060_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_cast_fu_1077_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_cast_fu_1172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_cast_fu_1183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_cast_fu_1208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_cast_fu_1223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_cast_fu_1233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_cast_fu_1254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_cast_fu_1269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_cast_fu_1284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_cast_fu_1343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_cast_fu_1353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_cast_fu_1368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_cast_fu_1383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_cast_fu_1463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_cast_fu_1474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_cast_fu_1479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_cast_fu_1537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_cast_7_fu_586_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_59_fu_590_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_60_fu_600_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl_cast_fu_608_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_78_cast_fu_596_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_61_fu_612_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_62_fu_618_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_56_fu_660_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_57_fu_672_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl3_cast_fu_680_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl2_cast_fu_668_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_5_cast_fu_702_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_63_fu_706_p2 : STD_LOGIC_VECTOR (18 downto 0);
    attribute use_dsp48 of tmp_63_fu_706_p2 : signal is "no";
    signal tmp_64_fu_715_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl5_cast_fu_723_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_83_cast_fu_711_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_65_fu_727_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_6_cast_fu_738_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_67_fu_742_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl4_cast_fu_751_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_87_cast_fu_747_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_68_fu_759_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_69_fu_765_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_1_fu_803_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i8_mid_fu_815_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_flatten_mid_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_869_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_897_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_1_fu_909_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl1_fu_905_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl_fu_917_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_flatten_not_fu_927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_mid_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_1_fu_933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_dup_fu_945_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_mid2_cast_fu_979_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_921_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_983_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_989_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_8_fu_1001_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_shl9_cast_fu_993_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_shl10_cast_fu_1005_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_4_mid2_cast_fu_835_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_10_fu_1013_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_12_fu_1019_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_mid2_fu_963_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_cast2_fu_1030_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_1034_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_28_fu_1048_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_29_fu_1054_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_30_fu_1065_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_fu_1071_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_3_mid1_fu_1117_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_1_mid_fu_1102_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_1_mid2_fu_1122_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_2_mid1_fu_1133_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_2_mid_fu_1108_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_2_mid2_fu_1138_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_mid2_cast1_fu_1114_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_15_fu_1149_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of tmp_15_fu_1149_p2 : signal is "no";
    signal p_shl8_cast_fu_1158_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_31_cast_fu_1154_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_18_fu_1177_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_15_1_mid2_cast_fu_1129_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_15_2_mid2_cast_fu_1145_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_32_fu_1198_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_33_fu_1203_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_34_fu_1213_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_35_fu_1218_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_19_fu_1228_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_shl7_cast_fu_1241_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_36_cast_fu_1238_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_36_fu_1259_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_37_fu_1264_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_38_fu_1274_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_39_fu_1279_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1659_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_47_fu_1312_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1668_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_fu_1338_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_23_fu_1348_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_40_fu_1358_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_41_fu_1363_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_42_fu_1373_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_43_fu_1378_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_44_fu_1388_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1677_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_49_fu_1421_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1686_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl6_cast_fu_1450_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_41_cast_fu_1447_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_26_fu_1468_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1695_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_51_fu_1506_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1704_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_1532_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1713_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_53_fu_1565_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1722_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1731_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_op_fu_1621_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten22_op_fu_1634_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_55_fu_1647_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_55_fu_1647_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_fu_1653_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_fu_1653_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1659_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1668_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1677_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1686_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1695_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1704_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1713_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1722_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1731_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_fu_1653_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_28_fu_1048_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_55_fu_1647_p00 : STD_LOGIC_VECTOR (18 downto 0);

    component conv_ref_mul_mul_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component conv_ref_mul_mul_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component conv_ref_mac_mulaeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv_ref_image_pabkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    image_padded_V_U : component conv_ref_image_pabkb
    generic map (
        DataWidth => 8,
        AddressRange => 1236492,
        AddressWidth => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => image_padded_V_address0,
        ce0 => image_padded_V_ce0,
        we0 => image_padded_V_we0,
        d0 => image_padded_V_d0,
        q0 => image_padded_V_q0,
        address1 => image_padded_V_address1,
        ce1 => image_padded_V_ce1,
        q1 => image_padded_V_q1);

    conv_ref_mul_mul_cud_U1 : component conv_ref_mul_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 19)
    port map (
        din0 => tmp_55_fu_1647_p0,
        din1 => tmp_55_fu_1647_p1,
        dout => tmp_55_fu_1647_p2);

    conv_ref_mul_mul_dEe_U2 : component conv_ref_mul_mul_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 10,
        dout_WIDTH => 20)
    port map (
        din0 => tmp_14_fu_1653_p0,
        din1 => tmp_14_fu_1653_p1,
        dout => tmp_14_fu_1653_p2);

    conv_ref_mac_mulaeOg_U3 : component conv_ref_mac_mulaeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => image_padded_V_q0,
        din1 => reg_532,
        din2 => grp_fu_1659_p2,
        dout => grp_fu_1659_p3);

    conv_ref_mac_mulaeOg_U4 : component conv_ref_mac_mulaeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => image_padded_V_q1,
        din1 => reg_536,
        din2 => grp_fu_1668_p2,
        dout => grp_fu_1668_p3);

    conv_ref_mac_mulaeOg_U5 : component conv_ref_mac_mulaeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => image_padded_V_q1,
        din1 => reg_532,
        din2 => grp_fu_1677_p2,
        dout => grp_fu_1677_p3);

    conv_ref_mac_mulaeOg_U6 : component conv_ref_mac_mulaeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => image_padded_V_q0,
        din1 => reg_536,
        din2 => grp_fu_1686_p2,
        dout => grp_fu_1686_p3);

    conv_ref_mac_mulaeOg_U7 : component conv_ref_mac_mulaeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => image_padded_V_q1,
        din1 => reg_532,
        din2 => grp_fu_1695_p2,
        dout => grp_fu_1695_p3);

    conv_ref_mac_mulaeOg_U8 : component conv_ref_mac_mulaeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => image_padded_V_q0,
        din1 => reg_536,
        din2 => grp_fu_1704_p2,
        dout => grp_fu_1704_p3);

    conv_ref_mac_mulaeOg_U9 : component conv_ref_mac_mulaeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => image_padded_V_q1,
        din1 => reg_532,
        din2 => grp_fu_1713_p2,
        dout => grp_fu_1713_p3);

    conv_ref_mac_mulaeOg_U10 : component conv_ref_mac_mulaeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => image_padded_V_q0,
        din1 => reg_536,
        din2 => grp_fu_1722_p2,
        dout => grp_fu_1722_p3);

    conv_ref_mac_mulaeOg_U11 : component conv_ref_mac_mulaeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => image_padded_V_q1,
        din1 => reg_532,
        din2 => grp_fu_1731_p2,
        dout => grp_fu_1731_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i6_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond8_fu_690_p2 = ap_const_lv1_1))) then 
                i6_reg_420 <= i_1_reg_1792;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_628_p2 = ap_const_lv1_0))) then 
                i6_reg_420 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i8_reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_628_p2 = ap_const_lv1_1))) then 
                i8_reg_476 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_flatten2_reg_1835 = ap_const_lv1_0))) then 
                i8_reg_476 <= tmp_2_mid2_reg_1878;
            end if; 
        end if;
    end process;

    i_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_reg_375 <= i_2_reg_1761;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_540_p2 = ap_const_lv1_0))) then 
                i_reg_375 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_628_p2 = ap_const_lv1_1))) then 
                indvar_flatten1_reg_442 <= ap_const_lv25_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_flatten2_reg_1835 = ap_const_lv1_0))) then 
                indvar_flatten1_reg_442 <= indvar_flatten_next2_reg_1839;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_628_p2 = ap_const_lv1_1))) then 
                indvar_flatten2_reg_464 <= ap_const_lv21_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_flatten2_reg_1835 = ap_const_lv1_0))) then 
                indvar_flatten2_reg_464 <= indvar_flatten_next1_fu_1640_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_487_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_628_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_487 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_flatten2_reg_1835 = ap_const_lv1_0))) then 
                indvar_flatten_reg_487 <= indvar_flatten_next_fu_1627_p3;
            end if; 
        end if;
    end process;

    j7_reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond5_fu_644_p2 = ap_const_lv1_0))) then 
                j7_reg_431 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j7_reg_431 <= j_2_reg_1810;
            end if; 
        end if;
    end process;

    j9_reg_499_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_628_p2 = ap_const_lv1_1))) then 
                j9_reg_499 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_flatten2_reg_1835 = ap_const_lv1_0))) then 
                j9_reg_499 <= tmp_15_mid2_reg_1889;
            end if; 
        end if;
    end process;

    j_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_562_p2 = ap_const_lv1_0))) then 
                j_reg_398 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_574_p2 = ap_const_lv1_0))) then 
                j_reg_398 <= j_1_fu_580_p2;
            end if; 
        end if;
    end process;

    m5_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_540_p2 = ap_const_lv1_1))) then 
                m5_reg_409 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond5_fu_644_p2 = ap_const_lv1_1))) then 
                m5_reg_409 <= m_2_reg_1778;
            end if; 
        end if;
    end process;

    m_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                m_reg_364 <= ap_const_lv2_0;
            elsif (((exitcond3_fu_562_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                m_reg_364 <= m_1_reg_1743;
            end if; 
        end if;
    end process;

    p_Val2_1_reg_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_628_p2 = ap_const_lv1_1))) then 
                p_Val2_1_reg_510 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_flatten2_reg_1835 = ap_const_lv1_0))) then 
                p_Val2_1_reg_510 <= sum_V_2_2_reg_2080;
            end if; 
        end if;
    end process;

    p_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_628_p2 = ap_const_lv1_1))) then 
                p_reg_453 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_flatten2_reg_1835 = ap_const_lv1_0))) then 
                p_reg_453 <= tmp_4_mid2_v_reg_1849;
            end if; 
        end if;
    end process;

    phi_mul_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_386 <= next_mul_reg_1753;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_540_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_386 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    r_reg_521_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_628_p2 = ap_const_lv1_1))) then 
                r_reg_521 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_flatten2_reg_1835 = ap_const_lv1_0))) then 
                r_reg_521 <= r_1_reg_1933;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                exitcond_flatten2_reg_1835 <= exitcond_flatten2_fu_791_p2;
                indvar_flatten_next2_reg_1839 <= indvar_flatten_next2_fu_797_p2;
                j_3_reg_1825 <= j_3_fu_779_p2;
                tmp_14_2_reg_1830 <= tmp_14_2_fu_785_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_flatten2_fu_791_p2 = ap_const_lv1_0))) then
                exitcond_flatten_reg_1844 <= exitcond_flatten_fu_809_p2;
                exitcond_mid1_reg_1883 <= exitcond_mid1_fu_939_p2;
                ifzero_reg_1938 <= ifzero_fu_1096_p2;
                j9_mid_reg_1872 <= j9_mid_fu_881_p3;
                output_conv_V_addr_reg_1895 <= tmp_29_cast_fu_1025_p1(24 - 1 downto 0);
                r_1_reg_1933 <= r_1_fu_1090_p2;
                tmp_14_reg_1900 <= tmp_14_fu_1653_p2;
                tmp_15_mid2_reg_1889 <= tmp_15_mid2_fu_971_p3;
                tmp_28_reg_1907 <= tmp_28_fu_1048_p2;
                tmp_2_mid2_reg_1878 <= tmp_2_mid2_fu_889_p3;
                tmp_46_reg_1928 <= tmp_46_fu_1082_p3;
                    tmp_4_mid2_cast1_reg_1854(4 downto 0) <= tmp_4_mid2_cast1_fu_831_p1(4 downto 0);
                tmp_4_mid2_v_reg_1849 <= tmp_4_mid2_v_fu_823_p3;
                tmp_s_reg_1865 <= tmp_s_fu_875_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_1_reg_1792 <= i_1_fu_650_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_2_reg_1761 <= i_2_fu_568_p2;
                next_mul_reg_1753 <= next_mul_fu_556_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_2_reg_1810 <= j_2_fu_696_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                m_1_reg_1743 <= m_1_fu_546_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_2_reg_1778 <= m_2_fu_634_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ifzero_reg_1938 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                p_Val2_s_reg_2040 <= output_conv_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_532 <= weights_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_536 <= weights_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                sum_V_2_2_reg_2080 <= grp_fu_1731_p3(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_16_reg_1942 <= tmp_16_fu_1166_p2;
                tmp_20_reg_1957 <= tmp_20_fu_1188_p2;
                tmp_24_reg_1963 <= tmp_24_fu_1193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_628_p2 = ap_const_lv1_0))) then
                    tmp_1_cast_reg_1783(1 downto 0) <= tmp_1_cast_fu_640_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_21_reg_1984 <= tmp_21_fu_1248_p2;
                tmp_48_reg_2005 <= grp_fu_1668_p3(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_25_reg_2045 <= tmp_25_fu_1457_p2;
                tmp_52_reg_2065 <= grp_fu_1704_p3(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_45_reg_2030 <= tmp_45_fu_1393_p2;
                tmp_50_reg_2035 <= grp_fu_1686_p3(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_54_reg_2075 <= grp_fu_1722_p3(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond5_fu_644_p2 = ap_const_lv1_0))) then
                tmp_55_reg_1797 <= tmp_55_fu_1647_p2;
                    tmp_58_reg_1802(19 downto 7) <= tmp_58_fu_684_p2(19 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond8_fu_690_p2 = ap_const_lv1_0))) then
                tmp_66_reg_1815 <= tmp_66_fu_733_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_540_p2 = ap_const_lv1_0))) then
                    tmp_cast_reg_1748(1 downto 0) <= tmp_cast_fu_552_p1(1 downto 0);
            end if;
        end if;
    end process;
    tmp_cast_reg_1748(21 downto 2) <= "00000000000000000000";
    tmp_1_cast_reg_1783(21 downto 2) <= "00000000000000000000";
    tmp_58_reg_1802(6 downto 0) <= "0000000";
    tmp_4_mid2_cast1_reg_1854(9 downto 5) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_540_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond2_fu_628_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, exitcond5_fu_644_p2, ap_CS_fsm_state7, exitcond8_fu_690_p2, ap_CS_fsm_state9, exitcond_flatten2_fu_791_p2, exitcond3_fu_562_p2, exitcond6_fu_574_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_540_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_562_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond6_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_628_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond5_fu_644_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond8_fu_690_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_flatten2_fu_791_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_540_p2 <= "1" when (m_reg_364 = ap_const_lv2_3) else "0";
    exitcond2_fu_628_p2 <= "1" when (m5_reg_409 = ap_const_lv2_3) else "0";
    exitcond3_fu_562_p2 <= "1" when (i_reg_375 = ap_const_lv10_282) else "0";
    exitcond5_fu_644_p2 <= "1" when (i6_reg_420 = ap_const_lv10_280) else "0";
    exitcond6_fu_574_p2 <= "1" when (j_reg_398 = ap_const_lv10_282) else "0";
    exitcond8_fu_690_p2 <= "1" when (j7_reg_431 = ap_const_lv10_280) else "0";
    exitcond_flatten1_fu_857_p2 <= "1" when (indvar_flatten_reg_487 = ap_const_lv12_780) else "0";
    exitcond_flatten2_fu_791_p2 <= "1" when (indvar_flatten1_reg_442 = ap_const_lv25_1C20000) else "0";
    exitcond_flatten_fu_809_p2 <= "1" when (indvar_flatten2_reg_464 = ap_const_lv21_12C000) else "0";
    exitcond_flatten_mid_fu_863_p2 <= (not_exitcond_flatten_fu_839_p2 and exitcond_flatten1_fu_857_p2);
    exitcond_flatten_not_fu_927_p2 <= (exitcond_flatten1_fu_857_p2 xor ap_const_lv1_1);
    exitcond_fu_845_p2 <= "1" when (r_reg_521 = ap_const_lv2_3) else "0";
    exitcond_mid1_fu_939_p2 <= (not_exitcond_flatten_1_fu_933_p2 and exitcond_mid_fu_851_p2);
    exitcond_mid_fu_851_p2 <= (not_exitcond_flatten_fu_839_p2 and exitcond_fu_845_p2);
    grp_fu_1659_p2 <= (tmp_46_reg_1928 & ap_const_lv8_0);
    grp_fu_1668_p2 <= (tmp_47_fu_1312_p4 & ap_const_lv8_0);
    grp_fu_1677_p2 <= (tmp_48_reg_2005 & ap_const_lv8_0);
    grp_fu_1686_p2 <= (tmp_49_fu_1421_p4 & ap_const_lv8_0);
    grp_fu_1695_p2 <= (tmp_50_reg_2035 & ap_const_lv8_0);
    grp_fu_1704_p2 <= (tmp_51_fu_1506_p4 & ap_const_lv8_0);
    grp_fu_1713_p2 <= (tmp_52_reg_2065 & ap_const_lv8_0);
    grp_fu_1722_p2 <= (tmp_53_fu_1565_p4 & ap_const_lv8_0);
    grp_fu_1731_p2 <= (tmp_54_reg_2075 & ap_const_lv8_0);
    i8_mid_fu_815_p3 <= 
        ap_const_lv10_0 when (exitcond_flatten_fu_809_p2(0) = '1') else 
        i8_reg_476;
    i_1_fu_650_p2 <= std_logic_vector(unsigned(i6_reg_420) + unsigned(ap_const_lv10_1));
    i_2_fu_568_p2 <= std_logic_vector(unsigned(i_reg_375) + unsigned(ap_const_lv10_1));
    i_3_fu_869_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(i8_mid_fu_815_p3));
    ifzero_fu_1096_p2 <= "1" when (r_1_fu_1090_p2 = ap_const_lv2_3) else "0";
    image_V_address0 <= tmp_90_cast_fu_770_p1(21 - 1 downto 0);

    image_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            image_V_ce0 <= ap_const_logic_1;
        else 
            image_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_padded_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state4, ap_CS_fsm_state8, tmp_81_cast_fu_623_p1, tmp_86_cast_fu_775_p1, tmp_33_cast_fu_1172_p1, tmp_38_cast_fu_1254_p1, tmp_40_cast_fu_1353_p1, tmp_44_cast_fu_1474_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            image_padded_V_address0 <= tmp_44_cast_fu_1474_p1(21 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            image_padded_V_address0 <= tmp_40_cast_fu_1353_p1(21 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            image_padded_V_address0 <= tmp_38_cast_fu_1254_p1(21 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            image_padded_V_address0 <= tmp_33_cast_fu_1172_p1(21 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            image_padded_V_address0 <= tmp_86_cast_fu_775_p1(21 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            image_padded_V_address0 <= tmp_81_cast_fu_623_p1(21 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            image_padded_V_address0 <= ap_const_lv64_0(21 - 1 downto 0);
        else 
            image_padded_V_address0 <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image_padded_V_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, tmp_34_cast_fu_1183_p1, tmp_35_cast_fu_1233_p1, tmp_39_cast_fu_1343_p1, tmp_43_cast_fu_1463_p1, tmp_45_cast_fu_1537_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            image_padded_V_address1 <= tmp_45_cast_fu_1537_p1(21 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            image_padded_V_address1 <= tmp_43_cast_fu_1463_p1(21 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            image_padded_V_address1 <= tmp_39_cast_fu_1343_p1(21 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            image_padded_V_address1 <= tmp_35_cast_fu_1233_p1(21 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            image_padded_V_address1 <= tmp_34_cast_fu_1183_p1(21 - 1 downto 0);
        else 
            image_padded_V_address1 <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    image_padded_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            image_padded_V_ce0 <= ap_const_logic_1;
        else 
            image_padded_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_padded_V_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            image_padded_V_ce1 <= ap_const_logic_1;
        else 
            image_padded_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    image_padded_V_d0_assign_proc : process(ap_CS_fsm_state1, image_V_q0, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            image_padded_V_d0 <= image_V_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            image_padded_V_d0 <= ap_const_lv8_0;
        else 
            image_padded_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    image_padded_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, exitcond6_fu_574_p2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_574_p2 = ap_const_lv1_0)))) then 
            image_padded_V_we0 <= ap_const_logic_1;
        else 
            image_padded_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten22_op_fu_1634_p2 <= std_logic_vector(unsigned(indvar_flatten2_reg_464) + unsigned(ap_const_lv21_1));
    indvar_flatten_next1_fu_1640_p3 <= 
        ap_const_lv21_1 when (exitcond_flatten_reg_1844(0) = '1') else 
        indvar_flatten22_op_fu_1634_p2;
    indvar_flatten_next2_fu_797_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_442) + unsigned(ap_const_lv25_1));
    indvar_flatten_next_fu_1627_p3 <= 
        ap_const_lv12_1 when (tmp_s_reg_1865(0) = '1') else 
        indvar_flatten_op_fu_1621_p2;
    indvar_flatten_op_fu_1621_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_487) + unsigned(ap_const_lv12_1));
    j9_mid_fu_881_p3 <= 
        ap_const_lv10_0 when (tmp_s_fu_875_p2(0) = '1') else 
        j9_reg_499;
    j_1_fu_580_p2 <= std_logic_vector(unsigned(j_reg_398) + unsigned(ap_const_lv10_1));
    j_2_fu_696_p2 <= std_logic_vector(unsigned(j7_reg_431) + unsigned(ap_const_lv10_1));
    j_3_dup_fu_945_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(j9_mid_fu_881_p3));
    j_3_fu_779_p2 <= std_logic_vector(unsigned(j9_reg_499) + unsigned(ap_const_lv10_1));
    j_3_mid1_fu_1117_p2 <= std_logic_vector(unsigned(ap_const_lv10_2) + unsigned(j9_mid_reg_1872));
    m_1_fu_546_p2 <= std_logic_vector(unsigned(m_reg_364) + unsigned(ap_const_lv2_1));
    m_2_fu_634_p2 <= std_logic_vector(unsigned(m5_reg_409) + unsigned(ap_const_lv2_1));
    next_mul_fu_556_p2 <= std_logic_vector(unsigned(phi_mul_reg_386) + unsigned(ap_const_lv19_282));
    not_exitcond_flatten_1_fu_933_p2 <= (exitcond_flatten_not_fu_927_p2 or exitcond_flatten_fu_809_p2);
    not_exitcond_flatten_fu_839_p2 <= (exitcond_flatten_fu_809_p2 xor ap_const_lv1_1);

    output_conv_V_address0_assign_proc : process(ap_CS_fsm_state9, output_conv_V_addr_reg_1895, ap_CS_fsm_state15, tmp_29_cast_fu_1025_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_conv_V_address0 <= output_conv_V_addr_reg_1895;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_conv_V_address0 <= tmp_29_cast_fu_1025_p1(24 - 1 downto 0);
        else 
            output_conv_V_address0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_conv_V_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_conv_V_ce0 <= ap_const_logic_1;
        else 
            output_conv_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_conv_V_d0 <= std_logic_vector(unsigned(p_Val2_s_reg_2040) + unsigned(sum_V_2_2_fu_1606_p4));

    output_conv_V_we0_assign_proc : process(ifzero_reg_1938, ap_CS_fsm_state15)
    begin
        if (((ifzero_reg_1938 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            output_conv_V_we0 <= ap_const_logic_1;
        else 
            output_conv_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_1_fu_803_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(p_reg_453));
    p_shl10_cast_fu_1005_p3 <= (tmp_8_fu_1001_p1 & ap_const_lv3_0);
    p_shl1_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_897_p3),64));
    p_shl2_cast_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_660_p3),20));
    p_shl3_cast_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_672_p3),20));
    p_shl4_cast_fu_751_p3 <= (tmp_67_fu_742_p2 & ap_const_lv2_0);
    p_shl5_cast_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_fu_715_p3),22));
    p_shl6_cast_fu_1450_p3 <= (tmp_24_reg_1963 & ap_const_lv2_0);
    p_shl7_cast_fu_1241_p3 <= (tmp_20_reg_1957 & ap_const_lv2_0);
    p_shl8_cast_fu_1158_p3 <= (tmp_15_fu_1149_p2 & ap_const_lv2_0);
    p_shl9_cast_fu_993_p3 <= (tmp_7_fu_989_p1 & ap_const_lv5_0);
    p_shl_cast_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_600_p3),22));
    p_shl_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_909_p3),64));
    r_1_fu_1090_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(r_mid2_fu_963_p3));
    r_cast2_fu_1030_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_mid2_fu_963_p3),10));
    r_mid2_fu_963_p3 <= 
        ap_const_lv2_0 when (tmp_5_fu_957_p2(0) = '1') else 
        r_reg_521;
    sum_V_2_2_fu_1606_p4 <= grp_fu_1731_p3(15 downto 8);
    tmp_10_fu_1013_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_993_p3) - unsigned(p_shl10_cast_fu_1005_p3));
    tmp_11_fu_1034_p2 <= std_logic_vector(unsigned(tmp_2_mid2_fu_889_p3) + unsigned(r_cast2_fu_1030_p1));
    tmp_12_fu_1019_p2 <= std_logic_vector(unsigned(tmp_4_mid2_cast_fu_835_p1) + unsigned(tmp_10_fu_1013_p2));
    tmp_14_2_fu_785_p2 <= std_logic_vector(unsigned(j9_reg_499) + unsigned(ap_const_lv10_2));
    tmp_14_2_mid1_fu_1133_p2 <= std_logic_vector(unsigned(ap_const_lv10_3) + unsigned(j9_mid_reg_1872));
    tmp_14_fu_1653_p0 <= ap_const_lv20_282(11 - 1 downto 0);
    tmp_14_fu_1653_p1 <= tmp_14_fu_1653_p10(10 - 1 downto 0);
    tmp_14_fu_1653_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_1034_p2),20));
    tmp_15_1_mid2_cast_fu_1129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_1_mid2_fu_1122_p3),20));
    tmp_15_1_mid2_fu_1122_p3 <= 
        j_3_mid1_fu_1117_p2 when (exitcond_mid1_reg_1883(0) = '1') else 
        tmp_15_1_mid_fu_1102_p3;
    tmp_15_1_mid_fu_1102_p3 <= 
        ap_const_lv10_1 when (tmp_s_reg_1865(0) = '1') else 
        j_3_reg_1825;
    tmp_15_2_mid2_cast_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_2_mid2_fu_1138_p3),20));
    tmp_15_2_mid2_fu_1138_p3 <= 
        tmp_14_2_mid1_fu_1133_p2 when (exitcond_mid1_reg_1883(0) = '1') else 
        tmp_15_2_mid_fu_1108_p3;
    tmp_15_2_mid_fu_1108_p3 <= 
        ap_const_lv10_2 when (tmp_s_reg_1865(0) = '1') else 
        tmp_14_2_reg_1830;
    tmp_15_fu_1149_p2 <= std_logic_vector(unsigned(tmp_15_mid2_cast1_fu_1114_p1) + unsigned(tmp_14_reg_1900));
    tmp_15_mid2_cast1_fu_1114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_mid2_reg_1889),20));
    tmp_15_mid2_cast_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_mid2_fu_971_p3),64));
    tmp_15_mid2_fu_971_p3 <= 
        j_3_dup_fu_945_p2 when (exitcond_mid1_fu_939_p2(0) = '1') else 
        j9_mid_fu_881_p3;
    tmp_16_fu_1166_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_1158_p3) - unsigned(tmp_31_cast_fu_1154_p1));
    tmp_18_fu_1177_p2 <= std_logic_vector(unsigned(ap_const_lv22_1) + unsigned(tmp_16_fu_1166_p2));
    tmp_19_fu_1228_p2 <= std_logic_vector(unsigned(ap_const_lv22_2) + unsigned(tmp_16_reg_1942));
    tmp_1_cast_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m5_reg_409),22));
    tmp_1_fu_909_p3 <= (tmp_2_mid2_fu_889_p3 & ap_const_lv7_0);
    tmp_20_fu_1188_p2 <= std_logic_vector(unsigned(tmp_15_1_mid2_cast_fu_1129_p1) + unsigned(tmp_14_reg_1900));
    tmp_21_fu_1248_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_1241_p3) - unsigned(tmp_36_cast_fu_1238_p1));
    tmp_22_fu_1338_p2 <= std_logic_vector(unsigned(ap_const_lv22_1) + unsigned(tmp_21_reg_1984));
    tmp_23_fu_1348_p2 <= std_logic_vector(unsigned(ap_const_lv22_2) + unsigned(tmp_21_reg_1984));
    tmp_24_fu_1193_p2 <= std_logic_vector(unsigned(tmp_15_2_mid2_cast_fu_1145_p1) + unsigned(tmp_14_reg_1900));
    tmp_25_fu_1457_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_1450_p3) - unsigned(tmp_41_cast_fu_1447_p1));
    tmp_26_fu_1468_p2 <= std_logic_vector(unsigned(ap_const_lv22_1) + unsigned(tmp_25_fu_1457_p2));
    tmp_27_fu_1532_p2 <= std_logic_vector(unsigned(ap_const_lv22_2) + unsigned(tmp_25_reg_2045));
    tmp_28_fu_1048_p1 <= tmp_28_fu_1048_p10(2 - 1 downto 0);
    tmp_28_fu_1048_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_mid2_fu_963_p3),10));
    tmp_28_fu_1048_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv10_D8) * unsigned(tmp_28_fu_1048_p1), 10));
    tmp_29_cast_fu_1025_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_1019_p2),64));
    tmp_29_fu_1054_p2 <= std_logic_vector(unsigned(tmp_4_mid2_cast1_fu_831_p1) + unsigned(tmp_28_fu_1048_p2));
    tmp_2_fu_921_p2 <= std_logic_vector(unsigned(p_shl1_fu_905_p1) + unsigned(p_shl_fu_917_p1));
    tmp_2_mid2_fu_889_p3 <= 
        i_3_fu_869_p2 when (exitcond_flatten_mid_fu_863_p2(0) = '1') else 
        i8_mid_fu_815_p3;
    tmp_30_fu_1065_p2 <= std_logic_vector(unsigned(ap_const_lv10_18) + unsigned(tmp_28_fu_1048_p2));
    tmp_31_cast_fu_1154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_1149_p2),22));
    tmp_31_fu_1071_p2 <= std_logic_vector(unsigned(tmp_4_mid2_cast1_fu_831_p1) + unsigned(tmp_30_fu_1065_p2));
    tmp_32_fu_1198_p2 <= std_logic_vector(unsigned(ap_const_lv10_30) + unsigned(tmp_28_reg_1907));
    tmp_33_cast_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_1166_p2),64));
    tmp_33_fu_1203_p2 <= std_logic_vector(unsigned(tmp_4_mid2_cast1_reg_1854) + unsigned(tmp_32_fu_1198_p2));
    tmp_34_cast_fu_1183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_1177_p2),64));
    tmp_34_fu_1213_p2 <= std_logic_vector(unsigned(ap_const_lv10_48) + unsigned(tmp_28_reg_1907));
    tmp_35_cast_fu_1233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_1228_p2),64));
    tmp_35_fu_1218_p2 <= std_logic_vector(unsigned(tmp_4_mid2_cast1_reg_1854) + unsigned(tmp_34_fu_1213_p2));
    tmp_36_cast_fu_1238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_reg_1957),22));
    tmp_36_fu_1259_p2 <= std_logic_vector(unsigned(ap_const_lv10_60) + unsigned(tmp_28_reg_1907));
    tmp_37_fu_1264_p2 <= std_logic_vector(unsigned(tmp_4_mid2_cast1_reg_1854) + unsigned(tmp_36_fu_1259_p2));
    tmp_38_cast_fu_1254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_1248_p2),64));
    tmp_38_fu_1274_p2 <= std_logic_vector(unsigned(ap_const_lv10_78) + unsigned(tmp_28_reg_1907));
    tmp_39_cast_fu_1343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_1338_p2),64));
    tmp_39_fu_1279_p2 <= std_logic_vector(unsigned(tmp_4_mid2_cast1_reg_1854) + unsigned(tmp_38_fu_1274_p2));
    tmp_3_fu_951_p2 <= (exitcond_mid1_fu_939_p2 or exitcond_flatten_mid_fu_863_p2);
    tmp_40_cast_fu_1353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_1348_p2),64));
    tmp_40_fu_1358_p2 <= std_logic_vector(unsigned(ap_const_lv10_90) + unsigned(tmp_28_reg_1907));
    tmp_41_cast_fu_1447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_reg_1963),22));
    tmp_41_fu_1363_p2 <= std_logic_vector(unsigned(tmp_4_mid2_cast1_reg_1854) + unsigned(tmp_40_fu_1358_p2));
    tmp_42_fu_1373_p2 <= std_logic_vector(unsigned(ap_const_lv10_A8) + unsigned(tmp_28_reg_1907));
    tmp_43_cast_fu_1463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_1457_p2),64));
    tmp_43_fu_1378_p2 <= std_logic_vector(unsigned(tmp_4_mid2_cast1_reg_1854) + unsigned(tmp_42_fu_1373_p2));
    tmp_44_cast_fu_1474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_1468_p2),64));
    tmp_44_fu_1388_p2 <= std_logic_vector(unsigned(ap_const_lv10_C0) + unsigned(tmp_28_reg_1907));
    tmp_45_cast_fu_1537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_1532_p2),64));
    tmp_45_fu_1393_p2 <= std_logic_vector(unsigned(tmp_4_mid2_cast1_reg_1854) + unsigned(tmp_44_fu_1388_p2));
    tmp_46_fu_1082_p3 <= 
        ap_const_lv8_0 when (tmp_5_fu_957_p2(0) = '1') else 
        p_Val2_1_reg_510;
    tmp_47_cast_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_1054_p2),64));
    tmp_47_fu_1312_p4 <= grp_fu_1659_p3(15 downto 8);
    tmp_49_cast_fu_1077_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_1071_p2),64));
    tmp_49_fu_1421_p4 <= grp_fu_1677_p3(15 downto 8);
    tmp_4_mid2_cast1_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_mid2_v_fu_823_p3),10));
    tmp_4_mid2_cast_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_mid2_v_fu_823_p3),25));
    tmp_4_mid2_v_fu_823_p3 <= 
        p_1_fu_803_p2 when (exitcond_flatten_fu_809_p2(0) = '1') else 
        p_reg_453;
    tmp_51_cast_fu_1208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_1203_p2),64));
    tmp_51_fu_1506_p4 <= grp_fu_1695_p3(15 downto 8);
    tmp_53_cast_fu_1223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_1218_p2),64));
    tmp_53_fu_1565_p4 <= grp_fu_1713_p3(15 downto 8);
    tmp_55_cast_fu_1269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_1264_p2),64));
    tmp_55_fu_1647_p0 <= tmp_55_fu_1647_p00(10 - 1 downto 0);
    tmp_55_fu_1647_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_650_p2),19));
    tmp_55_fu_1647_p1 <= ap_const_lv19_282(11 - 1 downto 0);
    tmp_56_fu_660_p3 <= (i6_reg_420 & ap_const_lv9_0);
    tmp_57_cast_fu_1284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_1279_p2),64));
    tmp_57_fu_672_p3 <= (i6_reg_420 & ap_const_lv7_0);
    tmp_58_fu_684_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_680_p1) + unsigned(p_shl2_cast_fu_668_p1));
    tmp_59_cast_fu_1368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_1363_p2),64));
    tmp_59_fu_590_p2 <= std_logic_vector(unsigned(tmp_cast_7_fu_586_p1) + unsigned(phi_mul_reg_386));
    tmp_5_cast_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_fu_696_p2),19));
    tmp_5_fu_957_p2 <= (tmp_3_fu_951_p2 or exitcond_flatten_fu_809_p2);
    tmp_60_fu_600_p3 <= (tmp_59_fu_590_p2 & ap_const_lv2_0);
    tmp_61_cast_fu_1383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_1378_p2),64));
    tmp_61_fu_612_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_608_p1) - unsigned(tmp_78_cast_fu_596_p1));
    tmp_62_fu_618_p2 <= std_logic_vector(unsigned(tmp_cast_reg_1748) + unsigned(tmp_61_fu_612_p2));
    tmp_63_cast_fu_1479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_reg_2030),64));
    tmp_63_fu_706_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_702_p1) + unsigned(tmp_55_reg_1797));
    tmp_64_fu_715_p3 <= (tmp_63_fu_706_p2 & ap_const_lv2_0);
    tmp_65_fu_727_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_723_p1) - unsigned(tmp_83_cast_fu_711_p1));
    tmp_66_fu_733_p2 <= std_logic_vector(unsigned(tmp_1_cast_reg_1783) + unsigned(tmp_65_fu_727_p2));
    tmp_67_fu_742_p2 <= std_logic_vector(unsigned(tmp_6_cast_fu_738_p1) + unsigned(tmp_58_reg_1802));
    tmp_68_fu_759_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_751_p3) - unsigned(tmp_87_cast_fu_747_p1));
    tmp_69_fu_765_p2 <= std_logic_vector(unsigned(tmp_1_cast_reg_1783) + unsigned(tmp_68_fu_759_p2));
    tmp_6_cast_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j7_reg_431),20));
    tmp_6_fu_983_p2 <= std_logic_vector(unsigned(tmp_15_mid2_cast_fu_979_p1) + unsigned(tmp_2_fu_921_p2));
    tmp_78_cast_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_590_p2),22));
    tmp_7_fu_989_p1 <= tmp_6_fu_983_p2(20 - 1 downto 0);
    tmp_81_cast_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_618_p2),64));
    tmp_83_cast_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_706_p2),22));
    tmp_86_cast_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_reg_1815),64));
    tmp_87_cast_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_742_p2),22));
    tmp_8_fu_1001_p1 <= tmp_6_fu_983_p2(22 - 1 downto 0);
    tmp_90_cast_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_fu_765_p2),64));
    tmp_cast_7_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_398),19));
    tmp_cast_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_364),22));
    tmp_fu_897_p3 <= (tmp_2_mid2_fu_889_p3 & ap_const_lv9_0);
    tmp_s_fu_875_p2 <= (exitcond_flatten_mid_fu_863_p2 or exitcond_flatten_fu_809_p2);

    weights_V_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state9, tmp_47_cast_fu_1060_p1, tmp_51_cast_fu_1208_p1, tmp_55_cast_fu_1269_p1, tmp_59_cast_fu_1368_p1, tmp_63_cast_fu_1479_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weights_V_address0 <= tmp_63_cast_fu_1479_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weights_V_address0 <= tmp_59_cast_fu_1368_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weights_V_address0 <= tmp_55_cast_fu_1269_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weights_V_address0 <= tmp_51_cast_fu_1208_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            weights_V_address0 <= tmp_47_cast_fu_1060_p1(10 - 1 downto 0);
        else 
            weights_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    weights_V_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9, tmp_49_cast_fu_1077_p1, tmp_53_cast_fu_1223_p1, tmp_57_cast_fu_1284_p1, tmp_61_cast_fu_1383_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weights_V_address1 <= tmp_61_cast_fu_1383_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weights_V_address1 <= tmp_57_cast_fu_1284_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weights_V_address1 <= tmp_53_cast_fu_1223_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            weights_V_address1 <= tmp_49_cast_fu_1077_p1(10 - 1 downto 0);
        else 
            weights_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    weights_V_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            weights_V_ce0 <= ap_const_logic_1;
        else 
            weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_V_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            weights_V_ce1 <= ap_const_logic_1;
        else 
            weights_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
