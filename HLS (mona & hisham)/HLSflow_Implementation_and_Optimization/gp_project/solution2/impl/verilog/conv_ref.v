// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_ref,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.168063,HLS_SYN_LAT=239631400,HLS_SYN_TPT=none,HLS_SYN_MEM=604,HLS_SYN_DSP=11,HLS_SYN_FF=618,HLS_SYN_LUT=2096,HLS_VERSION=2018_3}" *)

module conv_ref (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        image_V_address0,
        image_V_ce0,
        image_V_q0,
        weights_V_address0,
        weights_V_ce0,
        weights_V_q0,
        weights_V_address1,
        weights_V_ce1,
        weights_V_q1,
        output_conv_V_address0,
        output_conv_V_ce0,
        output_conv_V_we0,
        output_conv_V_d0,
        output_conv_V_q0
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [20:0] image_V_address0;
output   image_V_ce0;
input  [7:0] image_V_q0;
output  [9:0] weights_V_address0;
output   weights_V_ce0;
input  [7:0] weights_V_q0;
output  [9:0] weights_V_address1;
output   weights_V_ce1;
input  [7:0] weights_V_q1;
output  [23:0] output_conv_V_address0;
output   output_conv_V_ce0;
output   output_conv_V_we0;
output  [7:0] output_conv_V_d0;
input  [7:0] output_conv_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg image_V_ce0;
reg[9:0] weights_V_address0;
reg weights_V_ce0;
reg[9:0] weights_V_address1;
reg weights_V_ce1;
reg[23:0] output_conv_V_address0;
reg output_conv_V_ce0;
reg output_conv_V_we0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [7:0] reg_532;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg  signed [7:0] reg_536;
wire   [1:0] m_1_fu_546_p2;
reg   [1:0] m_1_reg_1743;
wire    ap_CS_fsm_state2;
wire   [21:0] tmp_cast_fu_552_p1;
reg   [21:0] tmp_cast_reg_1748;
wire   [0:0] exitcond1_fu_540_p2;
wire   [18:0] next_mul_fu_556_p2;
reg   [18:0] next_mul_reg_1753;
wire    ap_CS_fsm_state3;
wire   [9:0] i_2_fu_568_p2;
reg   [9:0] i_2_reg_1761;
wire   [9:0] j_1_fu_580_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond2_fu_628_p2;
wire    ap_CS_fsm_state5;
wire   [1:0] m_2_fu_634_p2;
reg   [1:0] m_2_reg_1778;
wire   [21:0] tmp_1_cast_fu_640_p1;
reg   [21:0] tmp_1_cast_reg_1783;
wire   [9:0] i_1_fu_650_p2;
reg   [9:0] i_1_reg_1792;
wire    ap_CS_fsm_state6;
wire   [18:0] tmp_55_fu_1647_p2;
reg   [18:0] tmp_55_reg_1797;
wire   [0:0] exitcond5_fu_644_p2;
wire   [19:0] tmp_58_fu_684_p2;
reg   [19:0] tmp_58_reg_1802;
wire   [9:0] j_2_fu_696_p2;
reg   [9:0] j_2_reg_1810;
wire    ap_CS_fsm_state7;
wire   [21:0] tmp_66_fu_733_p2;
reg   [21:0] tmp_66_reg_1815;
wire   [0:0] exitcond8_fu_690_p2;
wire   [9:0] j_3_fu_779_p2;
reg   [9:0] j_3_reg_1825;
wire    ap_CS_fsm_state9;
wire   [9:0] tmp_14_2_fu_785_p2;
reg   [9:0] tmp_14_2_reg_1830;
wire   [0:0] exitcond_flatten2_fu_791_p2;
reg   [0:0] exitcond_flatten2_reg_1835;
wire   [24:0] indvar_flatten_next2_fu_797_p2;
reg   [24:0] indvar_flatten_next2_reg_1839;
wire   [0:0] exitcond_flatten_fu_809_p2;
reg   [0:0] exitcond_flatten_reg_1844;
wire   [4:0] tmp_4_mid2_v_fu_823_p3;
reg   [4:0] tmp_4_mid2_v_reg_1849;
wire   [9:0] tmp_4_mid2_cast1_fu_831_p1;
reg   [9:0] tmp_4_mid2_cast1_reg_1854;
wire   [0:0] tmp_s_fu_875_p2;
reg   [0:0] tmp_s_reg_1865;
wire   [9:0] j9_mid_fu_881_p3;
reg   [9:0] j9_mid_reg_1872;
wire   [9:0] tmp_2_mid2_fu_889_p3;
reg   [9:0] tmp_2_mid2_reg_1878;
wire   [0:0] exitcond_mid1_fu_939_p2;
reg   [0:0] exitcond_mid1_reg_1883;
wire   [9:0] tmp_15_mid2_fu_971_p3;
reg   [9:0] tmp_15_mid2_reg_1889;
reg   [23:0] output_conv_V_addr_reg_1895;
wire   [19:0] tmp_14_fu_1653_p2;
reg   [19:0] tmp_14_reg_1900;
wire   [9:0] tmp_28_fu_1048_p2;
reg   [9:0] tmp_28_reg_1907;
wire   [7:0] tmp_46_fu_1082_p3;
reg   [7:0] tmp_46_reg_1928;
wire   [1:0] r_1_fu_1090_p2;
reg   [1:0] r_1_reg_1933;
wire   [0:0] ifzero_fu_1096_p2;
reg   [0:0] ifzero_reg_1938;
wire   [21:0] tmp_16_fu_1166_p2;
reg   [21:0] tmp_16_reg_1942;
(* use_dsp48 = "no" *) wire   [19:0] tmp_20_fu_1188_p2;
reg   [19:0] tmp_20_reg_1957;
(* use_dsp48 = "no" *) wire   [19:0] tmp_24_fu_1193_p2;
reg   [19:0] tmp_24_reg_1963;
wire   [21:0] tmp_21_fu_1248_p2;
reg   [21:0] tmp_21_reg_1984;
reg   [7:0] tmp_48_reg_2005;
wire   [9:0] tmp_45_fu_1393_p2;
reg   [9:0] tmp_45_reg_2030;
reg   [7:0] tmp_50_reg_2035;
reg   [7:0] p_Val2_s_reg_2040;
wire   [21:0] tmp_25_fu_1457_p2;
reg   [21:0] tmp_25_reg_2045;
reg   [7:0] tmp_52_reg_2065;
reg   [7:0] tmp_54_reg_2075;
wire   [7:0] sum_V_2_2_fu_1606_p4;
reg   [7:0] sum_V_2_2_reg_2080;
wire    ap_CS_fsm_state15;
wire   [11:0] indvar_flatten_next_fu_1627_p3;
wire    ap_CS_fsm_state16;
wire   [20:0] indvar_flatten_next1_fu_1640_p3;
reg   [20:0] image_padded_V_address0;
reg    image_padded_V_ce0;
reg    image_padded_V_we0;
reg   [7:0] image_padded_V_d0;
wire  signed [7:0] image_padded_V_q0;
reg   [20:0] image_padded_V_address1;
reg    image_padded_V_ce1;
wire  signed [7:0] image_padded_V_q1;
reg   [1:0] m_reg_364;
wire   [0:0] exitcond3_fu_562_p2;
reg   [9:0] i_reg_375;
wire   [0:0] exitcond6_fu_574_p2;
reg   [18:0] phi_mul_reg_386;
reg   [9:0] j_reg_398;
reg   [1:0] m5_reg_409;
reg   [9:0] i6_reg_420;
reg   [9:0] j7_reg_431;
wire    ap_CS_fsm_state8;
reg   [24:0] indvar_flatten1_reg_442;
reg   [4:0] p_reg_453;
reg   [20:0] indvar_flatten2_reg_464;
reg   [9:0] i8_reg_476;
reg   [11:0] indvar_flatten_reg_487;
reg   [9:0] j9_reg_499;
reg   [7:0] p_Val2_1_reg_510;
reg   [1:0] r_reg_521;
wire   [63:0] tmp_81_cast_fu_623_p1;
wire   [63:0] tmp_90_cast_fu_770_p1;
wire   [63:0] tmp_86_cast_fu_775_p1;
wire   [63:0] tmp_29_cast_fu_1025_p1;
wire   [63:0] tmp_47_cast_fu_1060_p1;
wire   [63:0] tmp_49_cast_fu_1077_p1;
wire   [63:0] tmp_33_cast_fu_1172_p1;
wire   [63:0] tmp_34_cast_fu_1183_p1;
wire   [63:0] tmp_51_cast_fu_1208_p1;
wire   [63:0] tmp_53_cast_fu_1223_p1;
wire   [63:0] tmp_35_cast_fu_1233_p1;
wire   [63:0] tmp_38_cast_fu_1254_p1;
wire   [63:0] tmp_55_cast_fu_1269_p1;
wire   [63:0] tmp_57_cast_fu_1284_p1;
wire   [63:0] tmp_39_cast_fu_1343_p1;
wire   [63:0] tmp_40_cast_fu_1353_p1;
wire   [63:0] tmp_59_cast_fu_1368_p1;
wire   [63:0] tmp_61_cast_fu_1383_p1;
wire   [63:0] tmp_43_cast_fu_1463_p1;
wire   [63:0] tmp_44_cast_fu_1474_p1;
wire   [63:0] tmp_63_cast_fu_1479_p1;
wire   [63:0] tmp_45_cast_fu_1537_p1;
wire   [18:0] tmp_cast_7_fu_586_p1;
wire   [18:0] tmp_59_fu_590_p2;
wire   [20:0] tmp_60_fu_600_p3;
wire   [21:0] p_shl_cast_fu_608_p1;
wire   [21:0] tmp_78_cast_fu_596_p1;
wire   [21:0] tmp_61_fu_612_p2;
wire   [21:0] tmp_62_fu_618_p2;
wire   [18:0] tmp_56_fu_660_p3;
wire   [16:0] tmp_57_fu_672_p3;
wire   [19:0] p_shl3_cast_fu_680_p1;
wire   [19:0] p_shl2_cast_fu_668_p1;
wire   [18:0] tmp_5_cast_fu_702_p1;
(* use_dsp48 = "no" *) wire   [18:0] tmp_63_fu_706_p2;
wire   [20:0] tmp_64_fu_715_p3;
wire   [21:0] p_shl5_cast_fu_723_p1;
wire   [21:0] tmp_83_cast_fu_711_p1;
wire   [21:0] tmp_65_fu_727_p2;
wire   [19:0] tmp_6_cast_fu_738_p1;
wire   [19:0] tmp_67_fu_742_p2;
wire   [21:0] p_shl4_cast_fu_751_p3;
wire   [21:0] tmp_87_cast_fu_747_p1;
wire   [21:0] tmp_68_fu_759_p2;
wire   [21:0] tmp_69_fu_765_p2;
wire   [4:0] p_1_fu_803_p2;
wire   [0:0] exitcond_fu_845_p2;
wire   [0:0] not_exitcond_flatten_fu_839_p2;
wire   [0:0] exitcond_flatten1_fu_857_p2;
wire   [9:0] i8_mid_fu_815_p3;
wire   [0:0] exitcond_flatten_mid_fu_863_p2;
wire   [9:0] i_3_fu_869_p2;
wire   [18:0] tmp_fu_897_p3;
wire   [16:0] tmp_1_fu_909_p3;
wire   [63:0] p_shl1_fu_905_p1;
wire   [63:0] p_shl_fu_917_p1;
wire   [0:0] exitcond_flatten_not_fu_927_p2;
wire   [0:0] exitcond_mid_fu_851_p2;
wire   [0:0] not_exitcond_flatten_1_fu_933_p2;
wire   [0:0] tmp_3_fu_951_p2;
wire   [0:0] tmp_5_fu_957_p2;
wire   [9:0] j_3_dup_fu_945_p2;
wire   [63:0] tmp_15_mid2_cast_fu_979_p1;
wire   [63:0] tmp_2_fu_921_p2;
wire   [63:0] tmp_6_fu_983_p2;
wire   [19:0] tmp_7_fu_989_p1;
wire   [21:0] tmp_8_fu_1001_p1;
wire   [24:0] p_shl9_cast_fu_993_p3;
wire   [24:0] p_shl10_cast_fu_1005_p3;
wire   [24:0] tmp_4_mid2_cast_fu_835_p1;
wire   [24:0] tmp_10_fu_1013_p2;
wire   [24:0] tmp_12_fu_1019_p2;
wire   [1:0] r_mid2_fu_963_p3;
wire   [9:0] r_cast2_fu_1030_p1;
wire   [9:0] tmp_11_fu_1034_p2;
wire   [1:0] tmp_28_fu_1048_p1;
wire   [9:0] tmp_29_fu_1054_p2;
wire   [9:0] tmp_30_fu_1065_p2;
wire   [9:0] tmp_31_fu_1071_p2;
wire   [9:0] j_3_mid1_fu_1117_p2;
wire   [9:0] tmp_15_1_mid_fu_1102_p3;
wire   [9:0] tmp_15_1_mid2_fu_1122_p3;
wire   [9:0] tmp_14_2_mid1_fu_1133_p2;
wire   [9:0] tmp_15_2_mid_fu_1108_p3;
wire   [9:0] tmp_15_2_mid2_fu_1138_p3;
wire   [19:0] tmp_15_mid2_cast1_fu_1114_p1;
(* use_dsp48 = "no" *) wire   [19:0] tmp_15_fu_1149_p2;
wire   [21:0] p_shl8_cast_fu_1158_p3;
wire   [21:0] tmp_31_cast_fu_1154_p1;
wire   [21:0] tmp_18_fu_1177_p2;
wire   [19:0] tmp_15_1_mid2_cast_fu_1129_p1;
wire   [19:0] tmp_15_2_mid2_cast_fu_1145_p1;
wire   [9:0] tmp_32_fu_1198_p2;
wire   [9:0] tmp_33_fu_1203_p2;
wire   [9:0] tmp_34_fu_1213_p2;
wire   [9:0] tmp_35_fu_1218_p2;
wire   [21:0] tmp_19_fu_1228_p2;
wire   [21:0] p_shl7_cast_fu_1241_p3;
wire   [21:0] tmp_36_cast_fu_1238_p1;
wire   [9:0] tmp_36_fu_1259_p2;
wire   [9:0] tmp_37_fu_1264_p2;
wire   [9:0] tmp_38_fu_1274_p2;
wire   [9:0] tmp_39_fu_1279_p2;
wire  signed [15:0] grp_fu_1659_p3;
wire   [7:0] tmp_47_fu_1312_p4;
wire  signed [15:0] grp_fu_1668_p3;
wire   [21:0] tmp_22_fu_1338_p2;
wire   [21:0] tmp_23_fu_1348_p2;
wire   [9:0] tmp_40_fu_1358_p2;
wire   [9:0] tmp_41_fu_1363_p2;
wire   [9:0] tmp_42_fu_1373_p2;
wire   [9:0] tmp_43_fu_1378_p2;
wire   [9:0] tmp_44_fu_1388_p2;
wire  signed [15:0] grp_fu_1677_p3;
wire   [7:0] tmp_49_fu_1421_p4;
wire  signed [15:0] grp_fu_1686_p3;
wire   [21:0] p_shl6_cast_fu_1450_p3;
wire   [21:0] tmp_41_cast_fu_1447_p1;
wire   [21:0] tmp_26_fu_1468_p2;
wire  signed [15:0] grp_fu_1695_p3;
wire   [7:0] tmp_51_fu_1506_p4;
wire  signed [15:0] grp_fu_1704_p3;
wire   [21:0] tmp_27_fu_1532_p2;
wire  signed [15:0] grp_fu_1713_p3;
wire   [7:0] tmp_53_fu_1565_p4;
wire  signed [15:0] grp_fu_1722_p3;
wire  signed [15:0] grp_fu_1731_p3;
wire   [11:0] indvar_flatten_op_fu_1621_p2;
wire   [20:0] indvar_flatten22_op_fu_1634_p2;
wire   [9:0] tmp_55_fu_1647_p0;
wire   [10:0] tmp_55_fu_1647_p1;
wire   [10:0] tmp_14_fu_1653_p0;
wire   [9:0] tmp_14_fu_1653_p1;
wire   [15:0] grp_fu_1659_p2;
wire   [15:0] grp_fu_1668_p2;
wire   [15:0] grp_fu_1677_p2;
wire   [15:0] grp_fu_1686_p2;
wire   [15:0] grp_fu_1695_p2;
wire   [15:0] grp_fu_1704_p2;
wire   [15:0] grp_fu_1713_p2;
wire   [15:0] grp_fu_1722_p2;
wire   [15:0] grp_fu_1731_p2;
wire    ap_CS_fsm_state17;
reg   [16:0] ap_NS_fsm;
wire   [19:0] tmp_14_fu_1653_p10;
wire   [9:0] tmp_28_fu_1048_p10;
wire   [18:0] tmp_55_fu_1647_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

conv_ref_image_pabkb #(
    .DataWidth( 8 ),
    .AddressRange( 1236492 ),
    .AddressWidth( 21 ))
image_padded_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(image_padded_V_address0),
    .ce0(image_padded_V_ce0),
    .we0(image_padded_V_we0),
    .d0(image_padded_V_d0),
    .q0(image_padded_V_q0),
    .address1(image_padded_V_address1),
    .ce1(image_padded_V_ce1),
    .q1(image_padded_V_q1)
);

conv_ref_mul_mul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 19 ))
conv_ref_mul_mul_cud_U1(
    .din0(tmp_55_fu_1647_p0),
    .din1(tmp_55_fu_1647_p1),
    .dout(tmp_55_fu_1647_p2)
);

conv_ref_mul_mul_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 20 ))
conv_ref_mul_mul_dEe_U2(
    .din0(tmp_14_fu_1653_p0),
    .din1(tmp_14_fu_1653_p1),
    .dout(tmp_14_fu_1653_p2)
);

conv_ref_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
conv_ref_mac_mulaeOg_U3(
    .din0(image_padded_V_q0),
    .din1(reg_532),
    .din2(grp_fu_1659_p2),
    .dout(grp_fu_1659_p3)
);

conv_ref_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
conv_ref_mac_mulaeOg_U4(
    .din0(image_padded_V_q1),
    .din1(reg_536),
    .din2(grp_fu_1668_p2),
    .dout(grp_fu_1668_p3)
);

conv_ref_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
conv_ref_mac_mulaeOg_U5(
    .din0(image_padded_V_q1),
    .din1(reg_532),
    .din2(grp_fu_1677_p2),
    .dout(grp_fu_1677_p3)
);

conv_ref_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
conv_ref_mac_mulaeOg_U6(
    .din0(image_padded_V_q0),
    .din1(reg_536),
    .din2(grp_fu_1686_p2),
    .dout(grp_fu_1686_p3)
);

conv_ref_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
conv_ref_mac_mulaeOg_U7(
    .din0(image_padded_V_q1),
    .din1(reg_532),
    .din2(grp_fu_1695_p2),
    .dout(grp_fu_1695_p3)
);

conv_ref_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
conv_ref_mac_mulaeOg_U8(
    .din0(image_padded_V_q0),
    .din1(reg_536),
    .din2(grp_fu_1704_p2),
    .dout(grp_fu_1704_p3)
);

conv_ref_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
conv_ref_mac_mulaeOg_U9(
    .din0(image_padded_V_q1),
    .din1(reg_532),
    .din2(grp_fu_1713_p2),
    .dout(grp_fu_1713_p3)
);

conv_ref_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
conv_ref_mac_mulaeOg_U10(
    .din0(image_padded_V_q0),
    .din1(reg_536),
    .din2(grp_fu_1722_p2),
    .dout(grp_fu_1722_p3)
);

conv_ref_mac_mulaeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
conv_ref_mac_mulaeOg_U11(
    .din0(image_padded_V_q1),
    .din1(reg_532),
    .din2(grp_fu_1731_p2),
    .dout(grp_fu_1731_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond8_fu_690_p2 == 1'd1))) begin
        i6_reg_420 <= i_1_reg_1792;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_628_p2 == 1'd0))) begin
        i6_reg_420 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_628_p2 == 1'd1))) begin
        i8_reg_476 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state16) & (exitcond_flatten2_reg_1835 == 1'd0))) begin
        i8_reg_476 <= tmp_2_mid2_reg_1878;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_375 <= i_2_reg_1761;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_540_p2 == 1'd0))) begin
        i_reg_375 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_628_p2 == 1'd1))) begin
        indvar_flatten1_reg_442 <= 25'd0;
    end else if (((1'b1 == ap_CS_fsm_state16) & (exitcond_flatten2_reg_1835 == 1'd0))) begin
        indvar_flatten1_reg_442 <= indvar_flatten_next2_reg_1839;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_628_p2 == 1'd1))) begin
        indvar_flatten2_reg_464 <= 21'd0;
    end else if (((1'b1 == ap_CS_fsm_state16) & (exitcond_flatten2_reg_1835 == 1'd0))) begin
        indvar_flatten2_reg_464 <= indvar_flatten_next1_fu_1640_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_628_p2 == 1'd1))) begin
        indvar_flatten_reg_487 <= 12'd0;
    end else if (((1'b1 == ap_CS_fsm_state16) & (exitcond_flatten2_reg_1835 == 1'd0))) begin
        indvar_flatten_reg_487 <= indvar_flatten_next_fu_1627_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond5_fu_644_p2 == 1'd0))) begin
        j7_reg_431 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j7_reg_431 <= j_2_reg_1810;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_628_p2 == 1'd1))) begin
        j9_reg_499 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state16) & (exitcond_flatten2_reg_1835 == 1'd0))) begin
        j9_reg_499 <= tmp_15_mid2_reg_1889;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_562_p2 == 1'd0))) begin
        j_reg_398 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_574_p2 == 1'd0))) begin
        j_reg_398 <= j_1_fu_580_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_540_p2 == 1'd1))) begin
        m5_reg_409 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond5_fu_644_p2 == 1'd1))) begin
        m5_reg_409 <= m_2_reg_1778;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        m_reg_364 <= 2'd0;
    end else if (((exitcond3_fu_562_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_reg_364 <= m_1_reg_1743;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_628_p2 == 1'd1))) begin
        p_Val2_1_reg_510 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state16) & (exitcond_flatten2_reg_1835 == 1'd0))) begin
        p_Val2_1_reg_510 <= sum_V_2_2_reg_2080;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_628_p2 == 1'd1))) begin
        p_reg_453 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state16) & (exitcond_flatten2_reg_1835 == 1'd0))) begin
        p_reg_453 <= tmp_4_mid2_v_reg_1849;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_386 <= next_mul_reg_1753;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_540_p2 == 1'd0))) begin
        phi_mul_reg_386 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_628_p2 == 1'd1))) begin
        r_reg_521 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state16) & (exitcond_flatten2_reg_1835 == 1'd0))) begin
        r_reg_521 <= r_1_reg_1933;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        exitcond_flatten2_reg_1835 <= exitcond_flatten2_fu_791_p2;
        indvar_flatten_next2_reg_1839 <= indvar_flatten_next2_fu_797_p2;
        j_3_reg_1825 <= j_3_fu_779_p2;
        tmp_14_2_reg_1830 <= tmp_14_2_fu_785_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond_flatten2_fu_791_p2 == 1'd0))) begin
        exitcond_flatten_reg_1844 <= exitcond_flatten_fu_809_p2;
        exitcond_mid1_reg_1883 <= exitcond_mid1_fu_939_p2;
        ifzero_reg_1938 <= ifzero_fu_1096_p2;
        j9_mid_reg_1872 <= j9_mid_fu_881_p3;
        output_conv_V_addr_reg_1895 <= tmp_29_cast_fu_1025_p1;
        r_1_reg_1933 <= r_1_fu_1090_p2;
        tmp_14_reg_1900 <= tmp_14_fu_1653_p2;
        tmp_15_mid2_reg_1889 <= tmp_15_mid2_fu_971_p3;
        tmp_28_reg_1907 <= tmp_28_fu_1048_p2;
        tmp_2_mid2_reg_1878 <= tmp_2_mid2_fu_889_p3;
        tmp_46_reg_1928 <= tmp_46_fu_1082_p3;
        tmp_4_mid2_cast1_reg_1854[4 : 0] <= tmp_4_mid2_cast1_fu_831_p1[4 : 0];
        tmp_4_mid2_v_reg_1849 <= tmp_4_mid2_v_fu_823_p3;
        tmp_s_reg_1865 <= tmp_s_fu_875_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_1_reg_1792 <= i_1_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_2_reg_1761 <= i_2_fu_568_p2;
        next_mul_reg_1753 <= next_mul_fu_556_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_2_reg_1810 <= j_2_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m_1_reg_1743 <= m_1_fu_546_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_2_reg_1778 <= m_2_fu_634_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ifzero_reg_1938 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        p_Val2_s_reg_2040 <= output_conv_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_532 <= weights_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_536 <= weights_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        sum_V_2_2_reg_2080 <= {{grp_fu_1731_p3[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_16_reg_1942 <= tmp_16_fu_1166_p2;
        tmp_20_reg_1957 <= tmp_20_fu_1188_p2;
        tmp_24_reg_1963 <= tmp_24_fu_1193_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_628_p2 == 1'd0))) begin
        tmp_1_cast_reg_1783[1 : 0] <= tmp_1_cast_fu_640_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_21_reg_1984 <= tmp_21_fu_1248_p2;
        tmp_48_reg_2005 <= {{grp_fu_1668_p3[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_25_reg_2045 <= tmp_25_fu_1457_p2;
        tmp_52_reg_2065 <= {{grp_fu_1704_p3[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_45_reg_2030 <= tmp_45_fu_1393_p2;
        tmp_50_reg_2035 <= {{grp_fu_1686_p3[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_54_reg_2075 <= {{grp_fu_1722_p3[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond5_fu_644_p2 == 1'd0))) begin
        tmp_55_reg_1797 <= tmp_55_fu_1647_p2;
        tmp_58_reg_1802[19 : 7] <= tmp_58_fu_684_p2[19 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond8_fu_690_p2 == 1'd0))) begin
        tmp_66_reg_1815 <= tmp_66_fu_733_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_540_p2 == 1'd0))) begin
        tmp_cast_reg_1748[1 : 0] <= tmp_cast_fu_552_p1[1 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        image_V_ce0 = 1'b1;
    end else begin
        image_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        image_padded_V_address0 = tmp_44_cast_fu_1474_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        image_padded_V_address0 = tmp_40_cast_fu_1353_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        image_padded_V_address0 = tmp_38_cast_fu_1254_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        image_padded_V_address0 = tmp_33_cast_fu_1172_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        image_padded_V_address0 = tmp_86_cast_fu_775_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        image_padded_V_address0 = tmp_81_cast_fu_623_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        image_padded_V_address0 = 64'd0;
    end else begin
        image_padded_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        image_padded_V_address1 = tmp_45_cast_fu_1537_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        image_padded_V_address1 = tmp_43_cast_fu_1463_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        image_padded_V_address1 = tmp_39_cast_fu_1343_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        image_padded_V_address1 = tmp_35_cast_fu_1233_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        image_padded_V_address1 = tmp_34_cast_fu_1183_p1;
    end else begin
        image_padded_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        image_padded_V_ce0 = 1'b1;
    end else begin
        image_padded_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        image_padded_V_ce1 = 1'b1;
    end else begin
        image_padded_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        image_padded_V_d0 = image_V_q0;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state4))) begin
        image_padded_V_d0 = 8'd0;
    end else begin
        image_padded_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_574_p2 == 1'd0)))) begin
        image_padded_V_we0 = 1'b1;
    end else begin
        image_padded_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_conv_V_address0 = output_conv_V_addr_reg_1895;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_conv_V_address0 = tmp_29_cast_fu_1025_p1;
    end else begin
        output_conv_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state9))) begin
        output_conv_V_ce0 = 1'b1;
    end else begin
        output_conv_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ifzero_reg_1938 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        output_conv_V_we0 = 1'b1;
    end else begin
        output_conv_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weights_V_address0 = tmp_63_cast_fu_1479_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weights_V_address0 = tmp_59_cast_fu_1368_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        weights_V_address0 = tmp_55_cast_fu_1269_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        weights_V_address0 = tmp_51_cast_fu_1208_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        weights_V_address0 = tmp_47_cast_fu_1060_p1;
    end else begin
        weights_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        weights_V_address1 = tmp_61_cast_fu_1383_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        weights_V_address1 = tmp_57_cast_fu_1284_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        weights_V_address1 = tmp_53_cast_fu_1223_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        weights_V_address1 = tmp_49_cast_fu_1077_p1;
    end else begin
        weights_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        weights_V_ce0 = 1'b1;
    end else begin
        weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        weights_V_ce1 = 1'b1;
    end else begin
        weights_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_540_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_562_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond6_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_628_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond5_fu_644_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond8_fu_690_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond_flatten2_fu_791_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_540_p2 = ((m_reg_364 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_628_p2 = ((m5_reg_409 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond3_fu_562_p2 = ((i_reg_375 == 10'd642) ? 1'b1 : 1'b0);

assign exitcond5_fu_644_p2 = ((i6_reg_420 == 10'd640) ? 1'b1 : 1'b0);

assign exitcond6_fu_574_p2 = ((j_reg_398 == 10'd642) ? 1'b1 : 1'b0);

assign exitcond8_fu_690_p2 = ((j7_reg_431 == 10'd640) ? 1'b1 : 1'b0);

assign exitcond_flatten1_fu_857_p2 = ((indvar_flatten_reg_487 == 12'd1920) ? 1'b1 : 1'b0);

assign exitcond_flatten2_fu_791_p2 = ((indvar_flatten1_reg_442 == 25'd29491200) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_809_p2 = ((indvar_flatten2_reg_464 == 21'd1228800) ? 1'b1 : 1'b0);

assign exitcond_flatten_mid_fu_863_p2 = (not_exitcond_flatten_fu_839_p2 & exitcond_flatten1_fu_857_p2);

assign exitcond_flatten_not_fu_927_p2 = (exitcond_flatten1_fu_857_p2 ^ 1'd1);

assign exitcond_fu_845_p2 = ((r_reg_521 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_mid1_fu_939_p2 = (not_exitcond_flatten_1_fu_933_p2 & exitcond_mid_fu_851_p2);

assign exitcond_mid_fu_851_p2 = (not_exitcond_flatten_fu_839_p2 & exitcond_fu_845_p2);

assign grp_fu_1659_p2 = {{tmp_46_reg_1928}, {8'd0}};

assign grp_fu_1668_p2 = {{tmp_47_fu_1312_p4}, {8'd0}};

assign grp_fu_1677_p2 = {{tmp_48_reg_2005}, {8'd0}};

assign grp_fu_1686_p2 = {{tmp_49_fu_1421_p4}, {8'd0}};

assign grp_fu_1695_p2 = {{tmp_50_reg_2035}, {8'd0}};

assign grp_fu_1704_p2 = {{tmp_51_fu_1506_p4}, {8'd0}};

assign grp_fu_1713_p2 = {{tmp_52_reg_2065}, {8'd0}};

assign grp_fu_1722_p2 = {{tmp_53_fu_1565_p4}, {8'd0}};

assign grp_fu_1731_p2 = {{tmp_54_reg_2075}, {8'd0}};

assign i8_mid_fu_815_p3 = ((exitcond_flatten_fu_809_p2[0:0] === 1'b1) ? 10'd0 : i8_reg_476);

assign i_1_fu_650_p2 = (i6_reg_420 + 10'd1);

assign i_2_fu_568_p2 = (i_reg_375 + 10'd1);

assign i_3_fu_869_p2 = (10'd1 + i8_mid_fu_815_p3);

assign ifzero_fu_1096_p2 = ((r_1_fu_1090_p2 == 2'd3) ? 1'b1 : 1'b0);

assign image_V_address0 = tmp_90_cast_fu_770_p1;

assign indvar_flatten22_op_fu_1634_p2 = (indvar_flatten2_reg_464 + 21'd1);

assign indvar_flatten_next1_fu_1640_p3 = ((exitcond_flatten_reg_1844[0:0] === 1'b1) ? 21'd1 : indvar_flatten22_op_fu_1634_p2);

assign indvar_flatten_next2_fu_797_p2 = (indvar_flatten1_reg_442 + 25'd1);

assign indvar_flatten_next_fu_1627_p3 = ((tmp_s_reg_1865[0:0] === 1'b1) ? 12'd1 : indvar_flatten_op_fu_1621_p2);

assign indvar_flatten_op_fu_1621_p2 = (indvar_flatten_reg_487 + 12'd1);

assign j9_mid_fu_881_p3 = ((tmp_s_fu_875_p2[0:0] === 1'b1) ? 10'd0 : j9_reg_499);

assign j_1_fu_580_p2 = (j_reg_398 + 10'd1);

assign j_2_fu_696_p2 = (j7_reg_431 + 10'd1);

assign j_3_dup_fu_945_p2 = (10'd1 + j9_mid_fu_881_p3);

assign j_3_fu_779_p2 = (j9_reg_499 + 10'd1);

assign j_3_mid1_fu_1117_p2 = (10'd2 + j9_mid_reg_1872);

assign m_1_fu_546_p2 = (m_reg_364 + 2'd1);

assign m_2_fu_634_p2 = (m5_reg_409 + 2'd1);

assign next_mul_fu_556_p2 = (phi_mul_reg_386 + 19'd642);

assign not_exitcond_flatten_1_fu_933_p2 = (exitcond_flatten_not_fu_927_p2 | exitcond_flatten_fu_809_p2);

assign not_exitcond_flatten_fu_839_p2 = (exitcond_flatten_fu_809_p2 ^ 1'd1);

assign output_conv_V_d0 = (p_Val2_s_reg_2040 + sum_V_2_2_fu_1606_p4);

assign p_1_fu_803_p2 = (5'd1 + p_reg_453);

assign p_shl10_cast_fu_1005_p3 = {{tmp_8_fu_1001_p1}, {3'd0}};

assign p_shl1_fu_905_p1 = tmp_fu_897_p3;

assign p_shl2_cast_fu_668_p1 = tmp_56_fu_660_p3;

assign p_shl3_cast_fu_680_p1 = tmp_57_fu_672_p3;

assign p_shl4_cast_fu_751_p3 = {{tmp_67_fu_742_p2}, {2'd0}};

assign p_shl5_cast_fu_723_p1 = tmp_64_fu_715_p3;

assign p_shl6_cast_fu_1450_p3 = {{tmp_24_reg_1963}, {2'd0}};

assign p_shl7_cast_fu_1241_p3 = {{tmp_20_reg_1957}, {2'd0}};

assign p_shl8_cast_fu_1158_p3 = {{tmp_15_fu_1149_p2}, {2'd0}};

assign p_shl9_cast_fu_993_p3 = {{tmp_7_fu_989_p1}, {5'd0}};

assign p_shl_cast_fu_608_p1 = tmp_60_fu_600_p3;

assign p_shl_fu_917_p1 = tmp_1_fu_909_p3;

assign r_1_fu_1090_p2 = (2'd1 + r_mid2_fu_963_p3);

assign r_cast2_fu_1030_p1 = r_mid2_fu_963_p3;

assign r_mid2_fu_963_p3 = ((tmp_5_fu_957_p2[0:0] === 1'b1) ? 2'd0 : r_reg_521);

assign sum_V_2_2_fu_1606_p4 = {{grp_fu_1731_p3[15:8]}};

assign tmp_10_fu_1013_p2 = (p_shl9_cast_fu_993_p3 - p_shl10_cast_fu_1005_p3);

assign tmp_11_fu_1034_p2 = (tmp_2_mid2_fu_889_p3 + r_cast2_fu_1030_p1);

assign tmp_12_fu_1019_p2 = (tmp_4_mid2_cast_fu_835_p1 + tmp_10_fu_1013_p2);

assign tmp_14_2_fu_785_p2 = (j9_reg_499 + 10'd2);

assign tmp_14_2_mid1_fu_1133_p2 = (10'd3 + j9_mid_reg_1872);

assign tmp_14_fu_1653_p0 = 20'd642;

assign tmp_14_fu_1653_p1 = tmp_14_fu_1653_p10;

assign tmp_14_fu_1653_p10 = tmp_11_fu_1034_p2;

assign tmp_15_1_mid2_cast_fu_1129_p1 = tmp_15_1_mid2_fu_1122_p3;

assign tmp_15_1_mid2_fu_1122_p3 = ((exitcond_mid1_reg_1883[0:0] === 1'b1) ? j_3_mid1_fu_1117_p2 : tmp_15_1_mid_fu_1102_p3);

assign tmp_15_1_mid_fu_1102_p3 = ((tmp_s_reg_1865[0:0] === 1'b1) ? 10'd1 : j_3_reg_1825);

assign tmp_15_2_mid2_cast_fu_1145_p1 = tmp_15_2_mid2_fu_1138_p3;

assign tmp_15_2_mid2_fu_1138_p3 = ((exitcond_mid1_reg_1883[0:0] === 1'b1) ? tmp_14_2_mid1_fu_1133_p2 : tmp_15_2_mid_fu_1108_p3);

assign tmp_15_2_mid_fu_1108_p3 = ((tmp_s_reg_1865[0:0] === 1'b1) ? 10'd2 : tmp_14_2_reg_1830);

assign tmp_15_fu_1149_p2 = (tmp_15_mid2_cast1_fu_1114_p1 + tmp_14_reg_1900);

assign tmp_15_mid2_cast1_fu_1114_p1 = tmp_15_mid2_reg_1889;

assign tmp_15_mid2_cast_fu_979_p1 = tmp_15_mid2_fu_971_p3;

assign tmp_15_mid2_fu_971_p3 = ((exitcond_mid1_fu_939_p2[0:0] === 1'b1) ? j_3_dup_fu_945_p2 : j9_mid_fu_881_p3);

assign tmp_16_fu_1166_p2 = (p_shl8_cast_fu_1158_p3 - tmp_31_cast_fu_1154_p1);

assign tmp_18_fu_1177_p2 = (22'd1 + tmp_16_fu_1166_p2);

assign tmp_19_fu_1228_p2 = (22'd2 + tmp_16_reg_1942);

assign tmp_1_cast_fu_640_p1 = m5_reg_409;

assign tmp_1_fu_909_p3 = {{tmp_2_mid2_fu_889_p3}, {7'd0}};

assign tmp_20_fu_1188_p2 = (tmp_15_1_mid2_cast_fu_1129_p1 + tmp_14_reg_1900);

assign tmp_21_fu_1248_p2 = (p_shl7_cast_fu_1241_p3 - tmp_36_cast_fu_1238_p1);

assign tmp_22_fu_1338_p2 = (22'd1 + tmp_21_reg_1984);

assign tmp_23_fu_1348_p2 = (22'd2 + tmp_21_reg_1984);

assign tmp_24_fu_1193_p2 = (tmp_15_2_mid2_cast_fu_1145_p1 + tmp_14_reg_1900);

assign tmp_25_fu_1457_p2 = (p_shl6_cast_fu_1450_p3 - tmp_41_cast_fu_1447_p1);

assign tmp_26_fu_1468_p2 = (22'd1 + tmp_25_fu_1457_p2);

assign tmp_27_fu_1532_p2 = (22'd2 + tmp_25_reg_2045);

assign tmp_28_fu_1048_p1 = tmp_28_fu_1048_p10;

assign tmp_28_fu_1048_p10 = r_mid2_fu_963_p3;

assign tmp_28_fu_1048_p2 = (10'd216 * tmp_28_fu_1048_p1);

assign tmp_29_cast_fu_1025_p1 = tmp_12_fu_1019_p2;

assign tmp_29_fu_1054_p2 = (tmp_4_mid2_cast1_fu_831_p1 + tmp_28_fu_1048_p2);

assign tmp_2_fu_921_p2 = (p_shl1_fu_905_p1 + p_shl_fu_917_p1);

assign tmp_2_mid2_fu_889_p3 = ((exitcond_flatten_mid_fu_863_p2[0:0] === 1'b1) ? i_3_fu_869_p2 : i8_mid_fu_815_p3);

assign tmp_30_fu_1065_p2 = (10'd24 + tmp_28_fu_1048_p2);

assign tmp_31_cast_fu_1154_p1 = tmp_15_fu_1149_p2;

assign tmp_31_fu_1071_p2 = (tmp_4_mid2_cast1_fu_831_p1 + tmp_30_fu_1065_p2);

assign tmp_32_fu_1198_p2 = (10'd48 + tmp_28_reg_1907);

assign tmp_33_cast_fu_1172_p1 = tmp_16_fu_1166_p2;

assign tmp_33_fu_1203_p2 = (tmp_4_mid2_cast1_reg_1854 + tmp_32_fu_1198_p2);

assign tmp_34_cast_fu_1183_p1 = tmp_18_fu_1177_p2;

assign tmp_34_fu_1213_p2 = (10'd72 + tmp_28_reg_1907);

assign tmp_35_cast_fu_1233_p1 = tmp_19_fu_1228_p2;

assign tmp_35_fu_1218_p2 = (tmp_4_mid2_cast1_reg_1854 + tmp_34_fu_1213_p2);

assign tmp_36_cast_fu_1238_p1 = tmp_20_reg_1957;

assign tmp_36_fu_1259_p2 = (10'd96 + tmp_28_reg_1907);

assign tmp_37_fu_1264_p2 = (tmp_4_mid2_cast1_reg_1854 + tmp_36_fu_1259_p2);

assign tmp_38_cast_fu_1254_p1 = tmp_21_fu_1248_p2;

assign tmp_38_fu_1274_p2 = (10'd120 + tmp_28_reg_1907);

assign tmp_39_cast_fu_1343_p1 = tmp_22_fu_1338_p2;

assign tmp_39_fu_1279_p2 = (tmp_4_mid2_cast1_reg_1854 + tmp_38_fu_1274_p2);

assign tmp_3_fu_951_p2 = (exitcond_mid1_fu_939_p2 | exitcond_flatten_mid_fu_863_p2);

assign tmp_40_cast_fu_1353_p1 = tmp_23_fu_1348_p2;

assign tmp_40_fu_1358_p2 = (10'd144 + tmp_28_reg_1907);

assign tmp_41_cast_fu_1447_p1 = tmp_24_reg_1963;

assign tmp_41_fu_1363_p2 = (tmp_4_mid2_cast1_reg_1854 + tmp_40_fu_1358_p2);

assign tmp_42_fu_1373_p2 = (10'd168 + tmp_28_reg_1907);

assign tmp_43_cast_fu_1463_p1 = tmp_25_fu_1457_p2;

assign tmp_43_fu_1378_p2 = (tmp_4_mid2_cast1_reg_1854 + tmp_42_fu_1373_p2);

assign tmp_44_cast_fu_1474_p1 = tmp_26_fu_1468_p2;

assign tmp_44_fu_1388_p2 = (10'd192 + tmp_28_reg_1907);

assign tmp_45_cast_fu_1537_p1 = tmp_27_fu_1532_p2;

assign tmp_45_fu_1393_p2 = (tmp_4_mid2_cast1_reg_1854 + tmp_44_fu_1388_p2);

assign tmp_46_fu_1082_p3 = ((tmp_5_fu_957_p2[0:0] === 1'b1) ? 8'd0 : p_Val2_1_reg_510);

assign tmp_47_cast_fu_1060_p1 = tmp_29_fu_1054_p2;

assign tmp_47_fu_1312_p4 = {{grp_fu_1659_p3[15:8]}};

assign tmp_49_cast_fu_1077_p1 = tmp_31_fu_1071_p2;

assign tmp_49_fu_1421_p4 = {{grp_fu_1677_p3[15:8]}};

assign tmp_4_mid2_cast1_fu_831_p1 = tmp_4_mid2_v_fu_823_p3;

assign tmp_4_mid2_cast_fu_835_p1 = tmp_4_mid2_v_fu_823_p3;

assign tmp_4_mid2_v_fu_823_p3 = ((exitcond_flatten_fu_809_p2[0:0] === 1'b1) ? p_1_fu_803_p2 : p_reg_453);

assign tmp_51_cast_fu_1208_p1 = tmp_33_fu_1203_p2;

assign tmp_51_fu_1506_p4 = {{grp_fu_1695_p3[15:8]}};

assign tmp_53_cast_fu_1223_p1 = tmp_35_fu_1218_p2;

assign tmp_53_fu_1565_p4 = {{grp_fu_1713_p3[15:8]}};

assign tmp_55_cast_fu_1269_p1 = tmp_37_fu_1264_p2;

assign tmp_55_fu_1647_p0 = tmp_55_fu_1647_p00;

assign tmp_55_fu_1647_p00 = i_1_fu_650_p2;

assign tmp_55_fu_1647_p1 = 19'd642;

assign tmp_56_fu_660_p3 = {{i6_reg_420}, {9'd0}};

assign tmp_57_cast_fu_1284_p1 = tmp_39_fu_1279_p2;

assign tmp_57_fu_672_p3 = {{i6_reg_420}, {7'd0}};

assign tmp_58_fu_684_p2 = (p_shl3_cast_fu_680_p1 + p_shl2_cast_fu_668_p1);

assign tmp_59_cast_fu_1368_p1 = tmp_41_fu_1363_p2;

assign tmp_59_fu_590_p2 = (tmp_cast_7_fu_586_p1 + phi_mul_reg_386);

assign tmp_5_cast_fu_702_p1 = j_2_fu_696_p2;

assign tmp_5_fu_957_p2 = (tmp_3_fu_951_p2 | exitcond_flatten_fu_809_p2);

assign tmp_60_fu_600_p3 = {{tmp_59_fu_590_p2}, {2'd0}};

assign tmp_61_cast_fu_1383_p1 = tmp_43_fu_1378_p2;

assign tmp_61_fu_612_p2 = (p_shl_cast_fu_608_p1 - tmp_78_cast_fu_596_p1);

assign tmp_62_fu_618_p2 = (tmp_cast_reg_1748 + tmp_61_fu_612_p2);

assign tmp_63_cast_fu_1479_p1 = tmp_45_reg_2030;

assign tmp_63_fu_706_p2 = (tmp_5_cast_fu_702_p1 + tmp_55_reg_1797);

assign tmp_64_fu_715_p3 = {{tmp_63_fu_706_p2}, {2'd0}};

assign tmp_65_fu_727_p2 = (p_shl5_cast_fu_723_p1 - tmp_83_cast_fu_711_p1);

assign tmp_66_fu_733_p2 = (tmp_1_cast_reg_1783 + tmp_65_fu_727_p2);

assign tmp_67_fu_742_p2 = (tmp_6_cast_fu_738_p1 + tmp_58_reg_1802);

assign tmp_68_fu_759_p2 = (p_shl4_cast_fu_751_p3 - tmp_87_cast_fu_747_p1);

assign tmp_69_fu_765_p2 = (tmp_1_cast_reg_1783 + tmp_68_fu_759_p2);

assign tmp_6_cast_fu_738_p1 = j7_reg_431;

assign tmp_6_fu_983_p2 = (tmp_15_mid2_cast_fu_979_p1 + tmp_2_fu_921_p2);

assign tmp_78_cast_fu_596_p1 = tmp_59_fu_590_p2;

assign tmp_7_fu_989_p1 = tmp_6_fu_983_p2[19:0];

assign tmp_81_cast_fu_623_p1 = tmp_62_fu_618_p2;

assign tmp_83_cast_fu_711_p1 = tmp_63_fu_706_p2;

assign tmp_86_cast_fu_775_p1 = tmp_66_reg_1815;

assign tmp_87_cast_fu_747_p1 = tmp_67_fu_742_p2;

assign tmp_8_fu_1001_p1 = tmp_6_fu_983_p2[21:0];

assign tmp_90_cast_fu_770_p1 = tmp_69_fu_765_p2;

assign tmp_cast_7_fu_586_p1 = j_reg_398;

assign tmp_cast_fu_552_p1 = m_reg_364;

assign tmp_fu_897_p3 = {{tmp_2_mid2_fu_889_p3}, {9'd0}};

assign tmp_s_fu_875_p2 = (exitcond_flatten_mid_fu_863_p2 | exitcond_flatten_fu_809_p2);

always @ (posedge ap_clk) begin
    tmp_cast_reg_1748[21:2] <= 20'b00000000000000000000;
    tmp_1_cast_reg_1783[21:2] <= 20'b00000000000000000000;
    tmp_58_reg_1802[6:0] <= 7'b0000000;
    tmp_4_mid2_cast1_reg_1854[9:5] <= 5'b00000;
end

endmodule //conv_ref
