// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module word_width_word_width_Pipeline_LOAD (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_in_Addr_A,
        x_in_EN_A,
        x_in_WEN_A,
        x_in_Din_A,
        x_in_Dout_A,
        word_width_ap_int_8_ap_int_8_bool_x_address0,
        word_width_ap_int_8_ap_int_8_bool_x_ce0,
        word_width_ap_int_8_ap_int_8_bool_x_we0,
        word_width_ap_int_8_ap_int_8_bool_x_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] x_in_Addr_A;
output   x_in_EN_A;
output  [0:0] x_in_WEN_A;
output  [7:0] x_in_Din_A;
input  [7:0] x_in_Dout_A;
output  [18:0] word_width_ap_int_8_ap_int_8_bool_x_address0;
output   word_width_ap_int_8_ap_int_8_bool_x_ce0;
output  [2:0] word_width_ap_int_8_ap_int_8_bool_x_we0;
output  [23:0] word_width_ap_int_8_ap_int_8_bool_x_d0;

reg ap_idle;
reg x_in_EN_A;
reg word_width_ap_int_8_ap_int_8_bool_x_ce0;
reg[2:0] word_width_ap_int_8_ap_int_8_bool_x_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln22_fu_127_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln22_fu_139_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln24_fu_191_p1;
reg   [20:0] phi_urem_fu_72;
wire   [20:0] select_ln22_fu_167_p3;
wire    ap_loop_init;
reg   [41:0] phi_mul_fu_76;
wire   [41:0] add_ln24_fu_175_p2;
reg   [20:0] i_fu_80;
wire   [20:0] add_ln22_fu_133_p2;
reg   [20:0] ap_sig_allocacmp_i_2;
wire   [31:0] x_in_Addr_A_orig;
wire   [2:0] shl_ln24_2_fu_325_p2;
wire   [20:0] add_ln22_1_fu_155_p2;
wire   [0:0] icmp_ln22_1_fu_161_p2;
wire   [18:0] tmp_fu_181_p4;
wire   [1:0] trunc_ln24_fu_196_p1;
wire   [4:0] shl_ln_fu_200_p3;
wire   [4:0] or_ln24_fu_208_p2;
wire   [0:0] icmp_ln24_fu_214_p2;
wire   [4:0] sub_ln24_fu_224_p2;
wire   [4:0] select_ln24_fu_230_p3;
wire   [4:0] select_ln24_2_fu_246_p3;
wire   [4:0] select_ln24_1_fu_238_p3;
wire   [4:0] sub_ln24_1_fu_254_p2;
wire   [23:0] zext_ln24_1_fu_220_p1;
wire   [23:0] zext_ln24_2_fu_260_p1;
wire   [23:0] shl_ln24_fu_272_p2;
reg   [23:0] tmp_1_fu_278_p4;
wire   [23:0] zext_ln24_3_fu_264_p1;
wire   [23:0] zext_ln24_4_fu_268_p1;
wire   [23:0] shl_ln24_1_fu_296_p2;
wire   [23:0] lshr_ln24_fu_302_p2;
wire   [23:0] select_ln24_3_fu_288_p3;
wire   [23:0] and_ln24_fu_308_p2;
wire   [2:0] zext_ln24_5_fu_321_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

word_width_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln22_fu_127_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_80 <= add_ln22_fu_133_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_80 <= 21'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            phi_mul_fu_76 <= 42'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            phi_mul_fu_76 <= add_ln24_fu_175_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            phi_urem_fu_72 <= 21'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            phi_urem_fu_72 <= select_ln22_fu_167_p3;
        end
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_127_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 21'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        word_width_ap_int_8_ap_int_8_bool_x_ce0 = 1'b1;
    end else begin
        word_width_ap_int_8_ap_int_8_bool_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        word_width_ap_int_8_ap_int_8_bool_x_we0 = shl_ln24_2_fu_325_p2;
    end else begin
        word_width_ap_int_8_ap_int_8_bool_x_we0 = 3'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_in_EN_A = 1'b1;
    end else begin
        x_in_EN_A = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_1_fu_155_p2 = (phi_urem_fu_72 + 21'd1);

assign add_ln22_fu_133_p2 = (ap_sig_allocacmp_i_2 + 21'd1);

assign add_ln24_fu_175_p2 = (phi_mul_fu_76 + 42'd2796203);

assign and_ln24_fu_308_p2 = (shl_ln24_1_fu_296_p2 & lshr_ln24_fu_302_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln22_1_fu_161_p2 = ((add_ln22_1_fu_155_p2 < 21'd3) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_127_p2 = ((ap_sig_allocacmp_i_2 == 21'd1228800) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_214_p2 = ((shl_ln_fu_200_p3 > or_ln24_fu_208_p2) ? 1'b1 : 1'b0);

assign lshr_ln24_fu_302_p2 = 24'd16777215 >> zext_ln24_4_fu_268_p1;

assign or_ln24_fu_208_p2 = (shl_ln_fu_200_p3 | 5'd7);

assign select_ln22_fu_167_p3 = ((icmp_ln22_1_fu_161_p2[0:0] == 1'b1) ? add_ln22_1_fu_155_p2 : 21'd0);

assign select_ln24_1_fu_238_p3 = ((icmp_ln24_fu_214_p2[0:0] == 1'b1) ? or_ln24_fu_208_p2 : shl_ln_fu_200_p3);

assign select_ln24_2_fu_246_p3 = ((icmp_ln24_fu_214_p2[0:0] == 1'b1) ? sub_ln24_fu_224_p2 : shl_ln_fu_200_p3);

assign select_ln24_3_fu_288_p3 = ((icmp_ln24_fu_214_p2[0:0] == 1'b1) ? tmp_1_fu_278_p4 : shl_ln24_fu_272_p2);

assign select_ln24_fu_230_p3 = ((icmp_ln24_fu_214_p2[0:0] == 1'b1) ? shl_ln_fu_200_p3 : or_ln24_fu_208_p2);

assign shl_ln24_1_fu_296_p2 = 24'd16777215 << zext_ln24_3_fu_264_p1;

assign shl_ln24_2_fu_325_p2 = 3'd1 << zext_ln24_5_fu_321_p1;

assign shl_ln24_fu_272_p2 = zext_ln24_1_fu_220_p1 << zext_ln24_2_fu_260_p1;

assign shl_ln_fu_200_p3 = {{trunc_ln24_fu_196_p1}, {3'd0}};

assign sub_ln24_1_fu_254_p2 = ($signed(5'd23) - $signed(select_ln24_fu_230_p3));

assign sub_ln24_fu_224_p2 = ($signed(5'd23) - $signed(shl_ln_fu_200_p3));

integer ap_tvar_int_0;

always @ (shl_ln24_fu_272_p2) begin
    for (ap_tvar_int_0 = 24 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 23 - 0) begin
            tmp_1_fu_278_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_1_fu_278_p4[ap_tvar_int_0] = shl_ln24_fu_272_p2[23 - ap_tvar_int_0];
        end
    end
end

assign tmp_fu_181_p4 = {{phi_mul_fu_76[41:23]}};

assign trunc_ln24_fu_196_p1 = phi_urem_fu_72[1:0];

assign word_width_ap_int_8_ap_int_8_bool_x_address0 = zext_ln24_fu_191_p1;

assign word_width_ap_int_8_ap_int_8_bool_x_d0 = (select_ln24_3_fu_288_p3 & and_ln24_fu_308_p2);

assign x_in_Addr_A = x_in_Addr_A_orig << 32'd0;

assign x_in_Addr_A_orig = zext_ln22_fu_139_p1;

assign x_in_Din_A = 8'd0;

assign x_in_WEN_A = 1'd0;

assign zext_ln22_fu_139_p1 = ap_sig_allocacmp_i_2;

assign zext_ln24_1_fu_220_p1 = x_in_Dout_A;

assign zext_ln24_2_fu_260_p1 = select_ln24_2_fu_246_p3;

assign zext_ln24_3_fu_264_p1 = select_ln24_1_fu_238_p3;

assign zext_ln24_4_fu_268_p1 = sub_ln24_1_fu_254_p2;

assign zext_ln24_5_fu_321_p1 = trunc_ln24_fu_196_p1;

assign zext_ln24_fu_191_p1 = tmp_fu_181_p4;

endmodule //word_width_word_width_Pipeline_LOAD
