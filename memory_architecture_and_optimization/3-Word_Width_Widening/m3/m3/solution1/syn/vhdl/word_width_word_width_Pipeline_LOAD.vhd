-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity word_width_word_width_Pipeline_LOAD is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_in_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_in_EN_A : OUT STD_LOGIC;
    x_in_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    x_in_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    x_in_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    word_width_ap_int_8_ap_int_8_bool_x_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    word_width_ap_int_8_ap_int_8_bool_x_ce0 : OUT STD_LOGIC;
    word_width_ap_int_8_ap_int_8_bool_x_we0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    word_width_ap_int_8_ap_int_8_bool_x_d0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of word_width_word_width_Pipeline_LOAD is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv42_0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv21_12C000 : STD_LOGIC_VECTOR (20 downto 0) := "100101100000000000000";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv21_3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000011";
    constant ap_const_lv42_2AAAAB : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000001010101010101010101011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln22_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln22_fu_139_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln24_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_urem_fu_72 : STD_LOGIC_VECTOR (20 downto 0);
    signal select_ln22_fu_167_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal phi_mul_fu_76 : STD_LOGIC_VECTOR (41 downto 0);
    signal add_ln24_fu_175_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal i_fu_80 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln22_fu_133_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (20 downto 0);
    signal x_in_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln24_2_fu_325_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln22_1_fu_155_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln22_1_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_181_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln24_fu_196_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_200_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln24_fu_208_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln24_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln24_fu_224_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_fu_230_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_2_fu_246_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_1_fu_238_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln24_1_fu_254_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln24_1_fu_220_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln24_2_fu_260_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln24_fu_272_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_278_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln24_3_fu_264_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln24_4_fu_268_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln24_1_fu_296_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln24_fu_302_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln24_3_fu_288_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln24_fu_308_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln24_5_fu_321_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component word_width_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component word_width_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln22_fu_127_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_80 <= add_ln22_fu_133_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_80 <= ap_const_lv21_0;
                end if;
            end if; 
        end if;
    end process;

    phi_mul_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_mul_fu_76 <= ap_const_lv42_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    phi_mul_fu_76 <= add_ln24_fu_175_p2;
                end if;
            end if; 
        end if;
    end process;

    phi_urem_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_urem_fu_72 <= ap_const_lv21_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    phi_urem_fu_72 <= select_ln22_fu_167_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln22_1_fu_155_p2 <= std_logic_vector(unsigned(phi_urem_fu_72) + unsigned(ap_const_lv21_1));
    add_ln22_fu_133_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv21_1));
    add_ln24_fu_175_p2 <= std_logic_vector(unsigned(phi_mul_fu_76) + unsigned(ap_const_lv42_2AAAAB));
    and_ln24_fu_308_p2 <= (shl_ln24_1_fu_296_p2 and lshr_ln24_fu_302_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln22_fu_127_p2)
    begin
        if (((icmp_ln22_fu_127_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_80)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv21_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_80;
        end if; 
    end process;

    icmp_ln22_1_fu_161_p2 <= "1" when (unsigned(add_ln22_1_fu_155_p2) < unsigned(ap_const_lv21_3)) else "0";
    icmp_ln22_fu_127_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv21_12C000) else "0";
    icmp_ln24_fu_214_p2 <= "1" when (unsigned(shl_ln_fu_200_p3) > unsigned(or_ln24_fu_208_p2)) else "0";
    lshr_ln24_fu_302_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln24_4_fu_268_p1(24-1 downto 0)))));
    or_ln24_fu_208_p2 <= (shl_ln_fu_200_p3 or ap_const_lv5_7);
    select_ln22_fu_167_p3 <= 
        add_ln22_1_fu_155_p2 when (icmp_ln22_1_fu_161_p2(0) = '1') else 
        ap_const_lv21_0;
    select_ln24_1_fu_238_p3 <= 
        or_ln24_fu_208_p2 when (icmp_ln24_fu_214_p2(0) = '1') else 
        shl_ln_fu_200_p3;
    select_ln24_2_fu_246_p3 <= 
        sub_ln24_fu_224_p2 when (icmp_ln24_fu_214_p2(0) = '1') else 
        shl_ln_fu_200_p3;
    select_ln24_3_fu_288_p3 <= 
        tmp_1_fu_278_p4 when (icmp_ln24_fu_214_p2(0) = '1') else 
        shl_ln24_fu_272_p2;
    select_ln24_fu_230_p3 <= 
        shl_ln_fu_200_p3 when (icmp_ln24_fu_214_p2(0) = '1') else 
        or_ln24_fu_208_p2;
    shl_ln24_1_fu_296_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln24_3_fu_264_p1(24-1 downto 0)))));
    shl_ln24_2_fu_325_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv3_1),to_integer(unsigned('0' & zext_ln24_5_fu_321_p1(3-1 downto 0)))));
    shl_ln24_fu_272_p2 <= std_logic_vector(shift_left(unsigned(zext_ln24_1_fu_220_p1),to_integer(unsigned('0' & zext_ln24_2_fu_260_p1(24-1 downto 0)))));
    shl_ln_fu_200_p3 <= (trunc_ln24_fu_196_p1 & ap_const_lv3_0);
    sub_ln24_1_fu_254_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(select_ln24_fu_230_p3));
    sub_ln24_fu_224_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(shl_ln_fu_200_p3));
    
    tmp_1_fu_278_p4_proc : process(shl_ln24_fu_272_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_1_fu_278_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_17(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := shl_ln24_fu_272_p2;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_17(5-1 downto 0)));
            for tmp_1_fu_278_p4_i in 0 to 24-1 loop
                v0_cpy(tmp_1_fu_278_p4_i) := shl_ln24_fu_272_p2(24-1-tmp_1_fu_278_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(24-1 downto 0)))));
        res_mask := res_mask(24-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_1_fu_278_p4 <= resvalue(24-1 downto 0);
    end process;

    tmp_fu_181_p4 <= phi_mul_fu_76(41 downto 23);
    trunc_ln24_fu_196_p1 <= phi_urem_fu_72(2 - 1 downto 0);
    word_width_ap_int_8_ap_int_8_bool_x_address0 <= zext_ln24_fu_191_p1(19 - 1 downto 0);

    word_width_ap_int_8_ap_int_8_bool_x_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            word_width_ap_int_8_ap_int_8_bool_x_ce0 <= ap_const_logic_1;
        else 
            word_width_ap_int_8_ap_int_8_bool_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    word_width_ap_int_8_ap_int_8_bool_x_d0 <= (select_ln24_3_fu_288_p3 and and_ln24_fu_308_p2);

    word_width_ap_int_8_ap_int_8_bool_x_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, shl_ln24_2_fu_325_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            word_width_ap_int_8_ap_int_8_bool_x_we0 <= shl_ln24_2_fu_325_p2;
        else 
            word_width_ap_int_8_ap_int_8_bool_x_we0 <= ap_const_lv3_0;
        end if; 
    end process;

    x_in_Addr_A <= std_logic_vector(shift_left(unsigned(x_in_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    x_in_Addr_A_orig <= zext_ln22_fu_139_p1(32 - 1 downto 0);
    x_in_Din_A <= ap_const_lv8_0;

    x_in_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_in_EN_A <= ap_const_logic_1;
        else 
            x_in_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    x_in_WEN_A <= ap_const_lv1_0;
    zext_ln22_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_2),64));
    zext_ln24_1_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_in_Dout_A),24));
    zext_ln24_2_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_2_fu_246_p3),24));
    zext_ln24_3_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_1_fu_238_p3),24));
    zext_ln24_4_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln24_1_fu_254_p2),24));
    zext_ln24_5_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln24_fu_196_p1),3));
    zext_ln24_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_181_p4),64));
end behav;
