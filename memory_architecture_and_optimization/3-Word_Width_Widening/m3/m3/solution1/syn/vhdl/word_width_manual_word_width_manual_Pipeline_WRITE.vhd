-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity word_width_manual_word_width_manual_Pipeline_WRITE is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_read3_V_load : IN STD_LOGIC_VECTOR (23 downto 0);
    x_sel_rd_V_load : IN STD_LOGIC_VECTOR (1 downto 0);
    y_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_EN_A : OUT STD_LOGIC;
    y_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    y_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    x_read3_V_flag_0_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    x_read3_V_flag_0_out_ap_vld : OUT STD_LOGIC;
    x_read3_V_new_0_out : OUT STD_LOGIC_VECTOR (23 downto 0);
    x_read3_V_new_0_out_ap_vld : OUT STD_LOGIC;
    t_V_out : OUT STD_LOGIC_VECTOR (1 downto 0);
    t_V_out_ap_vld : OUT STD_LOGIC;
    x_x_V_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    x_x_V_ce0 : OUT STD_LOGIC;
    x_x_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of word_width_manual_word_width_manual_Pipeline_WRITE is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv19_64000 : STD_LOGIC_VECTOR (18 downto 0) := "1100100000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln25_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal x_read3_V_flag_0_reg_155 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_441 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln25_fu_197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_reg_445 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln1064_2_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal t_V_fu_80 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln17_fu_358_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_V_1_fu_84 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_fu_191_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_sig_allocacmp_i_V : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_s_fu_88 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_3_fu_344_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal x_read3_V_new_0_fu_92 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln1064_1_fu_336_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal y_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1064_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln885_fu_216_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1064_1_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_fu_228_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_V_1_fu_242_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1064_2_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln885_1_fu_254_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1064_3_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_fu_266_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_V_2_fu_280_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1064_4_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1064_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1064_1_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1064_fu_328_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln885_2_fu_298_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1064_5_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_250_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_2_fu_366_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln70_fu_376_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_288_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_299 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component word_width_manual_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component word_width_manual_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_V_1_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln25_fu_185_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_V_1_fu_84 <= i_fu_191_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_V_1_fu_84 <= ap_const_lv19_0;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_Val2_s_fu_88 <= x_read3_V_load;
                elsif (((icmp_ln25_reg_441 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    p_Val2_s_fu_88 <= p_Val2_3_fu_344_p3;
                end if;
            end if; 
        end if;
    end process;

    t_V_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    t_V_fu_80 <= x_sel_rd_V_load;
                elsif (((icmp_ln25_reg_441 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    t_V_fu_80 <= select_ln17_fu_358_p3;
                end if;
            end if; 
        end if;
    end process;

    x_read3_V_flag_0_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_299)) then 
                    x_read3_V_flag_0_reg_155 <= or_ln1064_2_fu_322_p2;
                elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    x_read3_V_flag_0_reg_155 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln25_reg_441 <= icmp_ln25_fu_185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_441 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                x_read3_V_new_0_fu_92 <= select_ln1064_1_fu_336_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_185_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln25_reg_445(18 downto 0) <= zext_ln25_fu_197_p1(18 downto 0);
            end if;
        end if;
    end process;
    zext_ln25_reg_445(63 downto 19) <= "000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln70_fu_376_p2 <= std_logic_vector(unsigned(tmp_V_fu_250_p1) + unsigned(tmp_V_2_fu_366_p4));
    add_ln885_1_fu_254_p2 <= std_logic_vector(unsigned(t_V_1_fu_242_p3) + unsigned(ap_const_lv2_1));
    add_ln885_2_fu_298_p2 <= std_logic_vector(unsigned(t_V_2_fu_280_p3) + unsigned(ap_const_lv2_1));
    add_ln885_fu_216_p2 <= std_logic_vector(unsigned(t_V_fu_80) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_299_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln25_reg_441, ap_block_pp0_stage0_11001)
    begin
                ap_condition_299 <= ((icmp_ln25_reg_441 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln25_fu_185_p2)
    begin
        if (((icmp_ln25_fu_185_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_V_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, i_V_1_fu_84)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_V <= ap_const_lv19_0;
        else 
            ap_sig_allocacmp_i_V <= i_V_1_fu_84;
        end if; 
    end process;

    i_fu_191_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_V) + unsigned(ap_const_lv19_1));
    icmp_ln1064_1_fu_236_p2 <= "1" when (add_ln885_fu_216_p2 = ap_const_lv2_3) else "0";
    icmp_ln1064_2_fu_260_p2 <= "1" when (t_V_1_fu_242_p3 = ap_const_lv2_0) else "0";
    icmp_ln1064_3_fu_274_p2 <= "1" when (add_ln885_1_fu_254_p2 = ap_const_lv2_3) else "0";
    icmp_ln1064_4_fu_304_p2 <= "1" when (t_V_2_fu_280_p3 = ap_const_lv2_0) else "0";
    icmp_ln1064_5_fu_352_p2 <= "1" when (add_ln885_2_fu_298_p2 = ap_const_lv2_3) else "0";
    icmp_ln1064_fu_222_p2 <= "1" when (t_V_fu_80 = ap_const_lv2_0) else "0";
    icmp_ln25_fu_185_p2 <= "1" when (ap_sig_allocacmp_i_V = ap_const_lv19_64000) else "0";
    or_ln1064_1_fu_316_p2 <= (or_ln1064_fu_310_p2 or icmp_ln1064_fu_222_p2);
    or_ln1064_2_fu_322_p2 <= (x_read3_V_flag_0_reg_155 or or_ln1064_1_fu_316_p2);
    or_ln1064_fu_310_p2 <= (icmp_ln1064_4_fu_304_p2 or icmp_ln1064_2_fu_260_p2);
    p_Val2_1_fu_228_p3 <= 
        x_x_V_q0 when (icmp_ln1064_fu_222_p2(0) = '1') else 
        p_Val2_s_fu_88;
    p_Val2_2_fu_266_p3 <= 
        x_x_V_q0 when (icmp_ln1064_2_fu_260_p2(0) = '1') else 
        p_Val2_1_fu_228_p3;
    p_Val2_3_fu_344_p3 <= 
        x_x_V_q0 when (icmp_ln1064_4_fu_304_p2(0) = '1') else 
        p_Val2_2_fu_266_p3;
    select_ln1064_1_fu_336_p3 <= 
        x_x_V_q0 when (or_ln1064_fu_310_p2(0) = '1') else 
        select_ln1064_fu_328_p3;
    select_ln1064_fu_328_p3 <= 
        x_x_V_q0 when (icmp_ln1064_fu_222_p2(0) = '1') else 
        x_read3_V_new_0_fu_92;
    select_ln17_fu_358_p3 <= 
        ap_const_lv2_0 when (icmp_ln1064_5_fu_352_p2(0) = '1') else 
        add_ln885_2_fu_298_p2;
    t_V_1_fu_242_p3 <= 
        ap_const_lv2_0 when (icmp_ln1064_1_fu_236_p2(0) = '1') else 
        add_ln885_fu_216_p2;
    t_V_2_fu_280_p3 <= 
        ap_const_lv2_0 when (icmp_ln1064_3_fu_274_p2(0) = '1') else 
        add_ln885_1_fu_254_p2;
    t_V_out <= t_V_fu_80;

    t_V_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln25_fu_185_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln25_fu_185_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            t_V_out_ap_vld <= ap_const_logic_1;
        else 
            t_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_V_1_fu_288_p4 <= p_Val2_2_fu_266_p3(15 downto 8);
    tmp_V_2_fu_366_p4 <= p_Val2_3_fu_344_p3(23 downto 16);
    tmp_V_fu_250_p1 <= p_Val2_1_fu_228_p3(8 - 1 downto 0);
    x_read3_V_flag_0_out <= x_read3_V_flag_0_reg_155;

    x_read3_V_flag_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln25_fu_185_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln25_fu_185_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_read3_V_flag_0_out_ap_vld <= ap_const_logic_1;
        else 
            x_read3_V_flag_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    x_read3_V_new_0_out <= x_read3_V_new_0_fu_92;

    x_read3_V_new_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln25_fu_185_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln25_fu_185_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_read3_V_new_0_out_ap_vld <= ap_const_logic_1;
        else 
            x_read3_V_new_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    x_x_V_address0 <= zext_ln25_fu_197_p1(19 - 1 downto 0);

    x_x_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_x_V_ce0 <= ap_const_logic_1;
        else 
            x_x_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_Addr_A <= std_logic_vector(shift_left(unsigned(y_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    y_Addr_A_orig <= zext_ln25_reg_445(32 - 1 downto 0);
    y_Din_A <= std_logic_vector(unsigned(add_ln70_fu_376_p2) + unsigned(tmp_V_1_fu_288_p4));

    y_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_EN_A <= ap_const_logic_1;
        else 
            y_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    y_WEN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln25_reg_441, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln25_reg_441 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_WEN_A <= ap_const_lv1_1;
        else 
            y_WEN_A <= ap_const_lv1_0;
        end if; 
    end process;

    zext_ln25_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_V),64));
end behav;
