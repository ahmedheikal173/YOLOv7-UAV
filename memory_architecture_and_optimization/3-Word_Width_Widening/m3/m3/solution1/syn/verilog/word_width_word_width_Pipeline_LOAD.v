// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module word_width_word_width_Pipeline_LOAD (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        sext_ln20,
        word_width_ap_int_8_ap_int_8_bool_x_address0,
        word_width_ap_int_8_ap_int_8_bool_x_ce0,
        word_width_ap_int_8_ap_int_8_bool_x_we0,
        word_width_ap_int_8_ap_int_8_bool_x_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [511:0] m_axi_gmem_WDATA;
output  [63:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [511:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [57:0] sext_ln20;
output  [18:0] word_width_ap_int_8_ap_int_8_bool_x_address0;
output   word_width_ap_int_8_ap_int_8_bool_x_ce0;
output  [2:0] word_width_ap_int_8_ap_int_8_bool_x_we0;
output  [23:0] word_width_ap_int_8_ap_int_8_bool_x_d0;

reg ap_idle;
reg m_axi_gmem_RREADY;
reg word_width_ap_int_8_ap_int_8_bool_x_ce0;
reg[2:0] word_width_ap_int_8_ap_int_8_bool_x_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln20_reg_457;
reg   [0:0] icmp_ln22_reg_461;
reg    ap_predicate_op29_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln20_fu_171_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln20_reg_457_pp0_iter1_reg;
wire   [0:0] icmp_ln22_fu_187_p2;
reg   [0:0] icmp_ln22_reg_461_pp0_iter1_reg;
reg   [511:0] gmem_addr_read_reg_465;
reg    ap_condition_exit_pp0_iter1_stage0;
reg   [511:0] ap_phi_mux_empty_30_phi_fu_138_p4;
wire   [511:0] ap_phi_reg_pp0_iter2_empty_30_reg_135;
wire   [511:0] zext_ln20_fu_207_p1;
wire   [63:0] zext_ln22_fu_268_p1;
reg   [20:0] phi_urem_fu_96;
wire   [20:0] select_ln22_fu_230_p3;
wire    ap_loop_init;
reg   [41:0] phi_mul_fu_100;
wire   [41:0] add_ln22_1_fu_252_p2;
reg   [503:0] shiftreg_fu_104;
reg   [20:0] i_fu_108;
wire   [20:0] add_ln20_fu_177_p2;
reg   [20:0] ap_sig_allocacmp_i_2;
wire   [2:0] shl_ln22_2_fu_402_p2;
wire   [5:0] trunc_ln20_fu_183_p1;
wire   [20:0] add_ln22_fu_218_p2;
wire   [0:0] icmp_ln22_1_fu_224_p2;
wire   [18:0] tmp_fu_258_p4;
wire   [1:0] trunc_ln22_2_fu_273_p1;
wire   [4:0] shl_ln_fu_277_p3;
wire   [4:0] or_ln22_fu_285_p2;
wire   [7:0] trunc_ln22_fu_238_p1;
wire   [0:0] icmp_ln22_2_fu_291_p2;
wire   [4:0] sub_ln22_fu_301_p2;
wire   [4:0] select_ln22_1_fu_307_p3;
wire   [4:0] select_ln22_3_fu_323_p3;
wire   [4:0] select_ln22_2_fu_315_p3;
wire   [4:0] sub_ln22_1_fu_331_p2;
wire   [23:0] zext_ln22_1_fu_297_p1;
wire   [23:0] zext_ln22_2_fu_337_p1;
wire   [23:0] shl_ln22_fu_349_p2;
reg   [23:0] tmp_1_fu_355_p4;
wire   [23:0] zext_ln22_3_fu_341_p1;
wire   [23:0] zext_ln22_4_fu_345_p1;
wire   [23:0] shl_ln22_1_fu_373_p2;
wire   [23:0] lshr_ln22_fu_379_p2;
wire   [23:0] select_ln22_4_fu_365_p3;
wire   [23:0] and_ln22_fu_385_p2;
wire   [2:0] zext_ln22_5_fu_398_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

word_width_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln20_fu_171_p2 == 1'd0))) begin
            i_fu_108 <= add_ln20_fu_177_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_108 <= 21'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            phi_mul_fu_100 <= 42'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            phi_mul_fu_100 <= add_ln22_1_fu_252_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            phi_urem_fu_96 <= 21'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            phi_urem_fu_96 <= select_ln22_fu_230_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            shiftreg_fu_104 <= 504'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            shiftreg_fu_104 <= {{ap_phi_mux_empty_30_phi_fu_138_p4[511:8]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln20_reg_457 <= icmp_ln20_fu_171_p2;
        icmp_ln20_reg_457_pp0_iter1_reg <= icmp_ln20_reg_457;
        icmp_ln22_reg_461_pp0_iter1_reg <= icmp_ln22_reg_461;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op29_read_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_read_reg_465 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln20_fu_171_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln22_reg_461 <= icmp_ln22_fu_187_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln20_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_457 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln20_reg_457_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln22_reg_461_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_empty_30_phi_fu_138_p4 = zext_ln20_fu_207_p1;
        end else if ((icmp_ln22_reg_461_pp0_iter1_reg == 1'd1)) begin
            ap_phi_mux_empty_30_phi_fu_138_p4 = gmem_addr_read_reg_465;
        end else begin
            ap_phi_mux_empty_30_phi_fu_138_p4 = ap_phi_reg_pp0_iter2_empty_30_reg_135;
        end
    end else begin
        ap_phi_mux_empty_30_phi_fu_138_p4 = ap_phi_reg_pp0_iter2_empty_30_reg_135;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 21'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_108;
    end
end

always @ (*) begin
    if (((ap_predicate_op29_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op29_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        word_width_ap_int_8_ap_int_8_bool_x_ce0 = 1'b1;
    end else begin
        word_width_ap_int_8_ap_int_8_bool_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        word_width_ap_int_8_ap_int_8_bool_x_we0 = shl_ln22_2_fu_402_p2;
    end else begin
        word_width_ap_int_8_ap_int_8_bool_x_we0 = 3'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln20_fu_177_p2 = (ap_sig_allocacmp_i_2 + 21'd1);

assign add_ln22_1_fu_252_p2 = (phi_mul_fu_100 + 42'd2796203);

assign add_ln22_fu_218_p2 = (phi_urem_fu_96 + 21'd1);

assign and_ln22_fu_385_p2 = (shl_ln22_1_fu_373_p2 & lshr_ln22_fu_379_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_predicate_op29_read_state2 == 1'b1) & (m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_predicate_op29_read_state2 == 1'b1) & (m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op29_read_state2 == 1'b1) & (m_axi_gmem_RVALID == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter2_empty_30_reg_135 = 'bx;

always @ (*) begin
    ap_predicate_op29_read_state2 = ((icmp_ln22_reg_461 == 1'd1) & (icmp_ln20_reg_457 == 1'd0));
end

assign icmp_ln20_fu_171_p2 = ((ap_sig_allocacmp_i_2 == 21'd1228800) ? 1'b1 : 1'b0);

assign icmp_ln22_1_fu_224_p2 = ((add_ln22_fu_218_p2 < 21'd3) ? 1'b1 : 1'b0);

assign icmp_ln22_2_fu_291_p2 = ((shl_ln_fu_277_p3 > or_ln22_fu_285_p2) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_187_p2 = ((trunc_ln20_fu_183_p1 == 6'd0) ? 1'b1 : 1'b0);

assign lshr_ln22_fu_379_p2 = 24'd16777215 >> zext_ln22_4_fu_345_p1;

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 512'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 64'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign or_ln22_fu_285_p2 = (shl_ln_fu_277_p3 | 5'd7);

assign select_ln22_1_fu_307_p3 = ((icmp_ln22_2_fu_291_p2[0:0] == 1'b1) ? shl_ln_fu_277_p3 : or_ln22_fu_285_p2);

assign select_ln22_2_fu_315_p3 = ((icmp_ln22_2_fu_291_p2[0:0] == 1'b1) ? or_ln22_fu_285_p2 : shl_ln_fu_277_p3);

assign select_ln22_3_fu_323_p3 = ((icmp_ln22_2_fu_291_p2[0:0] == 1'b1) ? sub_ln22_fu_301_p2 : shl_ln_fu_277_p3);

assign select_ln22_4_fu_365_p3 = ((icmp_ln22_2_fu_291_p2[0:0] == 1'b1) ? tmp_1_fu_355_p4 : shl_ln22_fu_349_p2);

assign select_ln22_fu_230_p3 = ((icmp_ln22_1_fu_224_p2[0:0] == 1'b1) ? add_ln22_fu_218_p2 : 21'd0);

assign shl_ln22_1_fu_373_p2 = 24'd16777215 << zext_ln22_3_fu_341_p1;

assign shl_ln22_2_fu_402_p2 = 3'd1 << zext_ln22_5_fu_398_p1;

assign shl_ln22_fu_349_p2 = zext_ln22_1_fu_297_p1 << zext_ln22_2_fu_337_p1;

assign shl_ln_fu_277_p3 = {{trunc_ln22_2_fu_273_p1}, {3'd0}};

assign sub_ln22_1_fu_331_p2 = ($signed(5'd23) - $signed(select_ln22_1_fu_307_p3));

assign sub_ln22_fu_301_p2 = ($signed(5'd23) - $signed(shl_ln_fu_277_p3));

integer ap_tvar_int_0;

always @ (shl_ln22_fu_349_p2) begin
    for (ap_tvar_int_0 = 24 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 23 - 0) begin
            tmp_1_fu_355_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_1_fu_355_p4[ap_tvar_int_0] = shl_ln22_fu_349_p2[23 - ap_tvar_int_0];
        end
    end
end

assign tmp_fu_258_p4 = {{phi_mul_fu_100[41:23]}};

assign trunc_ln20_fu_183_p1 = ap_sig_allocacmp_i_2[5:0];

assign trunc_ln22_2_fu_273_p1 = phi_urem_fu_96[1:0];

assign trunc_ln22_fu_238_p1 = ap_phi_mux_empty_30_phi_fu_138_p4[7:0];

assign word_width_ap_int_8_ap_int_8_bool_x_address0 = zext_ln22_fu_268_p1;

assign word_width_ap_int_8_ap_int_8_bool_x_d0 = (select_ln22_4_fu_365_p3 & and_ln22_fu_385_p2);

assign zext_ln20_fu_207_p1 = shiftreg_fu_104;

assign zext_ln22_1_fu_297_p1 = trunc_ln22_fu_238_p1;

assign zext_ln22_2_fu_337_p1 = select_ln22_3_fu_323_p3;

assign zext_ln22_3_fu_341_p1 = select_ln22_2_fu_315_p3;

assign zext_ln22_4_fu_345_p1 = sub_ln22_1_fu_331_p2;

assign zext_ln22_5_fu_398_p1 = trunc_ln22_2_fu_273_p1;

assign zext_ln22_fu_268_p1 = tmp_fu_258_p4;

endmodule //word_width_word_width_Pipeline_LOAD
