// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module interleave_manual_rnd_interleave_manual_rnd_Pipeline_VITIS_LOOP_44_1_VITIS_LOOP_45_2_VITIS_LOOP_46_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y_Addr_A,
        y_EN_A,
        y_WEN_A,
        y_Din_A,
        y_Dout_A,
        temp_V_address0,
        temp_V_ce0,
        temp_V_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y_Addr_A;
output   y_EN_A;
output  [0:0] y_WEN_A;
output  [7:0] y_Din_A;
input  [7:0] y_Dout_A;
output  [18:0] temp_V_address0;
output   temp_V_ce0;
input  [7:0] temp_V_q0;

reg ap_idle;
reg y_EN_A;
reg[0:0] y_WEN_A;
reg temp_V_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln44_fu_172_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln45_fu_193_p2;
reg   [0:0] icmp_ln45_reg_508;
reg   [0:0] icmp_ln45_reg_508_pp0_iter2_reg;
reg   [0:0] icmp_ln45_reg_508_pp0_iter3_reg;
wire   [0:0] and_ln44_fu_219_p2;
reg   [0:0] and_ln44_reg_516;
reg   [0:0] and_ln44_reg_516_pp0_iter2_reg;
wire   [7:0] select_ln45_1_fu_237_p3;
reg   [7:0] select_ln45_1_reg_522;
reg   [7:0] select_ln45_1_reg_522_pp0_iter2_reg;
wire   [63:0] idx_4_cast_fu_356_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln47_3_fu_428_p1;
reg   [7:0] j_fu_70;
wire   [7:0] add_ln46_fu_257_p2;
wire    ap_loop_init;
reg   [18:0] idx_fu_74;
wire   [18:0] add_ln48_fu_361_p2;
reg   [9:0] i_fu_78;
wire   [9:0] select_ln45_2_fu_245_p3;
reg   [18:0] idx_2_fu_82;
wire   [18:0] select_ln45_3_fu_346_p3;
reg   [17:0] indvar_flatten23_fu_86;
wire   [17:0] select_ln45_4_fu_269_p3;
reg   [1:0] k_fu_90;
wire   [1:0] select_ln44_3_fu_391_p3;
reg   [18:0] indvars_iv192_fu_94;
wire   [18:0] select_ln44_4_fu_326_p3;
reg   [18:0] indvar_flatten39_fu_98;
wire   [18:0] add_ln44_2_fu_178_p2;
wire   [31:0] y_Addr_A_orig;
wire   [0:0] icmp_ln46_fu_213_p2;
wire   [0:0] xor_ln44_fu_207_p2;
wire   [9:0] select_ln44_1_fu_199_p3;
wire   [0:0] or_ln45_fu_231_p2;
wire   [9:0] add_ln45_fu_225_p2;
wire   [17:0] add_ln45_2_fu_263_p2;
wire   [18:0] add_ln44_1_fu_306_p2;
wire   [18:0] select_ln44_fu_312_p3;
wire   [18:0] add_ln45_1_fu_333_p2;
wire   [18:0] select_ln44_2_fu_319_p3;
wire   [18:0] select_ln45_fu_339_p3;
wire   [1:0] add_ln44_fu_385_p2;
wire   [17:0] grp_fu_438_p3;
wire   [16:0] trunc_ln47_fu_405_p1;
wire   [18:0] p_shl8_cast_fu_408_p3;
wire   [18:0] zext_ln47_2_fu_402_p1;
wire   [18:0] sub_ln47_fu_416_p2;
wire   [18:0] zext_ln45_fu_398_p1;
wire   [18:0] add_ln47_1_fu_422_p2;
wire   [9:0] grp_fu_438_p0;
wire   [7:0] grp_fu_438_p1;
wire   [7:0] grp_fu_438_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [17:0] grp_fu_438_p00;
wire   [17:0] grp_fu_438_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

interleave_manual_rnd_mac_muladd_10ns_8ns_8ns_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mac_muladd_10ns_8ns_8ns_18_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_438_p0),
    .din1(grp_fu_438_p1),
    .din2(grp_fu_438_p2),
    .ce(1'b1),
    .dout(grp_fu_438_p3)
);

interleave_manual_rnd_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_78 <= 10'd0;
        end else if (((icmp_ln44_fu_172_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_78 <= select_ln45_2_fu_245_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            idx_2_fu_82 <= 19'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            idx_2_fu_82 <= select_ln45_3_fu_346_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            idx_fu_74 <= 19'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            idx_fu_74 <= add_ln48_fu_361_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten23_fu_86 <= 18'd0;
        end else if (((icmp_ln44_fu_172_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten23_fu_86 <= select_ln45_4_fu_269_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten39_fu_98 <= 19'd0;
        end else if (((icmp_ln44_fu_172_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten39_fu_98 <= add_ln44_2_fu_178_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            indvars_iv192_fu_94 <= 19'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            indvars_iv192_fu_94 <= select_ln44_4_fu_326_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_70 <= 8'd0;
        end else if (((icmp_ln44_fu_172_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_70 <= add_ln46_fu_257_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            k_fu_90 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            k_fu_90 <= select_ln44_3_fu_391_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_172_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln44_reg_516 <= and_ln44_fu_219_p2;
        icmp_ln45_reg_508 <= icmp_ln45_fu_193_p2;
        select_ln45_1_reg_522 <= select_ln45_1_fu_237_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln44_reg_516_pp0_iter2_reg <= and_ln44_reg_516;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln45_reg_508_pp0_iter2_reg <= icmp_ln45_reg_508;
        icmp_ln45_reg_508_pp0_iter3_reg <= icmp_ln45_reg_508_pp0_iter2_reg;
        select_ln45_1_reg_522_pp0_iter2_reg <= select_ln45_1_reg_522;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_172_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        temp_V_ce0 = 1'b1;
    end else begin
        temp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        y_EN_A = 1'b1;
    end else begin
        y_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        y_WEN_A = 1'd1;
    end else begin
        y_WEN_A = 1'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln44_1_fu_306_p2 = (indvars_iv192_fu_94 + 19'd136320);

assign add_ln44_2_fu_178_p2 = (indvar_flatten39_fu_98 + 19'd1);

assign add_ln44_fu_385_p2 = (k_fu_90 + 2'd1);

assign add_ln45_1_fu_333_p2 = (select_ln44_fu_312_p3 + 19'd213);

assign add_ln45_2_fu_263_p2 = (indvar_flatten23_fu_86 + 18'd1);

assign add_ln45_fu_225_p2 = (select_ln44_1_fu_199_p3 + 10'd1);

assign add_ln46_fu_257_p2 = (select_ln45_1_fu_237_p3 + 8'd1);

assign add_ln47_1_fu_422_p2 = (sub_ln47_fu_416_p2 + zext_ln45_fu_398_p1);

assign add_ln48_fu_361_p2 = (select_ln45_fu_339_p3 + 19'd1);

assign and_ln44_fu_219_p2 = (xor_ln44_fu_207_p2 & icmp_ln46_fu_213_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign grp_fu_438_p0 = grp_fu_438_p00;

assign grp_fu_438_p00 = select_ln45_2_fu_245_p3;

assign grp_fu_438_p1 = 18'd213;

assign grp_fu_438_p2 = grp_fu_438_p20;

assign grp_fu_438_p20 = select_ln45_1_reg_522_pp0_iter2_reg;

assign icmp_ln44_fu_172_p2 = ((indvar_flatten39_fu_98 == 19'd408960) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_193_p2 = ((indvar_flatten23_fu_86 == 18'd136320) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_213_p2 = ((j_fu_70 == 8'd213) ? 1'b1 : 1'b0);

assign idx_4_cast_fu_356_p1 = select_ln45_fu_339_p3;

assign or_ln45_fu_231_p2 = (icmp_ln45_fu_193_p2 | and_ln44_fu_219_p2);

assign p_shl8_cast_fu_408_p3 = {{trunc_ln47_fu_405_p1}, {2'd0}};

assign select_ln44_1_fu_199_p3 = ((icmp_ln45_fu_193_p2[0:0] == 1'b1) ? 10'd0 : i_fu_78);

assign select_ln44_2_fu_319_p3 = ((icmp_ln45_reg_508_pp0_iter2_reg[0:0] == 1'b1) ? add_ln44_1_fu_306_p2 : idx_fu_74);

assign select_ln44_3_fu_391_p3 = ((icmp_ln45_reg_508_pp0_iter3_reg[0:0] == 1'b1) ? add_ln44_fu_385_p2 : k_fu_90);

assign select_ln44_4_fu_326_p3 = ((icmp_ln45_reg_508_pp0_iter2_reg[0:0] == 1'b1) ? add_ln44_1_fu_306_p2 : indvars_iv192_fu_94);

assign select_ln44_fu_312_p3 = ((icmp_ln45_reg_508_pp0_iter2_reg[0:0] == 1'b1) ? add_ln44_1_fu_306_p2 : idx_2_fu_82);

assign select_ln45_1_fu_237_p3 = ((or_ln45_fu_231_p2[0:0] == 1'b1) ? 8'd0 : j_fu_70);

assign select_ln45_2_fu_245_p3 = ((and_ln44_fu_219_p2[0:0] == 1'b1) ? add_ln45_fu_225_p2 : select_ln44_1_fu_199_p3);

assign select_ln45_3_fu_346_p3 = ((and_ln44_reg_516_pp0_iter2_reg[0:0] == 1'b1) ? add_ln45_1_fu_333_p2 : select_ln44_fu_312_p3);

assign select_ln45_4_fu_269_p3 = ((icmp_ln45_fu_193_p2[0:0] == 1'b1) ? 18'd1 : add_ln45_2_fu_263_p2);

assign select_ln45_fu_339_p3 = ((and_ln44_reg_516_pp0_iter2_reg[0:0] == 1'b1) ? add_ln45_1_fu_333_p2 : select_ln44_2_fu_319_p3);

assign sub_ln47_fu_416_p2 = (p_shl8_cast_fu_408_p3 - zext_ln47_2_fu_402_p1);

assign temp_V_address0 = idx_4_cast_fu_356_p1;

assign trunc_ln47_fu_405_p1 = grp_fu_438_p3[16:0];

assign xor_ln44_fu_207_p2 = (icmp_ln45_fu_193_p2 ^ 1'd1);

assign y_Addr_A = y_Addr_A_orig << 32'd0;

assign y_Addr_A_orig = zext_ln47_3_fu_428_p1;

assign y_Din_A = temp_V_q0;

assign zext_ln45_fu_398_p1 = select_ln44_3_fu_391_p3;

assign zext_ln47_2_fu_402_p1 = grp_fu_438_p3;

assign zext_ln47_3_fu_428_p1 = add_ln47_1_fu_422_p2;

endmodule //interleave_manual_rnd_interleave_manual_rnd_Pipeline_VITIS_LOOP_44_1_VITIS_LOOP_45_2_VITIS_LOOP_46_3
