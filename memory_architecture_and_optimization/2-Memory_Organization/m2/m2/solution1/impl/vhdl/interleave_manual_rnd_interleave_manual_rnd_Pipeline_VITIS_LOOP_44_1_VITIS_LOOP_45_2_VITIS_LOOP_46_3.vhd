-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity interleave_manual_rnd_interleave_manual_rnd_Pipeline_VITIS_LOOP_44_1_VITIS_LOOP_45_2_VITIS_LOOP_46_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_EN_A : OUT STD_LOGIC;
    y_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    y_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    temp_V_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    temp_V_ce0 : OUT STD_LOGIC;
    temp_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of interleave_manual_rnd_interleave_manual_rnd_Pipeline_VITIS_LOOP_44_1_VITIS_LOOP_45_2_VITIS_LOOP_46_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv19_63D80 : STD_LOGIC_VECTOR (18 downto 0) := "1100011110110000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv18_21480 : STD_LOGIC_VECTOR (17 downto 0) := "100001010010000000";
    constant ap_const_lv8_D5 : STD_LOGIC_VECTOR (7 downto 0) := "11010101";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv19_21480 : STD_LOGIC_VECTOR (18 downto 0) := "0100001010010000000";
    constant ap_const_lv19_D5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000011010101";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv18_D5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000011010101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln44_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln45_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_508_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_508_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_reg_516 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_reg_516_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln45_1_fu_237_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln45_1_reg_522 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln45_1_reg_522_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal idx_4_cast_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln47_3_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_70 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln46_fu_257_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal idx_fu_74 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln48_fu_361_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_fu_78 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln45_2_fu_245_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal idx_2_fu_82 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln45_3_fu_346_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal indvar_flatten23_fu_86 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln45_4_fu_269_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal k_fu_90 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln44_3_fu_391_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvars_iv192_fu_94 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln44_4_fu_326_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal indvar_flatten39_fu_98 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln44_2_fu_178_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal y_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln46_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln44_1_fu_199_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln45_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln45_fu_225_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln45_2_fu_263_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln44_1_fu_306_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln44_fu_312_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln45_1_fu_333_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln44_2_fu_319_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln45_fu_339_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln44_fu_385_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_438_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln47_fu_405_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl8_cast_fu_408_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln47_2_fu_402_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln47_fu_416_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln45_fu_398_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln47_1_fu_422_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_438_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_438_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_438_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_438_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_438_p20 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component interleave_manual_rnd_mac_muladd_10ns_8ns_8ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component interleave_manual_rnd_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_10ns_8ns_8ns_18_4_1_U10 : component interleave_manual_rnd_mac_muladd_10ns_8ns_8ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_438_p0,
        din1 => grp_fu_438_p1,
        din2 => grp_fu_438_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_438_p3);

    flow_control_loop_pipe_sequential_init_U : component interleave_manual_rnd_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_78 <= ap_const_lv10_0;
                elsif (((icmp_ln44_fu_172_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_78 <= select_ln45_2_fu_245_p3;
                end if;
            end if; 
        end if;
    end process;

    idx_2_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    idx_2_fu_82 <= ap_const_lv19_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    idx_2_fu_82 <= select_ln45_3_fu_346_p3;
                end if;
            end if; 
        end if;
    end process;

    idx_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    idx_fu_74 <= ap_const_lv19_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    idx_fu_74 <= add_ln48_fu_361_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten23_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten23_fu_86 <= ap_const_lv18_0;
                elsif (((icmp_ln44_fu_172_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten23_fu_86 <= select_ln45_4_fu_269_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten39_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten39_fu_98 <= ap_const_lv19_0;
                elsif (((icmp_ln44_fu_172_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten39_fu_98 <= add_ln44_2_fu_178_p2;
                end if;
            end if; 
        end if;
    end process;

    indvars_iv192_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    indvars_iv192_fu_94 <= ap_const_lv19_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    indvars_iv192_fu_94 <= select_ln44_4_fu_326_p3;
                end if;
            end if; 
        end if;
    end process;

    j_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_70 <= ap_const_lv8_0;
                elsif (((icmp_ln44_fu_172_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_70 <= add_ln46_fu_257_p2;
                end if;
            end if; 
        end if;
    end process;

    k_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    k_fu_90 <= ap_const_lv2_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    k_fu_90 <= select_ln44_3_fu_391_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_172_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln44_reg_516 <= and_ln44_fu_219_p2;
                icmp_ln45_reg_508 <= icmp_ln45_fu_193_p2;
                select_ln45_1_reg_522 <= select_ln45_1_fu_237_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln44_reg_516_pp0_iter2_reg <= and_ln44_reg_516;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln45_reg_508_pp0_iter2_reg <= icmp_ln45_reg_508;
                icmp_ln45_reg_508_pp0_iter3_reg <= icmp_ln45_reg_508_pp0_iter2_reg;
                select_ln45_1_reg_522_pp0_iter2_reg <= select_ln45_1_reg_522;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln44_1_fu_306_p2 <= std_logic_vector(unsigned(indvars_iv192_fu_94) + unsigned(ap_const_lv19_21480));
    add_ln44_2_fu_178_p2 <= std_logic_vector(unsigned(indvar_flatten39_fu_98) + unsigned(ap_const_lv19_1));
    add_ln44_fu_385_p2 <= std_logic_vector(unsigned(k_fu_90) + unsigned(ap_const_lv2_1));
    add_ln45_1_fu_333_p2 <= std_logic_vector(unsigned(select_ln44_fu_312_p3) + unsigned(ap_const_lv19_D5));
    add_ln45_2_fu_263_p2 <= std_logic_vector(unsigned(indvar_flatten23_fu_86) + unsigned(ap_const_lv18_1));
    add_ln45_fu_225_p2 <= std_logic_vector(unsigned(select_ln44_1_fu_199_p3) + unsigned(ap_const_lv10_1));
    add_ln46_fu_257_p2 <= std_logic_vector(unsigned(select_ln45_1_fu_237_p3) + unsigned(ap_const_lv8_1));
    add_ln47_1_fu_422_p2 <= std_logic_vector(unsigned(sub_ln47_fu_416_p2) + unsigned(zext_ln45_fu_398_p1));
    add_ln48_fu_361_p2 <= std_logic_vector(unsigned(select_ln45_fu_339_p3) + unsigned(ap_const_lv19_1));
    and_ln44_fu_219_p2 <= (xor_ln44_fu_207_p2 and icmp_ln46_fu_213_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln44_fu_172_p2)
    begin
        if (((icmp_ln44_fu_172_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_438_p0 <= grp_fu_438_p00(10 - 1 downto 0);
    grp_fu_438_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_2_fu_245_p3),18));
    grp_fu_438_p1 <= ap_const_lv18_D5(8 - 1 downto 0);
    grp_fu_438_p2 <= grp_fu_438_p20(8 - 1 downto 0);
    grp_fu_438_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_1_reg_522_pp0_iter2_reg),18));
    icmp_ln44_fu_172_p2 <= "1" when (indvar_flatten39_fu_98 = ap_const_lv19_63D80) else "0";
    icmp_ln45_fu_193_p2 <= "1" when (indvar_flatten23_fu_86 = ap_const_lv18_21480) else "0";
    icmp_ln46_fu_213_p2 <= "1" when (j_fu_70 = ap_const_lv8_D5) else "0";
    idx_4_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_fu_339_p3),64));
    or_ln45_fu_231_p2 <= (icmp_ln45_fu_193_p2 or and_ln44_fu_219_p2);
    p_shl8_cast_fu_408_p3 <= (trunc_ln47_fu_405_p1 & ap_const_lv2_0);
    select_ln44_1_fu_199_p3 <= 
        ap_const_lv10_0 when (icmp_ln45_fu_193_p2(0) = '1') else 
        i_fu_78;
    select_ln44_2_fu_319_p3 <= 
        add_ln44_1_fu_306_p2 when (icmp_ln45_reg_508_pp0_iter2_reg(0) = '1') else 
        idx_fu_74;
    select_ln44_3_fu_391_p3 <= 
        add_ln44_fu_385_p2 when (icmp_ln45_reg_508_pp0_iter3_reg(0) = '1') else 
        k_fu_90;
    select_ln44_4_fu_326_p3 <= 
        add_ln44_1_fu_306_p2 when (icmp_ln45_reg_508_pp0_iter2_reg(0) = '1') else 
        indvars_iv192_fu_94;
    select_ln44_fu_312_p3 <= 
        add_ln44_1_fu_306_p2 when (icmp_ln45_reg_508_pp0_iter2_reg(0) = '1') else 
        idx_2_fu_82;
    select_ln45_1_fu_237_p3 <= 
        ap_const_lv8_0 when (or_ln45_fu_231_p2(0) = '1') else 
        j_fu_70;
    select_ln45_2_fu_245_p3 <= 
        add_ln45_fu_225_p2 when (and_ln44_fu_219_p2(0) = '1') else 
        select_ln44_1_fu_199_p3;
    select_ln45_3_fu_346_p3 <= 
        add_ln45_1_fu_333_p2 when (and_ln44_reg_516_pp0_iter2_reg(0) = '1') else 
        select_ln44_fu_312_p3;
    select_ln45_4_fu_269_p3 <= 
        ap_const_lv18_1 when (icmp_ln45_fu_193_p2(0) = '1') else 
        add_ln45_2_fu_263_p2;
    select_ln45_fu_339_p3 <= 
        add_ln45_1_fu_333_p2 when (and_ln44_reg_516_pp0_iter2_reg(0) = '1') else 
        select_ln44_2_fu_319_p3;
    sub_ln47_fu_416_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_408_p3) - unsigned(zext_ln47_2_fu_402_p1));
    temp_V_address0 <= idx_4_cast_fu_356_p1(19 - 1 downto 0);

    temp_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            temp_V_ce0 <= ap_const_logic_1;
        else 
            temp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln47_fu_405_p1 <= grp_fu_438_p3(17 - 1 downto 0);
    xor_ln44_fu_207_p2 <= (icmp_ln45_fu_193_p2 xor ap_const_lv1_1);
    y_Addr_A <= std_logic_vector(shift_left(unsigned(y_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    y_Addr_A_orig <= zext_ln47_3_fu_428_p1(32 - 1 downto 0);
    y_Din_A <= temp_V_q0;

    y_EN_A_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            y_EN_A <= ap_const_logic_1;
        else 
            y_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    y_WEN_A_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            y_WEN_A <= ap_const_lv1_1;
        else 
            y_WEN_A <= ap_const_lv1_0;
        end if; 
    end process;

    zext_ln45_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln44_3_fu_391_p3),19));
    zext_ln47_2_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_438_p3),19));
    zext_ln47_3_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln47_1_fu_422_p2),64));
end behav;
