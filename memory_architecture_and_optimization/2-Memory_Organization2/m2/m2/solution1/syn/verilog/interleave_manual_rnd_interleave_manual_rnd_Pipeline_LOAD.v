// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module interleave_manual_rnd_interleave_manual_rnd_Pipeline_LOAD (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_in_Addr_A,
        x_in_EN_A,
        x_in_WEN_A,
        x_in_Din_A,
        x_in_Dout_A,
        x_x0_V_address0,
        x_x0_V_ce0,
        x_x0_V_we0,
        x_x0_V_d0,
        x_x1_V_address0,
        x_x1_V_ce0,
        x_x1_V_we0,
        x_x1_V_d0,
        x_x2_V_address0,
        x_x2_V_ce0,
        x_x2_V_we0,
        x_x2_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] x_in_Addr_A;
output   x_in_EN_A;
output  [0:0] x_in_WEN_A;
output  [7:0] x_in_Din_A;
input  [7:0] x_in_Dout_A;
output  [18:0] x_x0_V_address0;
output   x_x0_V_ce0;
output   x_x0_V_we0;
output  [7:0] x_x0_V_d0;
output  [18:0] x_x1_V_address0;
output   x_x1_V_ce0;
output   x_x1_V_we0;
output  [7:0] x_x1_V_d0;
output  [18:0] x_x2_V_address0;
output   x_x2_V_ce0;
output   x_x2_V_we0;
output  [7:0] x_x2_V_d0;

reg ap_idle;
reg x_in_EN_A;
reg x_x0_V_ce0;
reg x_x0_V_we0;
reg x_x1_V_ce0;
reg x_x1_V_we0;
reg x_x2_V_ce0;
reg x_x2_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln24_fu_165_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] trunc_ln1559_fu_185_p1;
reg   [1:0] trunc_ln1559_reg_353;
wire   [63:0] zext_ln587_fu_180_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln587_3_fu_259_p1;
wire   [63:0] zext_ln587_2_fu_274_p1;
wire   [63:0] zext_ln587_1_fu_289_p1;
reg   [20:0] ret_fu_62;
wire   [20:0] select_ln24_fu_204_p3;
wire    ap_loop_init;
reg   [41:0] phi_mul9_fu_66;
wire   [41:0] add_ln13_2_fu_243_p2;
reg   [41:0] phi_mul7_fu_70;
wire   [41:0] add_ln13_1_fu_237_p2;
reg   [41:0] phi_mul_fu_74;
wire   [41:0] add_ln13_fu_231_p2;
reg   [20:0] i_V_fu_78;
wire   [20:0] i_fu_171_p2;
wire   [31:0] x_in_Addr_A_orig;
wire   [20:0] add_ln24_1_fu_192_p2;
wire   [0:0] icmp_ln24_1_fu_198_p2;
wire   [18:0] tmp_2_fu_249_p4;
wire   [18:0] tmp_1_fu_264_p4;
wire   [18:0] tmp_fu_279_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

interleave_manual_rnd_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_V_fu_78 <= 21'd0;
        end else if (((icmp_ln24_fu_165_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_V_fu_78 <= i_fu_171_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            phi_mul7_fu_70 <= 42'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            phi_mul7_fu_70 <= add_ln13_1_fu_237_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            phi_mul9_fu_66 <= 42'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            phi_mul9_fu_66 <= add_ln13_2_fu_243_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            phi_mul_fu_74 <= 42'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            phi_mul_fu_74 <= add_ln13_fu_231_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ret_fu_62 <= 21'd0;
        end else if (((icmp_ln24_fu_165_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            ret_fu_62 <= select_ln24_fu_204_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_165_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln1559_reg_353 <= trunc_ln1559_fu_185_p1;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_165_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_in_EN_A = 1'b1;
    end else begin
        x_in_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        x_x0_V_ce0 = 1'b1;
    end else begin
        x_x0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln1559_reg_353 == 2'd2) & ~(trunc_ln1559_reg_353 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        x_x0_V_we0 = 1'b1;
    end else begin
        x_x0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        x_x1_V_ce0 = 1'b1;
    end else begin
        x_x1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1559_reg_353 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        x_x1_V_we0 = 1'b1;
    end else begin
        x_x1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        x_x2_V_ce0 = 1'b1;
    end else begin
        x_x2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1559_reg_353 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        x_x2_V_we0 = 1'b1;
    end else begin
        x_x2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_1_fu_237_p2 = (phi_mul7_fu_70 + 42'd2796203);

assign add_ln13_2_fu_243_p2 = (phi_mul9_fu_66 + 42'd2796203);

assign add_ln13_fu_231_p2 = (phi_mul_fu_74 + 42'd2796203);

assign add_ln24_1_fu_192_p2 = (ret_fu_62 + 21'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign i_fu_171_p2 = (i_V_fu_78 + 21'd1);

assign icmp_ln24_1_fu_198_p2 = ((add_ln24_1_fu_192_p2 < 21'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_165_p2 = ((i_V_fu_78 == 21'd1228800) ? 1'b1 : 1'b0);

assign select_ln24_fu_204_p3 = ((icmp_ln24_1_fu_198_p2[0:0] == 1'b1) ? add_ln24_1_fu_192_p2 : 21'd0);

assign tmp_1_fu_264_p4 = {{phi_mul9_fu_66[41:23]}};

assign tmp_2_fu_249_p4 = {{phi_mul7_fu_70[41:23]}};

assign tmp_fu_279_p4 = {{phi_mul_fu_74[41:23]}};

assign trunc_ln1559_fu_185_p1 = ret_fu_62[1:0];

assign x_in_Addr_A = x_in_Addr_A_orig << 32'd0;

assign x_in_Addr_A_orig = zext_ln587_fu_180_p1;

assign x_in_Din_A = 8'd0;

assign x_in_WEN_A = 1'd0;

assign x_x0_V_address0 = zext_ln587_1_fu_289_p1;

assign x_x0_V_d0 = x_in_Dout_A;

assign x_x1_V_address0 = zext_ln587_3_fu_259_p1;

assign x_x1_V_d0 = x_in_Dout_A;

assign x_x2_V_address0 = zext_ln587_2_fu_274_p1;

assign x_x2_V_d0 = x_in_Dout_A;

assign zext_ln587_1_fu_289_p1 = tmp_fu_279_p4;

assign zext_ln587_2_fu_274_p1 = tmp_1_fu_264_p4;

assign zext_ln587_3_fu_259_p1 = tmp_2_fu_249_p4;

assign zext_ln587_fu_180_p1 = i_V_fu_78;

endmodule //interleave_manual_rnd_interleave_manual_rnd_Pipeline_LOAD
