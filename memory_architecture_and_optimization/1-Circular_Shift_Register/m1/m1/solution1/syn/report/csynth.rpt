

================================================================
== Synthesis Summary Report of 'circular_shift_reg'
================================================================
+ General Information: 
    * Date:           Sun Jun  9 05:13:08 2024
    * Version:        2021.2 (Build 3367213 on Tue Oct 19 02:48:09 MDT 2021)
    * Project:        m1
    * Solution:       solution1 (Vitis Kernel Flow Target)
    * Product family: zynquplus
    * Target device:  xczu7ev-ffvc1156-2-e
    

+ Performance & Resource Estimates: 
    
    PS: '+' for module; 'o' for loop; '*' for dataflow
    +--------------------------------------+------+------+---------+---------+----------+---------+------+----------+---------+----+----------+-----------+-----+
    |                Modules               | Issue|      | Latency | Latency | Iteration|         | Trip |          |         |    |          |           |     |
    |                & Loops               | Type | Slack| (cycles)|   (ns)  |  Latency | Interval| Count| Pipelined|  BRAM   | DSP|    FF    |    LUT    | URAM|
    +--------------------------------------+------+------+---------+---------+----------+---------+------+----------+---------+----+----------+-----------+-----+
    |+ circular_shift_reg                  |     -|  1.34|       13|  130.000|         -|       14|     -|        no|  1 (~0%)|   -|  86 (~0%)|  242 (~0%)|    -|
    | + circular_shift_reg_Pipeline_WRITE  |     -|  4.09|       11|  110.000|         -|       11|     -|        no|        -|   -|  11 (~0%)|   87 (~0%)|    -|
    |  o WRITE                             |     -|  7.30|        9|   90.000|         2|        1|     9|       yes|        -|   -|         -|          -|    -|
    +--------------------------------------+------+------+---------+---------+----------+---------+------+----------+---------+----+----------+-----------+-----+


================================================================
== HW Interfaces
================================================================
* S_AXILITE Interfaces
+---------------+------------+---------------+--------+----------+
| Interface     | Data Width | Address Width | Offset | Register |
+---------------+------------+---------------+--------+----------+
| s_axi_control | 32         | 5             | 16     | 0        |
+---------------+------------+---------------+--------+----------+

* S_AXILITE Registers
+---------------+----------+--------+-------+--------+----------------------------------+------------------------------------------------------------------------+
| Interface     | Register | Offset | Width | Access | Description                      | Bit Fields                                                             |
+---------------+----------+--------+-------+--------+----------------------------------+------------------------------------------------------------------------+
| s_axi_control | CTRL     | 0x00   | 32    | RW     | Control signals                  | 0=AP_START 1=AP_DONE 2=AP_IDLE 3=AP_READY 4=AP_CONTINUE 7=AUTO_RESTART |
| s_axi_control | GIER     | 0x04   | 32    | RW     | Global Interrupt Enable Register | 0=Enable                                                               |
| s_axi_control | IP_IER   | 0x08   | 32    | RW     | IP Interrupt Enable Register     | 0=CHAN0_INT_EN 1=CHAN1_INT_EN 5=CHAN2_INT_EN                           |
| s_axi_control | IP_ISR   | 0x0c   | 32    | RW     | IP Interrupt Status Register     | 0=CHAN0_INT_ST 1=CHAN1_INT_ST 5=CHAN2_INT_ST                           |
| s_axi_control | din      | 0x10   | 32    | W      | Data signal of din               |                                                                        |
+---------------+----------+--------+-------+--------+----------------------------------+------------------------------------------------------------------------+

* BRAM
+------------+------------+---------------+
| Interface  | Data Width | Address Width |
+------------+------------+---------------+
| dout_PORTA | 8          | 32            |
+------------+------------+---------------+

* TOP LEVEL CONTROL
+-----------+---------------+-----------+
| Interface | Type          | Ports     |
+-----------+---------------+-----------+
| ap_clk    | clock         | ap_clk    |
| ap_rst_n  | reset         | ap_rst_n  |
| interrupt | interrupt     | interrupt |
| ap_ctrl   | ap_ctrl_chain |           |
+-----------+---------------+-----------+


================================================================
== SW I/O Information
================================================================
* Top Function Arguments
+----------+-----------+-------------+
| Argument | Direction | Datatype    |
+----------+-----------+-------------+
| din      | in        | ap_uint<8>  |
| dout     | out       | ap_uint<8>* |
+----------+-----------+-------------+

* SW-to-HW Mapping
+----------+---------------+-----------+-------------------------------+
| Argument | HW Interface  | HW Type   | HW Info                       |
+----------+---------------+-----------+-------------------------------+
| din      | s_axi_control | register  | name=din offset=0x10 range=32 |
| dout     | dout_PORTA    | interface |                               |
+----------+---------------+-----------+-------------------------------+


================================================================
== M_AXI Burst Information
================================================================
 Note: All burst requests might be further partitioned into multiple requests during RTL generation based on max_read_burst_length or max_write_burst_length settings.

  No burst in design

================================================================
== Bind Op Report
================================================================
+--------------------------------------+-----+--------+------------+-----+--------+---------+
| Name                                 | DSP | Pragma | Variable   | Op  | Impl   | Latency |
+--------------------------------------+-----+--------+------------+-----+--------+---------+
| + circular_shift_reg                 | 0   |        |            |     |        |         |
|   add_ln885_fu_94_p2                 | -   |        | add_ln885  | add | fabric | 0       |
|   add_ln70_fu_119_p2                 | -   |        | add_ln70   | add | fabric | 0       |
|  + circular_shift_reg_Pipeline_WRITE | 0   |        |            |     |        |         |
|    i_fu_101_p2                       | -   |        | i          | add | fabric | 0       |
|    sub_ln70_fu_111_p2                | -   |        | sub_ln70   | sub | fabric | 0       |
|    add_ln70_1_fu_129_p2              | -   |        | add_ln70_1 | add | fabric | 0       |
+--------------------------------------+-----+--------+------------+-----+--------+---------+


================================================================
== Bind Storage Report
================================================================
+----------------------+------+------+--------+------------+---------+------+---------+
| Name                 | BRAM | URAM | Pragma | Variable   | Storage | Impl | Latency |
+----------------------+------+------+--------+------------+---------+------+---------+
| + circular_shift_reg | 1    | 0    |        |            |         |      |         |
|   regs_mem_V_U       | 1    | -    | pragma | regs_mem_V | ram_t2p | bram | 1       |
+----------------------+------+------+--------+------------+---------+------+---------+


================================================================
== User Pragma Report
================================================================
* Valid Pragma Syntax
+--------------+-------------------------------------+-----------------------------------------------------------+
| Type         | Options                             | Location                                                  |
+--------------+-------------------------------------+-----------------------------------------------------------+
| bind_storage | variable=mem type=RAM_T2P impl=BRAM | ../src/./circular_shift.h:23 in circular_shift<t, n>, mem |
| pipeline     |                                     | ../src/./circular_shift.h:30 in circular_shift<t, n>      |
| interface    | mode=BRAM port=dout                 | ../src/shift_reg.cpp:7 in circular_shift_reg, dout        |
| pipeline     |                                     | ../src/shift_reg.cpp:17 in circular_shift_reg             |
| interface    | mode=BRAM port=dout                 | ../src/shift_reg.cpp:24 in shift_reg, dout                |
| bind_storage | variable=regs type=RAM_1P impl=BRAM | ../src/shift_reg.cpp:27 in shift_reg, regs                |
| unroll       |                                     | ../src/shift_reg.cpp:32 in shift_reg                      |
+--------------+-------------------------------------+-----------------------------------------------------------+


