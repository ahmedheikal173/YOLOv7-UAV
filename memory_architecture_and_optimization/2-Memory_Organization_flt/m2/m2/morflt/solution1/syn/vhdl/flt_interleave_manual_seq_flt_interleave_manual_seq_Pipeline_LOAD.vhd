-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity flt_interleave_manual_seq_flt_interleave_manual_seq_Pipeline_LOAD is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_sel_V_load : IN STD_LOGIC_VECTOR (3 downto 0);
    tmpx_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmpx_V_ce0 : OUT STD_LOGIC;
    tmpx_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    x_x0_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_x0_V_ce0 : OUT STD_LOGIC;
    x_x0_V_we0 : OUT STD_LOGIC;
    x_x0_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    x_x1_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_x1_V_ce0 : OUT STD_LOGIC;
    x_x1_V_we0 : OUT STD_LOGIC;
    x_x1_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    x_x2_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_x2_V_ce0 : OUT STD_LOGIC;
    x_x2_V_we0 : OUT STD_LOGIC;
    x_x2_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    x_x3_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_x3_V_ce0 : OUT STD_LOGIC;
    x_x3_V_we0 : OUT STD_LOGIC;
    x_x3_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    x_x4_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_x4_V_ce0 : OUT STD_LOGIC;
    x_x4_V_we0 : OUT STD_LOGIC;
    x_x4_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    x_x5_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_x5_V_ce0 : OUT STD_LOGIC;
    x_x5_V_we0 : OUT STD_LOGIC;
    x_x5_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    x_x6_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_x6_V_ce0 : OUT STD_LOGIC;
    x_x6_V_we0 : OUT STD_LOGIC;
    x_x6_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    x_x7_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_x7_V_ce0 : OUT STD_LOGIC;
    x_x7_V_we0 : OUT STD_LOGIC;
    x_x7_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of flt_interleave_manual_seq_flt_interleave_manual_seq_Pipeline_LOAD is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_DEC : STD_LOGIC_VECTOR (11 downto 0) := "110111101100";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln31_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal t_V_load_reg_235 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln587_fu_197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_V_fu_86 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_fu_188_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_V_2 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_V_fu_90 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln885_fu_202_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_t_V_load : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln31_fu_182_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_fu_188_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln587_fu_197_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component flt_interleave_manual_seq_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component flt_interleave_manual_seq_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_V_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln31_fu_182_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_V_fu_86 <= i_fu_188_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_V_fu_86 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    t_V_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln31_fu_182_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    t_V_fu_90 <= add_ln885_fu_202_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    t_V_fu_90 <= x_sel_V_load;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_182_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                t_V_load_reg_235 <= ap_sig_allocacmp_t_V_load;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln885_fu_202_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_t_V_load) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln31_fu_182_p2)
    begin
        if (((icmp_ln31_fu_182_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_V_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_V_fu_86, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_V_2 <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_i_V_2 <= i_V_fu_86;
        end if; 
    end process;


    ap_sig_allocacmp_t_V_load_assign_proc : process(ap_CS_fsm_pp0_stage0, x_sel_V_load, ap_block_pp0_stage0, ap_loop_init, t_V_fu_90)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_t_V_load <= x_sel_V_load;
        else 
            ap_sig_allocacmp_t_V_load <= t_V_fu_90;
        end if; 
    end process;

    i_fu_188_p0 <= ap_sig_allocacmp_i_V_2;
    i_fu_188_p2 <= std_logic_vector(signed(i_fu_188_p0) + signed(ap_const_lv12_1));
    icmp_ln31_fu_182_p0 <= ap_sig_allocacmp_i_V_2;
    icmp_ln31_fu_182_p2 <= "1" when (icmp_ln31_fu_182_p0 = ap_const_lv12_DEC) else "0";
    sext_ln587_fu_197_p0 <= ap_sig_allocacmp_i_V_2;
        sext_ln587_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln587_fu_197_p0),64));

    tmpx_V_address0 <= sext_ln587_fu_197_p1(12 - 1 downto 0);

    tmpx_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmpx_V_ce0 <= ap_const_logic_1;
        else 
            tmpx_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x0_V_address0 <= ap_const_lv9_0;

    x_x0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_x0_V_ce0 <= ap_const_logic_1;
        else 
            x_x0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x0_V_d0 <= tmpx_V_q0;

    x_x0_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, t_V_load_reg_235, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (t_V_load_reg_235 = ap_const_lv4_0))) then 
            x_x0_V_we0 <= ap_const_logic_1;
        else 
            x_x0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x1_V_address0 <= ap_const_lv9_0;

    x_x1_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_x1_V_ce0 <= ap_const_logic_1;
        else 
            x_x1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x1_V_d0 <= tmpx_V_q0;

    x_x1_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, t_V_load_reg_235, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (t_V_load_reg_235 = ap_const_lv4_1))) then 
            x_x1_V_we0 <= ap_const_logic_1;
        else 
            x_x1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x2_V_address0 <= ap_const_lv9_0;

    x_x2_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_x2_V_ce0 <= ap_const_logic_1;
        else 
            x_x2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x2_V_d0 <= tmpx_V_q0;

    x_x2_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, t_V_load_reg_235, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (t_V_load_reg_235 = ap_const_lv4_2))) then 
            x_x2_V_we0 <= ap_const_logic_1;
        else 
            x_x2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x3_V_address0 <= ap_const_lv9_0;

    x_x3_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_x3_V_ce0 <= ap_const_logic_1;
        else 
            x_x3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x3_V_d0 <= tmpx_V_q0;

    x_x3_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, t_V_load_reg_235, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (t_V_load_reg_235 = ap_const_lv4_3))) then 
            x_x3_V_we0 <= ap_const_logic_1;
        else 
            x_x3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x4_V_address0 <= ap_const_lv9_0;

    x_x4_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_x4_V_ce0 <= ap_const_logic_1;
        else 
            x_x4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x4_V_d0 <= tmpx_V_q0;

    x_x4_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, t_V_load_reg_235, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (t_V_load_reg_235 = ap_const_lv4_4))) then 
            x_x4_V_we0 <= ap_const_logic_1;
        else 
            x_x4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x5_V_address0 <= ap_const_lv9_0;

    x_x5_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_x5_V_ce0 <= ap_const_logic_1;
        else 
            x_x5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x5_V_d0 <= tmpx_V_q0;

    x_x5_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, t_V_load_reg_235, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (t_V_load_reg_235 = ap_const_lv4_5))) then 
            x_x5_V_we0 <= ap_const_logic_1;
        else 
            x_x5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x6_V_address0 <= ap_const_lv9_0;

    x_x6_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_x6_V_ce0 <= ap_const_logic_1;
        else 
            x_x6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x6_V_d0 <= tmpx_V_q0;

    x_x6_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, t_V_load_reg_235, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (t_V_load_reg_235 = ap_const_lv4_6))) then 
            x_x6_V_we0 <= ap_const_logic_1;
        else 
            x_x6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x7_V_address0 <= ap_const_lv9_0;

    x_x7_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_x7_V_ce0 <= ap_const_logic_1;
        else 
            x_x7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x7_V_d0 <= tmpx_V_q0;

    x_x7_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, t_V_load_reg_235, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (t_V_load_reg_235 = ap_const_lv4_7))) then 
            x_x7_V_we0 <= ap_const_logic_1;
        else 
            x_x7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
