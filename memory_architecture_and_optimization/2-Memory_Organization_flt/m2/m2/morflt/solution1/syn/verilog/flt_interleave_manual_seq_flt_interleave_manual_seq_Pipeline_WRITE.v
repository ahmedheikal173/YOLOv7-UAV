// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module flt_interleave_manual_seq_flt_interleave_manual_seq_Pipeline_WRITE (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmpy_V_address0,
        tmpy_V_ce0,
        tmpy_V_we0,
        tmpy_V_d0,
        x_x0_V_address0,
        x_x0_V_ce0,
        x_x0_V_q0,
        x_x1_V_address0,
        x_x1_V_ce0,
        x_x1_V_q0,
        x_x2_V_address0,
        x_x2_V_ce0,
        x_x2_V_q0,
        x_x3_V_address0,
        x_x3_V_ce0,
        x_x3_V_q0,
        x_x4_V_address0,
        x_x4_V_ce0,
        x_x4_V_q0,
        x_x5_V_address0,
        x_x5_V_ce0,
        x_x5_V_q0,
        x_x6_V_address0,
        x_x6_V_ce0,
        x_x6_V_q0,
        x_x7_V_address0,
        x_x7_V_ce0,
        x_x7_V_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] tmpy_V_address0;
output   tmpy_V_ce0;
output   tmpy_V_we0;
output  [10:0] tmpy_V_d0;
output  [8:0] x_x0_V_address0;
output   x_x0_V_ce0;
input  [7:0] x_x0_V_q0;
output  [8:0] x_x1_V_address0;
output   x_x1_V_ce0;
input  [7:0] x_x1_V_q0;
output  [8:0] x_x2_V_address0;
output   x_x2_V_ce0;
input  [7:0] x_x2_V_q0;
output  [8:0] x_x3_V_address0;
output   x_x3_V_ce0;
input  [7:0] x_x3_V_q0;
output  [8:0] x_x4_V_address0;
output   x_x4_V_ce0;
input  [7:0] x_x4_V_q0;
output  [8:0] x_x5_V_address0;
output   x_x5_V_ce0;
input  [7:0] x_x5_V_q0;
output  [8:0] x_x6_V_address0;
output   x_x6_V_ce0;
input  [7:0] x_x6_V_q0;
output  [8:0] x_x7_V_address0;
output   x_x7_V_ce0;
input  [7:0] x_x7_V_q0;

reg ap_idle;
reg tmpy_V_ce0;
reg tmpy_V_we0;
reg x_x0_V_ce0;
reg x_x1_V_ce0;
reg x_x2_V_ce0;
reg x_x3_V_ce0;
reg x_x4_V_ce0;
reg x_x5_V_ce0;
reg x_x6_V_ce0;
reg x_x7_V_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln38_fu_171_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln38_fu_183_p1;
reg   [63:0] zext_ln38_reg_293;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [8:0] i_V_fu_42;
wire   [8:0] i_fu_177_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_i_V_1;
wire  signed [8:0] sext_ln232_1_fu_204_p1;
wire  signed [8:0] sext_ln232_fu_200_p1;
wire   [8:0] ret_7_fu_208_p2;
wire  signed [9:0] sext_ln232_2_fu_214_p1;
wire  signed [9:0] sext_ln232_3_fu_218_p1;
wire   [9:0] ret_8_fu_222_p2;
wire  signed [9:0] sext_ln1540_fu_228_p1;
wire   [9:0] ret_9_fu_232_p2;
wire  signed [10:0] sext_ln1540_1_fu_238_p1;
wire  signed [10:0] sext_ln1540_2_fu_242_p1;
wire   [10:0] ret_10_fu_246_p2;
wire  signed [10:0] sext_ln1540_3_fu_252_p1;
wire   [10:0] ret_11_fu_256_p2;
wire  signed [10:0] sext_ln1540_4_fu_262_p1;
wire   [10:0] ret_12_fu_266_p2;
wire  signed [10:0] sext_ln1540_5_fu_272_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

flt_interleave_manual_seq_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln38_fu_171_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_V_fu_42 <= i_fu_177_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_V_fu_42 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_171_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln38_reg_293[8 : 0] <= zext_ln38_fu_183_p1[8 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_V_1 = 9'd0;
    end else begin
        ap_sig_allocacmp_i_V_1 = i_V_fu_42;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmpy_V_ce0 = 1'b1;
    end else begin
        tmpy_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmpy_V_we0 = 1'b1;
    end else begin
        tmpy_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x0_V_ce0 = 1'b1;
    end else begin
        x_x0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x1_V_ce0 = 1'b1;
    end else begin
        x_x1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x2_V_ce0 = 1'b1;
    end else begin
        x_x2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x3_V_ce0 = 1'b1;
    end else begin
        x_x3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x4_V_ce0 = 1'b1;
    end else begin
        x_x4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x5_V_ce0 = 1'b1;
    end else begin
        x_x5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x6_V_ce0 = 1'b1;
    end else begin
        x_x6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x7_V_ce0 = 1'b1;
    end else begin
        x_x7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_fu_177_p2 = (ap_sig_allocacmp_i_V_1 + 9'd1);

assign icmp_ln38_fu_171_p2 = ((ap_sig_allocacmp_i_V_1 == 9'd396) ? 1'b1 : 1'b0);

assign ret_10_fu_246_p2 = ($signed(sext_ln1540_1_fu_238_p1) + $signed(sext_ln1540_2_fu_242_p1));

assign ret_11_fu_256_p2 = ($signed(ret_10_fu_246_p2) + $signed(sext_ln1540_3_fu_252_p1));

assign ret_12_fu_266_p2 = ($signed(ret_11_fu_256_p2) + $signed(sext_ln1540_4_fu_262_p1));

assign ret_7_fu_208_p2 = ($signed(sext_ln232_1_fu_204_p1) + $signed(sext_ln232_fu_200_p1));

assign ret_8_fu_222_p2 = ($signed(sext_ln232_2_fu_214_p1) + $signed(sext_ln232_3_fu_218_p1));

assign ret_9_fu_232_p2 = ($signed(ret_8_fu_222_p2) + $signed(sext_ln1540_fu_228_p1));

assign sext_ln1540_1_fu_238_p1 = $signed(ret_9_fu_232_p2);

assign sext_ln1540_2_fu_242_p1 = $signed(x_x4_V_q0);

assign sext_ln1540_3_fu_252_p1 = $signed(x_x5_V_q0);

assign sext_ln1540_4_fu_262_p1 = $signed(x_x6_V_q0);

assign sext_ln1540_5_fu_272_p1 = $signed(x_x7_V_q0);

assign sext_ln1540_fu_228_p1 = $signed(x_x3_V_q0);

assign sext_ln232_1_fu_204_p1 = $signed(x_x1_V_q0);

assign sext_ln232_2_fu_214_p1 = $signed(ret_7_fu_208_p2);

assign sext_ln232_3_fu_218_p1 = $signed(x_x2_V_q0);

assign sext_ln232_fu_200_p1 = $signed(x_x0_V_q0);

assign tmpy_V_address0 = zext_ln38_reg_293;

assign tmpy_V_d0 = ($signed(ret_12_fu_266_p2) + $signed(sext_ln1540_5_fu_272_p1));

assign x_x0_V_address0 = zext_ln38_fu_183_p1;

assign x_x1_V_address0 = zext_ln38_fu_183_p1;

assign x_x2_V_address0 = zext_ln38_fu_183_p1;

assign x_x3_V_address0 = zext_ln38_fu_183_p1;

assign x_x4_V_address0 = zext_ln38_fu_183_p1;

assign x_x5_V_address0 = zext_ln38_fu_183_p1;

assign x_x6_V_address0 = zext_ln38_fu_183_p1;

assign x_x7_V_address0 = zext_ln38_fu_183_p1;

assign zext_ln38_fu_183_p1 = ap_sig_allocacmp_i_V_1;

always @ (posedge ap_clk) begin
    zext_ln38_reg_293[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //flt_interleave_manual_seq_flt_interleave_manual_seq_Pipeline_WRITE
