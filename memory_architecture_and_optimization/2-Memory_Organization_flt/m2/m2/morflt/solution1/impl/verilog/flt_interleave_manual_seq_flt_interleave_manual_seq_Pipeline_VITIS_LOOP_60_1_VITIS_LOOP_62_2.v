// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module flt_interleave_manual_seq_flt_interleave_manual_seq_Pipeline_VITIS_LOOP_60_1_VITIS_LOOP_62_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y_Addr_A,
        y_EN_A,
        y_WEN_A,
        y_Din_A,
        y_Dout_A,
        tmpy_V_address0,
        tmpy_V_ce0,
        tmpy_V_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y_Addr_A;
output   y_EN_A;
output  [1:0] y_WEN_A;
output  [15:0] y_Din_A;
input  [15:0] y_Dout_A;
output  [8:0] tmpy_V_address0;
output   tmpy_V_ce0;
input  [10:0] tmpy_V_q0;

reg ap_idle;
reg y_EN_A;
reg[1:0] y_WEN_A;
reg tmpy_V_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln60_fu_134_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln62_fu_149_p2;
reg   [0:0] icmp_ln62_reg_312;
reg   [0:0] icmp_ln62_reg_312_pp0_iter1_reg;
wire   [63:0] idx_5_cast_fu_229_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln66_1_fu_255_p1;
reg   [3:0] i_fu_60;
wire   [3:0] add_ln62_fu_167_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [8:0] idx_fu_64;
wire   [8:0] add_ln67_fu_234_p2;
reg   [8:0] idx_1_fu_68;
wire   [8:0] select_ln60_3_fu_222_p3;
reg   [5:0] k_fu_72;
wire   [5:0] select_ln60_2_fu_211_p3;
reg   [8:0] indvar_flatten23_fu_76;
wire   [8:0] add_ln60_2_fu_140_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten23_load;
wire   [31:0] y_Addr_A_orig;
wire   [3:0] select_ln60_1_fu_155_p3;
wire   [8:0] add_ln60_1_fu_198_p2;
wire   [5:0] add_ln60_fu_192_p2;
wire   [8:0] select_ln60_fu_204_p3;
wire   [8:0] grp_fu_264_p3;
wire   [3:0] grp_fu_264_p0;
wire   [5:0] grp_fu_264_p1;
wire   [5:0] grp_fu_264_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [8:0] grp_fu_264_p00;
wire   [8:0] grp_fu_264_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

flt_interleave_manual_seq_mac_muladd_4ns_6ns_6ns_9_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 9 ))
mac_muladd_4ns_6ns_6ns_9_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_264_p0),
    .din1(grp_fu_264_p1),
    .din2(grp_fu_264_p2),
    .ce(1'b1),
    .dout(grp_fu_264_p3)
);

flt_interleave_manual_seq_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln60_fu_134_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_60 <= add_ln62_fu_167_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            idx_1_fu_68 <= 9'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            idx_1_fu_68 <= select_ln60_3_fu_222_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            idx_fu_64 <= 9'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            idx_fu_64 <= add_ln67_fu_234_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln60_fu_134_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten23_fu_76 <= add_ln60_2_fu_140_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten23_fu_76 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            k_fu_72 <= 6'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            k_fu_72 <= select_ln60_2_fu_211_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln62_reg_312_pp0_iter1_reg <= icmp_ln62_reg_312;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_134_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln62_reg_312 <= icmp_ln62_fu_149_p2;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_134_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten23_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten23_load = indvar_flatten23_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmpy_V_ce0 = 1'b1;
    end else begin
        tmpy_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        y_EN_A = 1'b1;
    end else begin
        y_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        y_WEN_A = 2'd3;
    end else begin
        y_WEN_A = 2'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln60_1_fu_198_p2 = (idx_1_fu_68 + 9'd9);

assign add_ln60_2_fu_140_p2 = (ap_sig_allocacmp_indvar_flatten23_load + 9'd1);

assign add_ln60_fu_192_p2 = (k_fu_72 + 6'd1);

assign add_ln62_fu_167_p2 = (select_ln60_1_fu_155_p3 + 4'd1);

assign add_ln67_fu_234_p2 = (select_ln60_fu_204_p3 + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_264_p0 = grp_fu_264_p00;

assign grp_fu_264_p00 = select_ln60_1_fu_155_p3;

assign grp_fu_264_p1 = 9'd44;

assign grp_fu_264_p2 = grp_fu_264_p20;

assign grp_fu_264_p20 = select_ln60_2_fu_211_p3;

assign icmp_ln60_fu_134_p2 = ((ap_sig_allocacmp_indvar_flatten23_load == 9'd396) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_149_p2 = ((ap_sig_allocacmp_i_load == 4'd9) ? 1'b1 : 1'b0);

assign idx_5_cast_fu_229_p1 = select_ln60_fu_204_p3;

assign select_ln60_1_fu_155_p3 = ((icmp_ln62_fu_149_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_i_load);

assign select_ln60_2_fu_211_p3 = ((icmp_ln62_reg_312_pp0_iter1_reg[0:0] == 1'b1) ? add_ln60_fu_192_p2 : k_fu_72);

assign select_ln60_3_fu_222_p3 = ((icmp_ln62_reg_312_pp0_iter1_reg[0:0] == 1'b1) ? add_ln60_1_fu_198_p2 : idx_1_fu_68);

assign select_ln60_fu_204_p3 = ((icmp_ln62_reg_312_pp0_iter1_reg[0:0] == 1'b1) ? add_ln60_1_fu_198_p2 : idx_fu_64);

assign tmpy_V_address0 = idx_5_cast_fu_229_p1;

assign y_Addr_A = y_Addr_A_orig << 32'd1;

assign y_Addr_A_orig = zext_ln66_1_fu_255_p1;

assign y_Din_A = $signed(tmpy_V_q0);

assign zext_ln66_1_fu_255_p1 = grp_fu_264_p3;

endmodule //flt_interleave_manual_seq_flt_interleave_manual_seq_Pipeline_VITIS_LOOP_60_1_VITIS_LOOP_62_2
