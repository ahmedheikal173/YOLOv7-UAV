// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module flt_interleave_manual_seq_read_seq (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        i,
        offset,
        x_x0_V_address0,
        x_x0_V_ce0,
        x_x0_V_q0,
        x_x8_V_address0,
        x_x8_V_ce0,
        x_x8_V_q0,
        x_x1_V_address0,
        x_x1_V_ce0,
        x_x1_V_q0,
        x_x2_V_address0,
        x_x2_V_ce0,
        x_x2_V_q0,
        x_x3_V_address0,
        x_x3_V_ce0,
        x_x3_V_q0,
        x_x4_V_address0,
        x_x4_V_ce0,
        x_x4_V_q0,
        x_x5_V_address0,
        x_x5_V_ce0,
        x_x5_V_q0,
        x_x6_V_address0,
        x_x6_V_ce0,
        x_x6_V_q0,
        x_x7_V_address0,
        x_x7_V_ce0,
        x_x7_V_q0,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [8:0] i;
input  [3:0] offset;
output  [8:0] x_x0_V_address0;
output   x_x0_V_ce0;
input  [7:0] x_x0_V_q0;
output  [8:0] x_x8_V_address0;
output   x_x8_V_ce0;
input  [7:0] x_x8_V_q0;
output  [8:0] x_x1_V_address0;
output   x_x1_V_ce0;
input  [7:0] x_x1_V_q0;
output  [8:0] x_x2_V_address0;
output   x_x2_V_ce0;
input  [7:0] x_x2_V_q0;
output  [8:0] x_x3_V_address0;
output   x_x3_V_ce0;
input  [7:0] x_x3_V_q0;
output  [8:0] x_x4_V_address0;
output   x_x4_V_ce0;
input  [7:0] x_x4_V_q0;
output  [8:0] x_x5_V_address0;
output   x_x5_V_ce0;
input  [7:0] x_x5_V_q0;
output  [8:0] x_x6_V_address0;
output   x_x6_V_ce0;
input  [7:0] x_x6_V_q0;
output  [8:0] x_x7_V_address0;
output   x_x7_V_ce0;
input  [7:0] x_x7_V_q0;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg x_x0_V_ce0;
reg x_x8_V_ce0;
reg x_x1_V_ce0;
reg x_x2_V_ce0;
reg x_x3_V_ce0;
reg x_x4_V_ce0;
reg x_x5_V_ce0;
reg x_x6_V_ce0;
reg x_x7_V_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg   [3:0] offset_read_reg_340;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln587_fu_181_p1;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln10_7_fu_229_p2;
wire   [0:0] icmp_ln10_6_fu_224_p2;
wire   [0:0] icmp_ln10_5_fu_219_p2;
wire   [0:0] icmp_ln10_4_fu_214_p2;
wire   [0:0] icmp_ln10_3_fu_209_p2;
wire   [0:0] icmp_ln10_2_fu_204_p2;
wire   [0:0] icmp_ln10_1_fu_199_p2;
wire   [0:0] icmp_ln10_fu_194_p2;
wire   [0:0] or_ln10_fu_242_p2;
wire   [7:0] select_ln10_fu_234_p3;
wire   [7:0] select_ln10_1_fu_248_p3;
wire   [0:0] or_ln10_1_fu_256_p2;
wire   [0:0] or_ln10_2_fu_270_p2;
wire   [7:0] select_ln10_2_fu_262_p3;
wire   [7:0] select_ln10_3_fu_276_p3;
wire   [0:0] or_ln10_3_fu_284_p2;
wire   [0:0] or_ln10_4_fu_298_p2;
wire   [7:0] select_ln10_4_fu_290_p3;
wire   [7:0] select_ln10_5_fu_304_p3;
wire   [0:0] or_ln10_5_fu_312_p2;
wire   [0:0] or_ln10_6_fu_326_p2;
wire   [7:0] select_ln10_6_fu_318_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_reset_start_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        offset_read_reg_340 <= offset;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_start_pp0 = 1'b1;
    end else begin
        ap_reset_start_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x0_V_ce0 = 1'b1;
    end else begin
        x_x0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x1_V_ce0 = 1'b1;
    end else begin
        x_x1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x2_V_ce0 = 1'b1;
    end else begin
        x_x2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x3_V_ce0 = 1'b1;
    end else begin
        x_x3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x4_V_ce0 = 1'b1;
    end else begin
        x_x4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x5_V_ce0 = 1'b1;
    end else begin
        x_x5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x6_V_ce0 = 1'b1;
    end else begin
        x_x6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x7_V_ce0 = 1'b1;
    end else begin
        x_x7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x8_V_ce0 = 1'b1;
    end else begin
        x_x8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln10_6_fu_326_p2[0:0] == 1'b1) ? select_ln10_6_fu_318_p3 : x_x0_V_q0);

assign icmp_ln10_1_fu_199_p2 = ((offset_read_reg_340 == 4'd7) ? 1'b1 : 1'b0);

assign icmp_ln10_2_fu_204_p2 = ((offset_read_reg_340 == 4'd6) ? 1'b1 : 1'b0);

assign icmp_ln10_3_fu_209_p2 = ((offset_read_reg_340 == 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln10_4_fu_214_p2 = ((offset_read_reg_340 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln10_5_fu_219_p2 = ((offset_read_reg_340 == 4'd3) ? 1'b1 : 1'b0);

assign icmp_ln10_6_fu_224_p2 = ((offset_read_reg_340 == 4'd2) ? 1'b1 : 1'b0);

assign icmp_ln10_7_fu_229_p2 = ((offset_read_reg_340 == 4'd1) ? 1'b1 : 1'b0);

assign icmp_ln10_fu_194_p2 = ((offset_read_reg_340 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln10_1_fu_256_p2 = (icmp_ln10_5_fu_219_p2 | icmp_ln10_4_fu_214_p2);

assign or_ln10_2_fu_270_p2 = (icmp_ln10_3_fu_209_p2 | icmp_ln10_2_fu_204_p2);

assign or_ln10_3_fu_284_p2 = (icmp_ln10_fu_194_p2 | icmp_ln10_1_fu_199_p2);

assign or_ln10_4_fu_298_p2 = (or_ln10_fu_242_p2 | or_ln10_1_fu_256_p2);

assign or_ln10_5_fu_312_p2 = (or_ln10_3_fu_284_p2 | or_ln10_2_fu_270_p2);

assign or_ln10_6_fu_326_p2 = (or_ln10_5_fu_312_p2 | or_ln10_4_fu_298_p2);

assign or_ln10_fu_242_p2 = (icmp_ln10_7_fu_229_p2 | icmp_ln10_6_fu_224_p2);

assign select_ln10_1_fu_248_p3 = ((icmp_ln10_5_fu_219_p2[0:0] == 1'b1) ? x_x3_V_q0 : x_x4_V_q0);

assign select_ln10_2_fu_262_p3 = ((icmp_ln10_3_fu_209_p2[0:0] == 1'b1) ? x_x5_V_q0 : x_x6_V_q0);

assign select_ln10_3_fu_276_p3 = ((icmp_ln10_1_fu_199_p2[0:0] == 1'b1) ? x_x7_V_q0 : x_x8_V_q0);

assign select_ln10_4_fu_290_p3 = ((or_ln10_fu_242_p2[0:0] == 1'b1) ? select_ln10_fu_234_p3 : select_ln10_1_fu_248_p3);

assign select_ln10_5_fu_304_p3 = ((or_ln10_2_fu_270_p2[0:0] == 1'b1) ? select_ln10_2_fu_262_p3 : select_ln10_3_fu_276_p3);

assign select_ln10_6_fu_318_p3 = ((or_ln10_4_fu_298_p2[0:0] == 1'b1) ? select_ln10_4_fu_290_p3 : select_ln10_5_fu_304_p3);

assign select_ln10_fu_234_p3 = ((icmp_ln10_7_fu_229_p2[0:0] == 1'b1) ? x_x1_V_q0 : x_x2_V_q0);

assign x_x0_V_address0 = zext_ln587_fu_181_p1;

assign x_x1_V_address0 = zext_ln587_fu_181_p1;

assign x_x2_V_address0 = zext_ln587_fu_181_p1;

assign x_x3_V_address0 = zext_ln587_fu_181_p1;

assign x_x4_V_address0 = zext_ln587_fu_181_p1;

assign x_x5_V_address0 = zext_ln587_fu_181_p1;

assign x_x6_V_address0 = zext_ln587_fu_181_p1;

assign x_x7_V_address0 = zext_ln587_fu_181_p1;

assign x_x8_V_address0 = zext_ln587_fu_181_p1;

assign zext_ln587_fu_181_p1 = i;

endmodule //flt_interleave_manual_seq_read_seq
