-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity flt_interleave_manual_seq_read_seq is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    i : IN STD_LOGIC_VECTOR (8 downto 0);
    offset : IN STD_LOGIC_VECTOR (3 downto 0);
    x_x0_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_x0_V_ce0 : OUT STD_LOGIC;
    x_x0_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    x_x8_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_x8_V_ce0 : OUT STD_LOGIC;
    x_x8_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    x_x1_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_x1_V_ce0 : OUT STD_LOGIC;
    x_x1_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    x_x2_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_x2_V_ce0 : OUT STD_LOGIC;
    x_x2_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    x_x3_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_x3_V_ce0 : OUT STD_LOGIC;
    x_x3_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    x_x4_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_x4_V_ce0 : OUT STD_LOGIC;
    x_x4_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    x_x5_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_x5_V_ce0 : OUT STD_LOGIC;
    x_x5_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    x_x6_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_x6_V_ce0 : OUT STD_LOGIC;
    x_x6_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    x_x7_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_x7_V_ce0 : OUT STD_LOGIC;
    x_x7_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of flt_interleave_manual_seq_read_seq is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal offset_read_reg_340 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln587_fu_181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln10_7_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_6_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_5_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_4_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_3_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_2_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_1_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10_fu_234_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln10_1_fu_248_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln10_1_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10_2_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10_2_fu_262_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln10_3_fu_276_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln10_3_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10_4_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10_4_fu_290_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln10_5_fu_304_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln10_5_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10_6_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln10_6_fu_318_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_reset_start_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                offset_read_reg_340 <= offset;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_reset_start_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_start_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_start_pp0 <= ap_const_logic_1;
        else 
            ap_reset_start_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        select_ln10_6_fu_318_p3 when (or_ln10_6_fu_326_p2(0) = '1') else 
        x_x0_V_q0;
    icmp_ln10_1_fu_199_p2 <= "1" when (offset_read_reg_340 = ap_const_lv4_7) else "0";
    icmp_ln10_2_fu_204_p2 <= "1" when (offset_read_reg_340 = ap_const_lv4_6) else "0";
    icmp_ln10_3_fu_209_p2 <= "1" when (offset_read_reg_340 = ap_const_lv4_5) else "0";
    icmp_ln10_4_fu_214_p2 <= "1" when (offset_read_reg_340 = ap_const_lv4_4) else "0";
    icmp_ln10_5_fu_219_p2 <= "1" when (offset_read_reg_340 = ap_const_lv4_3) else "0";
    icmp_ln10_6_fu_224_p2 <= "1" when (offset_read_reg_340 = ap_const_lv4_2) else "0";
    icmp_ln10_7_fu_229_p2 <= "1" when (offset_read_reg_340 = ap_const_lv4_1) else "0";
    icmp_ln10_fu_194_p2 <= "1" when (offset_read_reg_340 = ap_const_lv4_8) else "0";
    or_ln10_1_fu_256_p2 <= (icmp_ln10_5_fu_219_p2 or icmp_ln10_4_fu_214_p2);
    or_ln10_2_fu_270_p2 <= (icmp_ln10_3_fu_209_p2 or icmp_ln10_2_fu_204_p2);
    or_ln10_3_fu_284_p2 <= (icmp_ln10_fu_194_p2 or icmp_ln10_1_fu_199_p2);
    or_ln10_4_fu_298_p2 <= (or_ln10_fu_242_p2 or or_ln10_1_fu_256_p2);
    or_ln10_5_fu_312_p2 <= (or_ln10_3_fu_284_p2 or or_ln10_2_fu_270_p2);
    or_ln10_6_fu_326_p2 <= (or_ln10_5_fu_312_p2 or or_ln10_4_fu_298_p2);
    or_ln10_fu_242_p2 <= (icmp_ln10_7_fu_229_p2 or icmp_ln10_6_fu_224_p2);
    select_ln10_1_fu_248_p3 <= 
        x_x3_V_q0 when (icmp_ln10_5_fu_219_p2(0) = '1') else 
        x_x4_V_q0;
    select_ln10_2_fu_262_p3 <= 
        x_x5_V_q0 when (icmp_ln10_3_fu_209_p2(0) = '1') else 
        x_x6_V_q0;
    select_ln10_3_fu_276_p3 <= 
        x_x7_V_q0 when (icmp_ln10_1_fu_199_p2(0) = '1') else 
        x_x8_V_q0;
    select_ln10_4_fu_290_p3 <= 
        select_ln10_fu_234_p3 when (or_ln10_fu_242_p2(0) = '1') else 
        select_ln10_1_fu_248_p3;
    select_ln10_5_fu_304_p3 <= 
        select_ln10_2_fu_262_p3 when (or_ln10_2_fu_270_p2(0) = '1') else 
        select_ln10_3_fu_276_p3;
    select_ln10_6_fu_318_p3 <= 
        select_ln10_4_fu_290_p3 when (or_ln10_4_fu_298_p2(0) = '1') else 
        select_ln10_5_fu_304_p3;
    select_ln10_fu_234_p3 <= 
        x_x1_V_q0 when (icmp_ln10_7_fu_229_p2(0) = '1') else 
        x_x2_V_q0;
    x_x0_V_address0 <= zext_ln587_fu_181_p1(9 - 1 downto 0);

    x_x0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_x0_V_ce0 <= ap_const_logic_1;
        else 
            x_x0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x1_V_address0 <= zext_ln587_fu_181_p1(9 - 1 downto 0);

    x_x1_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_x1_V_ce0 <= ap_const_logic_1;
        else 
            x_x1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x2_V_address0 <= zext_ln587_fu_181_p1(9 - 1 downto 0);

    x_x2_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_x2_V_ce0 <= ap_const_logic_1;
        else 
            x_x2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x3_V_address0 <= zext_ln587_fu_181_p1(9 - 1 downto 0);

    x_x3_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_x3_V_ce0 <= ap_const_logic_1;
        else 
            x_x3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x4_V_address0 <= zext_ln587_fu_181_p1(9 - 1 downto 0);

    x_x4_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_x4_V_ce0 <= ap_const_logic_1;
        else 
            x_x4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x5_V_address0 <= zext_ln587_fu_181_p1(9 - 1 downto 0);

    x_x5_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_x5_V_ce0 <= ap_const_logic_1;
        else 
            x_x5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x6_V_address0 <= zext_ln587_fu_181_p1(9 - 1 downto 0);

    x_x6_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_x6_V_ce0 <= ap_const_logic_1;
        else 
            x_x6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x7_V_address0 <= zext_ln587_fu_181_p1(9 - 1 downto 0);

    x_x7_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_x7_V_ce0 <= ap_const_logic_1;
        else 
            x_x7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_x8_V_address0 <= zext_ln587_fu_181_p1(9 - 1 downto 0);

    x_x8_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_x8_V_ce0 <= ap_const_logic_1;
        else 
            x_x8_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln587_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i),64));
end behav;
