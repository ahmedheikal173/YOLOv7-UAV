-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity flt_interleave_manual_seq_flt_interleave_manual_seq_Pipeline_VITIS_LOOP_57_1_VITIS_LOOP_59_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_EN_A : OUT STD_LOGIC;
    y_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    y_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    y_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    tmpy_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    tmpy_V_ce0 : OUT STD_LOGIC;
    tmpy_V_q0 : IN STD_LOGIC_VECTOR (10 downto 0) );
end;


architecture behav of flt_interleave_manual_seq_flt_interleave_manual_seq_Pipeline_VITIS_LOOP_57_1_VITIS_LOOP_59_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv9_18C : STD_LOGIC_VECTOR (8 downto 0) := "110001100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_9 : STD_LOGIC_VECTOR (8 downto 0) := "000001001";
    constant ap_const_lv9_2C : STD_LOGIC_VECTOR (8 downto 0) := "000101100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln57_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln59_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_304 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_304_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_5_cast_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln63_1_fu_247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_52 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln59_fu_159_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (3 downto 0);
    signal idx_fu_56 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln64_fu_226_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal idx_1_fu_60 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln57_3_fu_214_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_fu_64 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln57_2_fu_203_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten23_fu_68 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln57_2_fu_132_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten23_load : STD_LOGIC_VECTOR (8 downto 0);
    signal y_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln57_1_fu_147_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln57_1_fu_190_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln57_fu_184_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln57_fu_196_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_256_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_256_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_256_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_256_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_256_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_256_p20 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component flt_interleave_manual_seq_mac_muladd_4ns_6ns_6ns_9_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component flt_interleave_manual_seq_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_4ns_6ns_6ns_9_4_1_U23 : component flt_interleave_manual_seq_mac_muladd_4ns_6ns_6ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 4,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_256_p0,
        din1 => grp_fu_256_p1,
        din2 => grp_fu_256_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_256_p3);

    flow_control_loop_pipe_sequential_init_U : component flt_interleave_manual_seq_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln57_fu_126_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_52 <= add_ln59_fu_159_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_52 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    idx_1_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    idx_1_fu_60 <= ap_const_lv9_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    idx_1_fu_60 <= select_ln57_3_fu_214_p3;
                end if;
            end if; 
        end if;
    end process;

    idx_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    idx_fu_56 <= ap_const_lv9_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    idx_fu_56 <= add_ln64_fu_226_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten23_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln57_fu_126_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten23_fu_68 <= add_ln57_2_fu_132_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten23_fu_68 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    k_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    k_fu_64 <= ap_const_lv6_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    k_fu_64 <= select_ln57_2_fu_203_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln59_reg_304_pp0_iter1_reg <= icmp_ln59_reg_304;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_126_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln59_reg_304 <= icmp_ln59_fu_141_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln57_1_fu_190_p2 <= std_logic_vector(unsigned(idx_1_fu_60) + unsigned(ap_const_lv9_9));
    add_ln57_2_fu_132_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten23_load) + unsigned(ap_const_lv9_1));
    add_ln57_fu_184_p2 <= std_logic_vector(unsigned(k_fu_64) + unsigned(ap_const_lv6_1));
    add_ln59_fu_159_p2 <= std_logic_vector(unsigned(select_ln57_1_fu_147_p3) + unsigned(ap_const_lv4_1));
    add_ln64_fu_226_p2 <= std_logic_vector(unsigned(select_ln57_fu_196_p3) + unsigned(ap_const_lv9_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln57_fu_126_p2)
    begin
        if (((icmp_ln57_fu_126_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_52, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_52;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten23_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten23_fu_68)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten23_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten23_load <= indvar_flatten23_fu_68;
        end if; 
    end process;

    grp_fu_256_p0 <= grp_fu_256_p00(4 - 1 downto 0);
    grp_fu_256_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_1_fu_147_p3),9));
    grp_fu_256_p1 <= ap_const_lv9_2C(6 - 1 downto 0);
    grp_fu_256_p2 <= grp_fu_256_p20(6 - 1 downto 0);
    grp_fu_256_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_2_fu_203_p3),9));
    icmp_ln57_fu_126_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten23_load = ap_const_lv9_18C) else "0";
    icmp_ln59_fu_141_p2 <= "1" when (ap_sig_allocacmp_i_load = ap_const_lv4_9) else "0";
    idx_5_cast_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_fu_196_p3),64));
    select_ln57_1_fu_147_p3 <= 
        ap_const_lv4_0 when (icmp_ln59_fu_141_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln57_2_fu_203_p3 <= 
        add_ln57_fu_184_p2 when (icmp_ln59_reg_304_pp0_iter1_reg(0) = '1') else 
        k_fu_64;
    select_ln57_3_fu_214_p3 <= 
        add_ln57_1_fu_190_p2 when (icmp_ln59_reg_304_pp0_iter1_reg(0) = '1') else 
        idx_1_fu_60;
    select_ln57_fu_196_p3 <= 
        add_ln57_1_fu_190_p2 when (icmp_ln59_reg_304_pp0_iter1_reg(0) = '1') else 
        idx_fu_56;
    tmpy_V_address0 <= idx_5_cast_fu_221_p1(9 - 1 downto 0);

    tmpy_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            tmpy_V_ce0 <= ap_const_logic_1;
        else 
            tmpy_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_Addr_A <= std_logic_vector(shift_left(unsigned(y_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    y_Addr_A_orig <= zext_ln63_1_fu_247_p1(32 - 1 downto 0);
        y_Din_A <= std_logic_vector(IEEE.numeric_std.resize(signed(tmpy_V_q0),16));


    y_EN_A_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_EN_A <= ap_const_logic_1;
        else 
            y_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    y_WEN_A_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_WEN_A <= ap_const_lv2_3;
        else 
            y_WEN_A <= ap_const_lv2_0;
        end if; 
    end process;

    zext_ln63_1_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_256_p3),64));
end behav;
