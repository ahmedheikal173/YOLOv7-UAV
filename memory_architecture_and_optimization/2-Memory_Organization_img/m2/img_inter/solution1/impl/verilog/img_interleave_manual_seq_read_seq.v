// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module img_interleave_manual_seq_read_seq (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        i,
        offset,
        x_x0_V_address0,
        x_x0_V_ce0,
        x_x0_V_q0,
        x_x1_V_address0,
        x_x1_V_ce0,
        x_x1_V_q0,
        x_x2_V_address0,
        x_x2_V_ce0,
        x_x2_V_q0,
        x_x3_V_address0,
        x_x3_V_ce0,
        x_x3_V_q0,
        x_x4_V_address0,
        x_x4_V_ce0,
        x_x4_V_q0,
        x_x5_V_address0,
        x_x5_V_ce0,
        x_x5_V_q0,
        x_x6_V_address0,
        x_x6_V_ce0,
        x_x6_V_q0,
        x_x7_V_address0,
        x_x7_V_ce0,
        x_x7_V_q0,
        x_x8_V_address0,
        x_x8_V_ce0,
        x_x8_V_q0,
        x_x9_V_address0,
        x_x9_V_ce0,
        x_x9_V_q0,
        x_x10_V_address0,
        x_x10_V_ce0,
        x_x10_V_q0,
        x_x11_V_address0,
        x_x11_V_ce0,
        x_x11_V_q0,
        x_x12_V_address0,
        x_x12_V_ce0,
        x_x12_V_q0,
        x_x13_V_address0,
        x_x13_V_ce0,
        x_x13_V_q0,
        x_x14_V_address0,
        x_x14_V_ce0,
        x_x14_V_q0,
        x_x15_V_address0,
        x_x15_V_ce0,
        x_x15_V_q0,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [16:0] i;
input  [3:0] offset;
output  [16:0] x_x0_V_address0;
output   x_x0_V_ce0;
input  [7:0] x_x0_V_q0;
output  [16:0] x_x1_V_address0;
output   x_x1_V_ce0;
input  [7:0] x_x1_V_q0;
output  [16:0] x_x2_V_address0;
output   x_x2_V_ce0;
input  [7:0] x_x2_V_q0;
output  [16:0] x_x3_V_address0;
output   x_x3_V_ce0;
input  [7:0] x_x3_V_q0;
output  [16:0] x_x4_V_address0;
output   x_x4_V_ce0;
input  [7:0] x_x4_V_q0;
output  [16:0] x_x5_V_address0;
output   x_x5_V_ce0;
input  [7:0] x_x5_V_q0;
output  [16:0] x_x6_V_address0;
output   x_x6_V_ce0;
input  [7:0] x_x6_V_q0;
output  [16:0] x_x7_V_address0;
output   x_x7_V_ce0;
input  [7:0] x_x7_V_q0;
output  [16:0] x_x8_V_address0;
output   x_x8_V_ce0;
input  [7:0] x_x8_V_q0;
output  [16:0] x_x9_V_address0;
output   x_x9_V_ce0;
input  [7:0] x_x9_V_q0;
output  [16:0] x_x10_V_address0;
output   x_x10_V_ce0;
input  [7:0] x_x10_V_q0;
output  [16:0] x_x11_V_address0;
output   x_x11_V_ce0;
input  [7:0] x_x11_V_q0;
output  [16:0] x_x12_V_address0;
output   x_x12_V_ce0;
input  [7:0] x_x12_V_q0;
output  [16:0] x_x13_V_address0;
output   x_x13_V_ce0;
input  [7:0] x_x13_V_q0;
output  [16:0] x_x14_V_address0;
output   x_x14_V_ce0;
input  [7:0] x_x14_V_q0;
output  [16:0] x_x15_V_address0;
output   x_x15_V_ce0;
input  [7:0] x_x15_V_q0;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg x_x0_V_ce0;
reg x_x1_V_ce0;
reg x_x2_V_ce0;
reg x_x3_V_ce0;
reg x_x4_V_ce0;
reg x_x5_V_ce0;
reg x_x6_V_ce0;
reg x_x7_V_ce0;
reg x_x8_V_ce0;
reg x_x9_V_ce0;
reg x_x10_V_ce0;
reg x_x11_V_ce0;
reg x_x12_V_ce0;
reg x_x13_V_ce0;
reg x_x14_V_ce0;
reg x_x15_V_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg   [3:0] offset_read_reg_433;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] ap_phi_mux_agg_result_0_phi_fu_303_p32;
wire   [7:0] ap_phi_reg_pp0_iter1_agg_result_0_reg_300;
wire   [63:0] zext_ln587_14_fu_353_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln587_13_fu_358_p1;
wire   [63:0] zext_ln587_12_fu_363_p1;
wire   [63:0] zext_ln587_11_fu_368_p1;
wire   [63:0] zext_ln587_10_fu_373_p1;
wire   [63:0] zext_ln587_9_fu_378_p1;
wire   [63:0] zext_ln587_8_fu_383_p1;
wire   [63:0] zext_ln587_7_fu_388_p1;
wire   [63:0] zext_ln587_6_fu_393_p1;
wire   [63:0] zext_ln587_5_fu_398_p1;
wire   [63:0] zext_ln587_4_fu_403_p1;
wire   [63:0] zext_ln587_3_fu_408_p1;
wire   [63:0] zext_ln587_2_fu_413_p1;
wire   [63:0] zext_ln587_1_fu_418_p1;
wire   [63:0] zext_ln587_15_fu_423_p1;
wire   [63:0] zext_ln587_fu_428_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_reset_start_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        offset_read_reg_433 <= offset;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((offset_read_reg_433 == 4'd0)) begin
        ap_phi_mux_agg_result_0_phi_fu_303_p32 = x_x0_V_q0;
    end else if ((offset_read_reg_433 == 4'd1)) begin
        ap_phi_mux_agg_result_0_phi_fu_303_p32 = x_x1_V_q0;
    end else if ((offset_read_reg_433 == 4'd2)) begin
        ap_phi_mux_agg_result_0_phi_fu_303_p32 = x_x2_V_q0;
    end else if ((offset_read_reg_433 == 4'd3)) begin
        ap_phi_mux_agg_result_0_phi_fu_303_p32 = x_x3_V_q0;
    end else if ((offset_read_reg_433 == 4'd4)) begin
        ap_phi_mux_agg_result_0_phi_fu_303_p32 = x_x4_V_q0;
    end else if ((offset_read_reg_433 == 4'd5)) begin
        ap_phi_mux_agg_result_0_phi_fu_303_p32 = x_x5_V_q0;
    end else if ((offset_read_reg_433 == 4'd6)) begin
        ap_phi_mux_agg_result_0_phi_fu_303_p32 = x_x6_V_q0;
    end else if ((offset_read_reg_433 == 4'd7)) begin
        ap_phi_mux_agg_result_0_phi_fu_303_p32 = x_x7_V_q0;
    end else if ((offset_read_reg_433 == 4'd8)) begin
        ap_phi_mux_agg_result_0_phi_fu_303_p32 = x_x8_V_q0;
    end else if ((offset_read_reg_433 == 4'd9)) begin
        ap_phi_mux_agg_result_0_phi_fu_303_p32 = x_x9_V_q0;
    end else if ((offset_read_reg_433 == 4'd10)) begin
        ap_phi_mux_agg_result_0_phi_fu_303_p32 = x_x10_V_q0;
    end else if ((offset_read_reg_433 == 4'd11)) begin
        ap_phi_mux_agg_result_0_phi_fu_303_p32 = x_x11_V_q0;
    end else if ((offset_read_reg_433 == 4'd12)) begin
        ap_phi_mux_agg_result_0_phi_fu_303_p32 = x_x12_V_q0;
    end else if ((offset_read_reg_433 == 4'd13)) begin
        ap_phi_mux_agg_result_0_phi_fu_303_p32 = x_x13_V_q0;
    end else if ((offset_read_reg_433 == 4'd14)) begin
        ap_phi_mux_agg_result_0_phi_fu_303_p32 = x_x14_V_q0;
    end else if ((offset_read_reg_433 == 4'd15)) begin
        ap_phi_mux_agg_result_0_phi_fu_303_p32 = x_x15_V_q0;
    end else begin
        ap_phi_mux_agg_result_0_phi_fu_303_p32 = ap_phi_reg_pp0_iter1_agg_result_0_reg_300;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_start_pp0 = 1'b1;
    end else begin
        ap_reset_start_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x0_V_ce0 = 1'b1;
    end else begin
        x_x0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x10_V_ce0 = 1'b1;
    end else begin
        x_x10_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x11_V_ce0 = 1'b1;
    end else begin
        x_x11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x12_V_ce0 = 1'b1;
    end else begin
        x_x12_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x13_V_ce0 = 1'b1;
    end else begin
        x_x13_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x14_V_ce0 = 1'b1;
    end else begin
        x_x14_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x15_V_ce0 = 1'b1;
    end else begin
        x_x15_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x1_V_ce0 = 1'b1;
    end else begin
        x_x1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x2_V_ce0 = 1'b1;
    end else begin
        x_x2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x3_V_ce0 = 1'b1;
    end else begin
        x_x3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x4_V_ce0 = 1'b1;
    end else begin
        x_x4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x5_V_ce0 = 1'b1;
    end else begin
        x_x5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x6_V_ce0 = 1'b1;
    end else begin
        x_x6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x7_V_ce0 = 1'b1;
    end else begin
        x_x7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x8_V_ce0 = 1'b1;
    end else begin
        x_x8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_x9_V_ce0 = 1'b1;
    end else begin
        x_x9_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter1_agg_result_0_reg_300 = 'bx;

assign ap_return = ap_phi_mux_agg_result_0_phi_fu_303_p32;

assign x_x0_V_address0 = zext_ln587_fu_428_p1;

assign x_x10_V_address0 = zext_ln587_10_fu_373_p1;

assign x_x11_V_address0 = zext_ln587_11_fu_368_p1;

assign x_x12_V_address0 = zext_ln587_12_fu_363_p1;

assign x_x13_V_address0 = zext_ln587_13_fu_358_p1;

assign x_x14_V_address0 = zext_ln587_14_fu_353_p1;

assign x_x15_V_address0 = zext_ln587_15_fu_423_p1;

assign x_x1_V_address0 = zext_ln587_1_fu_418_p1;

assign x_x2_V_address0 = zext_ln587_2_fu_413_p1;

assign x_x3_V_address0 = zext_ln587_3_fu_408_p1;

assign x_x4_V_address0 = zext_ln587_4_fu_403_p1;

assign x_x5_V_address0 = zext_ln587_5_fu_398_p1;

assign x_x6_V_address0 = zext_ln587_6_fu_393_p1;

assign x_x7_V_address0 = zext_ln587_7_fu_388_p1;

assign x_x8_V_address0 = zext_ln587_8_fu_383_p1;

assign x_x9_V_address0 = zext_ln587_9_fu_378_p1;

assign zext_ln587_10_fu_373_p1 = i;

assign zext_ln587_11_fu_368_p1 = i;

assign zext_ln587_12_fu_363_p1 = i;

assign zext_ln587_13_fu_358_p1 = i;

assign zext_ln587_14_fu_353_p1 = i;

assign zext_ln587_15_fu_423_p1 = i;

assign zext_ln587_1_fu_418_p1 = i;

assign zext_ln587_2_fu_413_p1 = i;

assign zext_ln587_3_fu_408_p1 = i;

assign zext_ln587_4_fu_403_p1 = i;

assign zext_ln587_5_fu_398_p1 = i;

assign zext_ln587_6_fu_393_p1 = i;

assign zext_ln587_7_fu_388_p1 = i;

assign zext_ln587_8_fu_383_p1 = i;

assign zext_ln587_9_fu_378_p1 = i;

assign zext_ln587_fu_428_p1 = i;

endmodule //img_interleave_manual_seq_read_seq
