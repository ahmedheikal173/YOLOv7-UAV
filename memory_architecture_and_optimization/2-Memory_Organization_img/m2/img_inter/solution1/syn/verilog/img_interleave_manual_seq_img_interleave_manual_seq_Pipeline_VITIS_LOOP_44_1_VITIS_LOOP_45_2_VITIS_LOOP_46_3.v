// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module img_interleave_manual_seq_img_interleave_manual_seq_Pipeline_VITIS_LOOP_44_1_VITIS_LOOP_45_2_VITIS_LOOP_46_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y_Addr_A,
        y_EN_A,
        y_WEN_A,
        y_Din_A,
        y_Dout_A,
        tmpy_V_address0,
        tmpy_V_ce0,
        tmpy_V_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y_Addr_A;
output   y_EN_A;
output  [3:0] y_WEN_A;
output  [31:0] y_Din_A;
input  [31:0] y_Dout_A;
output  [16:0] tmpy_V_address0;
output   tmpy_V_ce0;
input  [11:0] tmpy_V_q0;

reg ap_idle;
reg y_EN_A;
reg[3:0] y_WEN_A;
reg tmpy_V_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln44_fu_177_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln45_fu_210_p2;
reg   [0:0] icmp_ln45_reg_544;
wire   [0:0] and_ln44_fu_244_p2;
reg   [0:0] and_ln44_reg_550;
wire   [5:0] select_ln45_1_fu_278_p3;
reg   [5:0] select_ln45_1_reg_555;
wire   [63:0] idx_5_cast_fu_294_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln47_3_fu_465_p1;
reg   [5:0] j_fu_76;
wire   [5:0] add_ln46_fu_305_p2;
wire    ap_loop_init;
reg   [16:0] idx_fu_80;
wire   [16:0] add_ln48_fu_299_p2;
reg   [9:0] i_fu_84;
wire   [9:0] select_ln45_2_fu_391_p3;
reg   [16:0] idx_1_fu_88;
wire   [16:0] select_ln45_3_fu_286_p3;
reg   [15:0] indvar_flatten23_fu_92;
wire   [15:0] select_ln45_4_fu_317_p3;
reg   [1:0] k_fu_96;
wire   [1:0] select_ln44_3_fu_374_p3;
reg   [16:0] indvars_iv547_fu_100;
wire   [16:0] select_ln44_4_fu_250_p3;
reg   [16:0] indvar_flatten39_fu_104;
wire   [16:0] add_ln44_2_fu_183_p2;
wire   [31:0] y_Addr_A_orig;
wire   [16:0] add_ln44_1_fu_204_p2;
wire   [0:0] icmp_ln46_fu_238_p2;
wire   [0:0] xor_ln44_fu_232_p2;
wire   [16:0] select_ln44_fu_216_p3;
wire   [16:0] add_ln45_1_fu_258_p2;
wire   [16:0] select_ln44_2_fu_224_p3;
wire   [0:0] or_ln45_fu_272_p2;
wire   [16:0] select_ln45_fu_264_p3;
wire   [15:0] add_ln45_2_fu_311_p2;
wire   [1:0] add_ln44_fu_361_p2;
wire   [9:0] select_ln44_1_fu_367_p3;
wire   [9:0] add_ln45_fu_385_p2;
wire   [14:0] tmp_fu_398_p3;
wire   [12:0] tmp_1_fu_410_p3;
wire   [61:0] zext_ln47_fu_406_p1;
wire   [61:0] zext_ln47_1_fu_418_p1;
wire   [61:0] add_ln47_fu_422_p2;
wire   [61:0] zext_ln47_2_fu_428_p1;
wire   [61:0] add_ln47_1_fu_431_p2;
wire   [14:0] trunc_ln47_1_fu_441_p1;
wire   [16:0] p_shl4_cast_fu_445_p3;
wire   [16:0] trunc_ln47_fu_437_p1;
wire   [16:0] sub_ln47_fu_453_p2;
wire   [16:0] zext_ln45_fu_381_p1;
wire   [16:0] add_ln47_2_fu_459_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

img_interleave_manual_seq_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            i_fu_84 <= 10'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            i_fu_84 <= select_ln45_2_fu_391_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            idx_1_fu_88 <= 17'd0;
        end else if (((icmp_ln44_fu_177_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            idx_1_fu_88 <= select_ln45_3_fu_286_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            idx_fu_80 <= 17'd0;
        end else if (((icmp_ln44_fu_177_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            idx_fu_80 <= add_ln48_fu_299_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten23_fu_92 <= 16'd0;
        end else if (((icmp_ln44_fu_177_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten23_fu_92 <= select_ln45_4_fu_317_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten39_fu_104 <= 17'd0;
        end else if (((icmp_ln44_fu_177_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten39_fu_104 <= add_ln44_2_fu_183_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvars_iv547_fu_100 <= 17'd0;
        end else if (((icmp_ln44_fu_177_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvars_iv547_fu_100 <= select_ln44_4_fu_250_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_76 <= 6'd0;
        end else if (((icmp_ln44_fu_177_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_76 <= add_ln46_fu_305_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            k_fu_96 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            k_fu_96 <= select_ln44_3_fu_374_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_177_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln44_reg_550 <= and_ln44_fu_244_p2;
        icmp_ln45_reg_544 <= icmp_ln45_fu_210_p2;
        select_ln45_1_reg_555 <= select_ln45_1_fu_278_p3;
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_177_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmpy_V_ce0 = 1'b1;
    end else begin
        tmpy_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        y_EN_A = 1'b1;
    end else begin
        y_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        y_WEN_A = 4'd15;
    end else begin
        y_WEN_A = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln44_1_fu_204_p2 = (indvars_iv547_fu_100 + 17'd25600);

assign add_ln44_2_fu_183_p2 = (indvar_flatten39_fu_104 + 17'd1);

assign add_ln44_fu_361_p2 = (k_fu_96 + 2'd1);

assign add_ln45_1_fu_258_p2 = (select_ln44_fu_216_p3 + 17'd40);

assign add_ln45_2_fu_311_p2 = (indvar_flatten23_fu_92 + 16'd1);

assign add_ln45_fu_385_p2 = (select_ln44_1_fu_367_p3 + 10'd1);

assign add_ln46_fu_305_p2 = (select_ln45_1_fu_278_p3 + 6'd1);

assign add_ln47_1_fu_431_p2 = (add_ln47_fu_422_p2 + zext_ln47_2_fu_428_p1);

assign add_ln47_2_fu_459_p2 = (sub_ln47_fu_453_p2 + zext_ln45_fu_381_p1);

assign add_ln47_fu_422_p2 = (zext_ln47_fu_406_p1 + zext_ln47_1_fu_418_p1);

assign add_ln48_fu_299_p2 = (select_ln45_fu_264_p3 + 17'd1);

assign and_ln44_fu_244_p2 = (xor_ln44_fu_232_p2 & icmp_ln46_fu_238_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln44_fu_177_p2 = ((indvar_flatten39_fu_104 == 17'd76800) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_210_p2 = ((indvar_flatten23_fu_92 == 16'd25600) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_238_p2 = ((j_fu_76 == 6'd40) ? 1'b1 : 1'b0);

assign idx_5_cast_fu_294_p1 = select_ln45_fu_264_p3;

assign or_ln45_fu_272_p2 = (icmp_ln45_fu_210_p2 | and_ln44_fu_244_p2);

assign p_shl4_cast_fu_445_p3 = {{trunc_ln47_1_fu_441_p1}, {2'd0}};

assign select_ln44_1_fu_367_p3 = ((icmp_ln45_reg_544[0:0] == 1'b1) ? 10'd0 : i_fu_84);

assign select_ln44_2_fu_224_p3 = ((icmp_ln45_fu_210_p2[0:0] == 1'b1) ? add_ln44_1_fu_204_p2 : idx_fu_80);

assign select_ln44_3_fu_374_p3 = ((icmp_ln45_reg_544[0:0] == 1'b1) ? add_ln44_fu_361_p2 : k_fu_96);

assign select_ln44_4_fu_250_p3 = ((icmp_ln45_fu_210_p2[0:0] == 1'b1) ? add_ln44_1_fu_204_p2 : indvars_iv547_fu_100);

assign select_ln44_fu_216_p3 = ((icmp_ln45_fu_210_p2[0:0] == 1'b1) ? add_ln44_1_fu_204_p2 : idx_1_fu_88);

assign select_ln45_1_fu_278_p3 = ((or_ln45_fu_272_p2[0:0] == 1'b1) ? 6'd0 : j_fu_76);

assign select_ln45_2_fu_391_p3 = ((and_ln44_reg_550[0:0] == 1'b1) ? add_ln45_fu_385_p2 : select_ln44_1_fu_367_p3);

assign select_ln45_3_fu_286_p3 = ((and_ln44_fu_244_p2[0:0] == 1'b1) ? add_ln45_1_fu_258_p2 : select_ln44_fu_216_p3);

assign select_ln45_4_fu_317_p3 = ((icmp_ln45_fu_210_p2[0:0] == 1'b1) ? 16'd1 : add_ln45_2_fu_311_p2);

assign select_ln45_fu_264_p3 = ((and_ln44_fu_244_p2[0:0] == 1'b1) ? add_ln45_1_fu_258_p2 : select_ln44_2_fu_224_p3);

assign sub_ln47_fu_453_p2 = (p_shl4_cast_fu_445_p3 - trunc_ln47_fu_437_p1);

assign tmp_1_fu_410_p3 = {{select_ln45_2_fu_391_p3}, {3'd0}};

assign tmp_fu_398_p3 = {{select_ln45_2_fu_391_p3}, {5'd0}};

assign tmpy_V_address0 = idx_5_cast_fu_294_p1;

assign trunc_ln47_1_fu_441_p1 = add_ln47_1_fu_431_p2[14:0];

assign trunc_ln47_fu_437_p1 = add_ln47_1_fu_431_p2[16:0];

assign xor_ln44_fu_232_p2 = (icmp_ln45_fu_210_p2 ^ 1'd1);

assign y_Addr_A = y_Addr_A_orig << 32'd2;

assign y_Addr_A_orig = zext_ln47_3_fu_465_p1;

assign y_Din_A = $signed(tmpy_V_q0);

assign zext_ln45_fu_381_p1 = select_ln44_3_fu_374_p3;

assign zext_ln47_1_fu_418_p1 = tmp_1_fu_410_p3;

assign zext_ln47_2_fu_428_p1 = select_ln45_1_reg_555;

assign zext_ln47_3_fu_465_p1 = add_ln47_2_fu_459_p2;

assign zext_ln47_fu_406_p1 = tmp_fu_398_p3;

endmodule //img_interleave_manual_seq_img_interleave_manual_seq_Pipeline_VITIS_LOOP_44_1_VITIS_LOOP_45_2_VITIS_LOOP_46_3
