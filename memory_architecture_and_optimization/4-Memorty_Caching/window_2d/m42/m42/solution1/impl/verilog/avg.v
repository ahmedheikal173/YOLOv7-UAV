// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="avg_avg,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.909250,HLS_SYN_LAT=1228802,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=143,HLS_SYN_LUT=544,HLS_VERSION=2021_2}" *)

module avg (
        ap_local_block,
        ap_clk,
        ap_rst_n,
        din_Addr_A,
        din_EN_A,
        din_WEN_A,
        din_Din_A,
        din_Dout_A,
        din_Clk_A,
        din_Rst_A,
        din_Addr_B,
        din_EN_B,
        din_WEN_B,
        din_Din_B,
        din_Dout_B,
        din_Clk_B,
        din_Rst_B,
        dout_Addr_A,
        dout_EN_A,
        dout_WEN_A,
        dout_Din_A,
        dout_Dout_A,
        dout_Clk_A,
        dout_Rst_A,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

output   ap_local_block;
input   ap_clk;
input   ap_rst_n;
output  [31:0] din_Addr_A;
output   din_EN_A;
output  [0:0] din_WEN_A;
output  [7:0] din_Din_A;
input  [7:0] din_Dout_A;
output   din_Clk_A;
output   din_Rst_A;
output  [31:0] din_Addr_B;
output   din_EN_B;
output  [0:0] din_WEN_B;
output  [7:0] din_Din_B;
input  [7:0] din_Dout_B;
output   din_Clk_B;
output   din_Rst_B;
output  [31:0] dout_Addr_A;
output   dout_EN_A;
output  [0:0] dout_WEN_A;
output  [7:0] dout_Din_A;
input  [7:0] dout_Dout_A;
output   dout_Clk_A;
output   dout_Rst_A;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg din_EN_A;
reg din_EN_B;
reg dout_EN_A;
reg[0:0] dout_WEN_A;

wire   [0:0] ap_local_deadlock;
(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_done;
wire    ap_continue;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln22_fu_217_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire   [63:0] zext_ln455_5_fu_415_p1;
reg   [63:0] zext_ln455_5_reg_521;
wire   [18:0] add_ln455_5_fu_420_p2;
reg   [18:0] add_ln455_5_reg_531;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [7:0] tmp_13_reg_541;
reg   [7:0] tmp_14_reg_546;
wire   [63:0] zext_ln455_4_fu_404_p1;
wire   [63:0] zext_ln455_6_fu_447_p1;
reg   [9:0] c_fu_86;
wire   [9:0] add_ln24_fu_426_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_c_load;
reg   [9:0] r_fu_90;
wire   [9:0] select_ln22_1_fu_246_p3;
reg   [9:0] ap_sig_allocacmp_r_1;
reg   [18:0] indvar_flatten_fu_94;
wire   [18:0] add_ln22_fu_223_p2;
reg   [18:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [31:0] din_Addr_B_orig;
reg   [31:0] din_Addr_A_orig;
wire   [31:0] dout_Addr_A_orig;
wire   [10:0] zext_ln22_fu_165_p1;
wire   [10:0] empty_fu_169_p2;
wire   [0:0] tmp_5_fu_181_p3;
wire   [9:0] add_ln7_fu_189_p2;
wire   [9:0] indvars_iv_next175_fu_175_p2;
wire   [0:0] icmp_ln9_fu_203_p2;
wire   [0:0] icmp_ln24_fu_232_p2;
wire   [16:0] tmp_3_fu_262_p3;
wire   [18:0] tmp_2_fu_254_p3;
wire   [18:0] zext_ln455_fu_270_p1;
wire   [10:0] zext_ln22_1_fu_280_p1;
wire   [10:0] p_mid1_fu_284_p2;
wire   [0:0] tmp_7_fu_296_p3;
wire   [9:0] select_ln7_fu_304_p3;
wire   [9:0] tmp_fu_195_p3;
wire   [9:0] select_ln22_2_fu_312_p3;
wire   [16:0] tmp_8_fu_328_p3;
wire   [18:0] tmp_4_fu_320_p3;
wire   [18:0] zext_ln455_1_fu_336_p1;
wire   [9:0] indvars_iv_next175_mid1_fu_290_p2;
wire   [0:0] icmp_ln9_1_fu_346_p2;
wire   [9:0] select_ln9_fu_352_p3;
wire   [9:0] tmp_6_fu_209_p3;
wire   [9:0] select_ln22_3_fu_360_p3;
wire   [16:0] tmp_s_fu_376_p3;
wire   [18:0] tmp_9_fu_368_p3;
wire   [18:0] zext_ln455_2_fu_384_p1;
wire   [9:0] select_ln22_fu_238_p3;
wire   [18:0] add_ln455_1_fu_340_p2;
wire   [18:0] zext_ln455_3_fu_394_p1;
wire   [18:0] add_ln455_3_fu_398_p2;
wire   [18:0] add_ln455_fu_274_p2;
wire   [18:0] add_ln455_4_fu_409_p2;
wire   [18:0] add_ln455_2_fu_388_p2;
wire   [8:0] r_V_fu_451_p3;
wire   [9:0] zext_ln1245_1_fu_461_p1;
wire   [9:0] zext_ln1245_fu_458_p1;
wire   [9:0] ret_V_fu_465_p2;
wire   [9:0] zext_ln1245_2_fu_471_p1;
wire   [9:0] ret_V_1_fu_475_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_start_int;
reg    ap_condition_388;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 3'd1;
#0 ap_done_reg = 1'b0;
end

avg_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle),
    .ap_local_deadlock(ap_local_deadlock)
);

avg_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_exit_ready == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_388)) begin
        if ((icmp_ln22_fu_217_p2 == 1'd0)) begin
            c_fu_86 <= add_ln24_fu_426_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            c_fu_86 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_388)) begin
        if ((icmp_ln22_fu_217_p2 == 1'd0)) begin
            indvar_flatten_fu_94 <= add_ln22_fu_223_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_94 <= 19'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_388)) begin
        if ((icmp_ln22_fu_217_p2 == 1'd0)) begin
            r_fu_90 <= select_ln22_1_fu_246_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            r_fu_90 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln22_fu_217_p2 == 1'd0))) begin
        add_ln455_5_reg_531 <= add_ln455_5_fu_420_p2;
        zext_ln455_5_reg_521[18 : 0] <= zext_ln455_5_fu_415_p1[18 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_13_reg_541 <= din_Dout_B;
        tmp_14_reg_546 <= din_Dout_A;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln22_fu_217_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_exit_ready == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_c_load = 10'd0;
    end else begin
        ap_sig_allocacmp_c_load = c_fu_86;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 19'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_94;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_r_1 = 10'd0;
    end else begin
        ap_sig_allocacmp_r_1 = r_fu_90;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        din_Addr_A_orig = zext_ln455_6_fu_447_p1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (icmp_ln22_fu_217_p2 == 1'd0))) begin
        din_Addr_A_orig = zext_ln455_5_fu_415_p1;
    end else begin
        din_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln22_fu_217_p2 == 1'd0)))) begin
        din_EN_A = 1'b1;
    end else begin
        din_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        din_EN_B = 1'b1;
    end else begin
        din_EN_B = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dout_EN_A = 1'b1;
    end else begin
        dout_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dout_WEN_A = 1'd1;
    end else begin
        dout_WEN_A = 1'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln22_fu_217_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_fu_223_p2 = (ap_sig_allocacmp_indvar_flatten_load + 19'd1);

assign add_ln24_fu_426_p2 = (select_ln22_fu_238_p3 + 10'd1);

assign add_ln455_1_fu_340_p2 = (tmp_4_fu_320_p3 + zext_ln455_1_fu_336_p1);

assign add_ln455_2_fu_388_p2 = (tmp_9_fu_368_p3 + zext_ln455_2_fu_384_p1);

assign add_ln455_3_fu_398_p2 = (add_ln455_1_fu_340_p2 + zext_ln455_3_fu_394_p1);

assign add_ln455_4_fu_409_p2 = (add_ln455_fu_274_p2 + zext_ln455_3_fu_394_p1);

assign add_ln455_5_fu_420_p2 = (add_ln455_2_fu_388_p2 + zext_ln455_3_fu_394_p1);

assign add_ln455_fu_274_p2 = (tmp_2_fu_254_p3 + zext_ln455_fu_270_p1);

assign add_ln7_fu_189_p2 = ($signed(ap_sig_allocacmp_r_1) + $signed(10'd1023));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_388 = (~((ap_start_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1));
end

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'd0;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign din_Addr_A = din_Addr_A_orig << 32'd0;

assign din_Addr_B = din_Addr_B_orig << 32'd0;

assign din_Addr_B_orig = zext_ln455_4_fu_404_p1;

assign din_Clk_A = ap_clk;

assign din_Clk_B = ap_clk;

assign din_Din_A = 8'd0;

assign din_Din_B = 8'd0;

assign din_Rst_A = ap_rst_n_inv;

assign din_Rst_B = ap_rst_n_inv;

assign din_WEN_A = 1'd0;

assign din_WEN_B = 1'd0;

assign dout_Addr_A = dout_Addr_A_orig << 32'd0;

assign dout_Addr_A_orig = zext_ln455_5_reg_521;

assign dout_Clk_A = ap_clk;

assign dout_Din_A = {{ret_V_1_fu_475_p2[9:2]}};

assign dout_Rst_A = ap_rst_n_inv;

assign empty_fu_169_p2 = ($signed(zext_ln22_fu_165_p1) + $signed(11'd2047));

assign icmp_ln22_fu_217_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 19'd409600) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_232_p2 = ((ap_sig_allocacmp_c_load == 10'd640) ? 1'b1 : 1'b0);

assign icmp_ln9_1_fu_346_p2 = ((indvars_iv_next175_mid1_fu_290_p2 > 10'd639) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_203_p2 = ((indvars_iv_next175_fu_175_p2 > 10'd639) ? 1'b1 : 1'b0);

assign indvars_iv_next175_fu_175_p2 = (ap_sig_allocacmp_r_1 + 10'd1);

assign indvars_iv_next175_mid1_fu_290_p2 = (ap_sig_allocacmp_r_1 + 10'd2);

assign p_mid1_fu_284_p2 = ($signed(zext_ln22_1_fu_280_p1) + $signed(11'd2047));

assign r_V_fu_451_p3 = {{tmp_14_reg_546}, {1'd0}};

assign ret_V_1_fu_475_p2 = (ret_V_fu_465_p2 + zext_ln1245_2_fu_471_p1);

assign ret_V_fu_465_p2 = (zext_ln1245_1_fu_461_p1 + zext_ln1245_fu_458_p1);

assign select_ln22_1_fu_246_p3 = ((icmp_ln24_fu_232_p2[0:0] == 1'b1) ? indvars_iv_next175_fu_175_p2 : ap_sig_allocacmp_r_1);

assign select_ln22_2_fu_312_p3 = ((icmp_ln24_fu_232_p2[0:0] == 1'b1) ? select_ln7_fu_304_p3 : tmp_fu_195_p3);

assign select_ln22_3_fu_360_p3 = ((icmp_ln24_fu_232_p2[0:0] == 1'b1) ? select_ln9_fu_352_p3 : tmp_6_fu_209_p3);

assign select_ln22_fu_238_p3 = ((icmp_ln24_fu_232_p2[0:0] == 1'b1) ? 10'd0 : ap_sig_allocacmp_c_load);

assign select_ln7_fu_304_p3 = ((tmp_7_fu_296_p3[0:0] == 1'b1) ? 10'd0 : ap_sig_allocacmp_r_1);

assign select_ln9_fu_352_p3 = ((icmp_ln9_1_fu_346_p2[0:0] == 1'b1) ? 10'd639 : indvars_iv_next175_mid1_fu_290_p2);

assign tmp_2_fu_254_p3 = {{select_ln22_1_fu_246_p3}, {9'd0}};

assign tmp_3_fu_262_p3 = {{select_ln22_1_fu_246_p3}, {7'd0}};

assign tmp_4_fu_320_p3 = {{select_ln22_2_fu_312_p3}, {9'd0}};

assign tmp_5_fu_181_p3 = empty_fu_169_p2[32'd10];

assign tmp_6_fu_209_p3 = ((icmp_ln9_fu_203_p2[0:0] == 1'b1) ? 10'd639 : indvars_iv_next175_fu_175_p2);

assign tmp_7_fu_296_p3 = p_mid1_fu_284_p2[32'd10];

assign tmp_8_fu_328_p3 = {{select_ln22_2_fu_312_p3}, {7'd0}};

assign tmp_9_fu_368_p3 = {{select_ln22_3_fu_360_p3}, {9'd0}};

assign tmp_fu_195_p3 = ((tmp_5_fu_181_p3[0:0] == 1'b1) ? 10'd0 : add_ln7_fu_189_p2);

assign tmp_s_fu_376_p3 = {{select_ln22_3_fu_360_p3}, {7'd0}};

assign zext_ln1245_1_fu_461_p1 = r_V_fu_451_p3;

assign zext_ln1245_2_fu_471_p1 = din_Dout_A;

assign zext_ln1245_fu_458_p1 = tmp_13_reg_541;

assign zext_ln22_1_fu_280_p1 = indvars_iv_next175_fu_175_p2;

assign zext_ln22_fu_165_p1 = ap_sig_allocacmp_r_1;

assign zext_ln455_1_fu_336_p1 = tmp_8_fu_328_p3;

assign zext_ln455_2_fu_384_p1 = tmp_s_fu_376_p3;

assign zext_ln455_3_fu_394_p1 = select_ln22_fu_238_p3;

assign zext_ln455_4_fu_404_p1 = add_ln455_3_fu_398_p2;

assign zext_ln455_5_fu_415_p1 = add_ln455_4_fu_409_p2;

assign zext_ln455_6_fu_447_p1 = add_ln455_5_reg_531;

assign zext_ln455_fu_270_p1 = tmp_3_fu_262_p3;

always @ (posedge ap_clk) begin
    zext_ln455_5_reg_521[63:19] <= 45'b000000000000000000000000000000000000000000000;
end

endmodule //avg
