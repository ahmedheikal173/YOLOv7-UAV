// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="window_avg_window_avg,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.372500,HLS_SYN_LAT=1228804,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=110,HLS_SYN_LUT=275,HLS_VERSION=2021_2}" *)

module window_avg (
        ap_local_block,
        ap_clk,
        ap_rst_n,
        din_Addr_A,
        din_EN_A,
        din_WEN_A,
        din_Din_A,
        din_Dout_A,
        din_Clk_A,
        din_Rst_A,
        dout_Addr_A,
        dout_EN_A,
        dout_WEN_A,
        dout_Din_A,
        dout_Dout_A,
        dout_Clk_A,
        dout_Rst_A,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

output   ap_local_block;
input   ap_clk;
input   ap_rst_n;
output  [31:0] din_Addr_A;
output   din_EN_A;
output  [0:0] din_WEN_A;
output  [7:0] din_Din_A;
input  [7:0] din_Dout_A;
output   din_Clk_A;
output   din_Rst_A;
output  [31:0] dout_Addr_A;
output   dout_EN_A;
output  [0:0] dout_WEN_A;
output  [7:0] dout_Din_A;
input  [7:0] dout_Dout_A;
output   dout_Clk_A;
output   dout_Rst_A;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg din_EN_A;
reg dout_EN_A;
reg[0:0] dout_WEN_A;

wire   [0:0] ap_local_deadlock;
(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_done;
wire    ap_continue;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln43_fu_106_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [20:0] i_1_reg_261;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln43_reg_269;
wire   [0:0] icmp_ln50_fu_123_p2;
reg   [0:0] icmp_ln50_reg_278;
wire   [63:0] zext_ln43_fu_118_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln51_fu_227_p1;
reg   [7:0] shift_reg_regs_V_1_fu_60;
reg   [20:0] i_fu_64;
wire   [20:0] add_ln43_fu_112_p2;
wire    ap_loop_init;
reg   [20:0] ap_sig_allocacmp_i_1;
reg   [7:0] r_V_1_fu_68;
wire   [7:0] shift_reg_regs_V_fu_145_p3;
wire   [31:0] din_Addr_A_orig;
wire   [31:0] dout_Addr_A_orig;
wire   [0:0] icmp_ln45_fu_140_p2;
wire   [0:0] icmp_ln11_fu_153_p2;
wire   [0:0] icmp_ln13_fu_166_p2;
wire   [7:0] lhs_fu_158_p3;
wire   [8:0] r_V_fu_179_p3;
wire   [9:0] zext_ln1245_1_fu_191_p1;
wire   [9:0] zext_ln1245_fu_187_p1;
wire   [7:0] rhs_1_fu_171_p3;
wire   [9:0] ret_V_fu_195_p2;
wire   [9:0] zext_ln1245_2_fu_201_p1;
wire   [9:0] ret_V_1_fu_205_p2;
wire   [20:0] add_ln51_fu_222_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_156;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

window_avg_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle),
    .ap_local_deadlock(ap_local_deadlock)
);

window_avg_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_156)) begin
        if ((icmp_ln43_fu_106_p2 == 1'd0)) begin
            i_fu_64 <= add_ln43_fu_112_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_64 <= 21'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_1_reg_261 <= ap_sig_allocacmp_i_1;
        icmp_ln43_reg_269 <= icmp_ln43_fu_106_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln43_fu_106_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln50_reg_278 <= icmp_ln50_fu_123_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_reg_269 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_V_1_fu_68 <= shift_reg_regs_V_fu_145_p3;
        shift_reg_regs_V_1_fu_60 <= r_V_1_fu_68;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln43_fu_106_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 21'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_64;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1))) begin
        din_EN_A = 1'b1;
    end else begin
        din_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dout_EN_A = 1'b1;
    end else begin
        dout_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_278 == 1'd0) & (icmp_ln43_reg_269 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        dout_WEN_A = 1'd1;
    end else begin
        dout_WEN_A = 1'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln43_fu_112_p2 = (ap_sig_allocacmp_i_1 + 21'd1);

assign add_ln51_fu_222_p2 = ($signed(i_1_reg_261) + $signed(21'd2097151));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_156 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'd0;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign din_Addr_A = din_Addr_A_orig << 32'd0;

assign din_Addr_A_orig = zext_ln43_fu_118_p1;

assign din_Clk_A = ap_clk;

assign din_Din_A = 8'd0;

assign din_Rst_A = ap_rst_n_inv;

assign din_WEN_A = 1'd0;

assign dout_Addr_A = dout_Addr_A_orig << 32'd0;

assign dout_Addr_A_orig = zext_ln51_fu_227_p1;

assign dout_Clk_A = ap_clk;

assign dout_Din_A = {{ret_V_1_fu_205_p2[9:2]}};

assign dout_Rst_A = ap_rst_n_inv;

assign icmp_ln11_fu_153_p2 = ((i_1_reg_261 == 21'd1) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_166_p2 = ((i_1_reg_261 == 21'd1228800) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_106_p2 = ((ap_sig_allocacmp_i_1 == 21'd1228801) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_140_p2 = ((i_1_reg_261 < 21'd1228800) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_123_p2 = ((ap_sig_allocacmp_i_1 == 21'd0) ? 1'b1 : 1'b0);

assign lhs_fu_158_p3 = ((icmp_ln11_fu_153_p2[0:0] == 1'b1) ? r_V_1_fu_68 : shift_reg_regs_V_1_fu_60);

assign r_V_fu_179_p3 = {{r_V_1_fu_68}, {1'd0}};

assign ret_V_1_fu_205_p2 = (ret_V_fu_195_p2 + zext_ln1245_2_fu_201_p1);

assign ret_V_fu_195_p2 = (zext_ln1245_1_fu_191_p1 + zext_ln1245_fu_187_p1);

assign rhs_1_fu_171_p3 = ((icmp_ln13_fu_166_p2[0:0] == 1'b1) ? r_V_1_fu_68 : shift_reg_regs_V_fu_145_p3);

assign shift_reg_regs_V_fu_145_p3 = ((icmp_ln45_fu_140_p2[0:0] == 1'b1) ? din_Dout_A : r_V_1_fu_68);

assign zext_ln1245_1_fu_191_p1 = r_V_fu_179_p3;

assign zext_ln1245_2_fu_201_p1 = rhs_1_fu_171_p3;

assign zext_ln1245_fu_187_p1 = lhs_fu_158_p3;

assign zext_ln43_fu_118_p1 = ap_sig_allocacmp_i_1;

assign zext_ln51_fu_227_p1 = add_ln51_fu_222_p2;

endmodule //window_avg
