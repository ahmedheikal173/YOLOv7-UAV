

================================================================
== Synthesis Summary Report of 'window_avg'
================================================================
+ General Information: 
    * Date:           Wed Jun  5 16:49:52 2024
    * Version:        2021.2 (Build 3367213 on Tue Oct 19 02:48:09 MDT 2021)
    * Project:        m41
    * Solution:       solution1 (Vitis Kernel Flow Target)
    * Product family: virtexuplus
    * Target device:  xcvu11p-flga2577-1-e
    

+ Performance & Resource Estimates: 
    
    PS: '+' for module; 'o' for loop; '*' for dataflow
    +--------------+------+------+---------+-----------+----------+---------+---------+----------+------+----+-----------+-----------+-----+
    |    Modules   | Issue|      | Latency |  Latency  | Iteration|         |   Trip  |          |      |    |           |           |     |
    |    & Loops   | Type | Slack| (cycles)|    (ns)   |  Latency | Interval|  Count  | Pipelined| BRAM | DSP|     FF    |    LUT    | URAM|
    +--------------+------+------+---------+-----------+----------+---------+---------+----------+------+----+-----------+-----------+-----+
    |+ window_avg  |     -|  2.93|  1228804|  1.229e+07|         -|  1228805|        -|        no|     -|   -|  110 (~0%)|  275 (~0%)|    -|
    | o COMP       |     -|  7.30|  1228802|  1.229e+07|         2|        1|  1228801|       yes|     -|   -|          -|          -|    -|
    +--------------+------+------+---------+-----------+----------+---------+---------+----------+------+----+-----------+-----------+-----+


================================================================
== HW Interfaces
================================================================
* S_AXILITE Interfaces
+---------------+------------+---------------+
| Interface     | Data Width | Address Width |
+---------------+------------+---------------+
| s_axi_control | 32         | 4             |
+---------------+------------+---------------+

* S_AXILITE Registers
+---------------+----------+--------+-------+--------+----------------------------------+------------------------------------------------------------------------+
| Interface     | Register | Offset | Width | Access | Description                      | Bit Fields                                                             |
+---------------+----------+--------+-------+--------+----------------------------------+------------------------------------------------------------------------+
| s_axi_control | CTRL     | 0x00   | 32    | RW     | Control signals                  | 0=AP_START 1=AP_DONE 2=AP_IDLE 3=AP_READY 4=AP_CONTINUE 7=AUTO_RESTART |
| s_axi_control | GIER     | 0x04   | 32    | RW     | Global Interrupt Enable Register | 0=Enable                                                               |
| s_axi_control | IP_IER   | 0x08   | 32    | RW     | IP Interrupt Enable Register     | 0=CHAN0_INT_EN 1=CHAN1_INT_EN 5=CHAN2_INT_EN                           |
| s_axi_control | IP_ISR   | 0x0c   | 32    | RW     | IP Interrupt Status Register     | 0=CHAN0_INT_ST 1=CHAN1_INT_ST 5=CHAN2_INT_ST                           |
+---------------+----------+--------+-------+--------+----------------------------------+------------------------------------------------------------------------+

* BRAM
+------------+------------+---------------+
| Interface  | Data Width | Address Width |
+------------+------------+---------------+
| din_PORTA  | 8          | 32            |
| dout_PORTA | 8          | 32            |
+------------+------------+---------------+

* TOP LEVEL CONTROL
+-----------+---------------+-----------+
| Interface | Type          | Ports     |
+-----------+---------------+-----------+
| ap_clk    | clock         | ap_clk    |
| ap_rst_n  | reset         | ap_rst_n  |
| interrupt | interrupt     | interrupt |
| ap_ctrl   | ap_ctrl_chain |           |
+-----------+---------------+-----------+


================================================================
== SW I/O Information
================================================================
* Top Function Arguments
+----------+-----------+-------------+
| Argument | Direction | Datatype    |
+----------+-----------+-------------+
| din      | in        | ap_uint<8>* |
| dout     | out       | ap_uint<8>* |
+----------+-----------+-------------+

* SW-to-HW Mapping
+----------+--------------+-----------+
| Argument | HW Interface | HW Type   |
+----------+--------------+-----------+
| din      | din_PORTA    | interface |
| dout     | dout_PORTA   | interface |
+----------+--------------+-----------+


================================================================
== M_AXI Burst Information
================================================================
 Note: All burst requests might be further partitioned into multiple requests during RTL generation based on max_read_burst_length or max_write_burst_length settings.

  No burst in design

================================================================
== Bind Op Report
================================================================
+----------------------+-----+--------+----------+-----+--------+---------+
| Name                 | DSP | Pragma | Variable | Op  | Impl   | Latency |
+----------------------+-----+--------+----------+-----+--------+---------+
| + window_avg         | 0   |        |          |     |        |         |
|   add_ln43_fu_112_p2 | -   |        | add_ln43 | add | fabric | 0       |
|   ret_V_fu_195_p2    | -   |        | ret_V    | add | tadder | 0       |
|   ret_V_1_fu_205_p2  | -   |        | ret_V_1  | add | tadder | 0       |
|   add_ln51_fu_222_p2 | -   |        | add_ln51 | add | fabric | 0       |
+----------------------+-----+--------+----------+-----+--------+---------+


================================================================
== Bind Storage Report
================================================================
  No bind storage info in design

================================================================
== User Pragma Report
================================================================
* Valid Pragma Syntax
+--------------+-------------------------------------------+------------------------------------------------------------------------------+
| Type         | Options                                   | Location                                                                     |
+--------------+-------------------------------------------+------------------------------------------------------------------------------+
| bind_storage | variable=din type=RAM_T2P impl=BRAM       | ../../src/./shift_class.hpp:18 in shift_class<datatype, num_regs>, din       |
| bind_storage | variable=load_data type=RAM_T2P impl=BRAM | ../../src/./shift_class.hpp:19 in shift_class<datatype, num_regs>, load_data |
| bind_storage | variable=regs type=RAM_T2P impl=BRAM      | ../../src/./shift_class.hpp:20 in shift_class<datatype, num_regs>, regs      |
| bind_storage | variable=shift_reg type=RAM_T2P impl=BRAM | ../../src/window_1d_sliding.cpp:8 in clip_window, shift_reg                  |
| interface    | mode=BRAM port=din                        | ../../src/window_1d_sliding.cpp:31 in window_avg, din                        |
| interface    | mode=BRAM port=dout                       | ../../src/window_1d_sliding.cpp:32 in window_avg, dout                       |
| bind_storage | variable=shift_reg type=RAM_T2P impl=BRAM | ../../src/window_1d_sliding.cpp:35 in window_avg, shift_reg                  |
| bind_storage | variable=window type=RAM_T2P impl=BRAM    | ../../src/window_1d_sliding.cpp:37 in window_avg, window                     |
| pipeline     | II=1                                      | ../../src/window_1d_sliding.cpp:44 in window_avg                             |
+--------------+-------------------------------------------+------------------------------------------------------------------------------+


